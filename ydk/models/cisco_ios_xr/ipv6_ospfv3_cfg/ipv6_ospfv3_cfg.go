// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv6-ospfv3 package configuration.
// 
// This module contains definitions
// for the following management objects:
//   ospfv3: OSPFv3 configuration
// 
// This YANG module augments the
//   Cisco-IOS-XR-snmp-agent-cfg
// module with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv6_ospfv3_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv6_ospfv3_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ospfv3-cfg ospfv3}", reflect.TypeOf(Ospfv3{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3", reflect.TypeOf(Ospfv3{}))
}

// Ospfv3DomainId represents Ospfv3 domain id
type Ospfv3DomainId string

const (
    // Type 0x0005
    Ospfv3DomainId_type0005 Ospfv3DomainId = "type0005"

    // Type 0x0105
    Ospfv3DomainId_type0105 Ospfv3DomainId = "type0105"

    // Type 0x0205
    Ospfv3DomainId_type0205 Ospfv3DomainId = "type0205"

    // Type 0x8005
    Ospfv3DomainId_type8005 Ospfv3DomainId = "type8005"
)

// Ospfv3Network represents Ospfv3 network
type Ospfv3Network string

const (
    // Broadcast multi-access network
    Ospfv3Network_broadcast Ospfv3Network = "broadcast"

    // Non-broadcast multi-access network
    Ospfv3Network_non_broadcast Ospfv3Network = "non-broadcast"

    // Point-to-point network
    Ospfv3Network_point_to_point Ospfv3Network = "point-to-point"

    // Point-to-multipoint network
    Ospfv3Network_point_to_multipoint Ospfv3Network = "point-to-multipoint"

    // Non-broadcast point-to-multipoint network
    Ospfv3Network_non_broadcast_point_to_multipoint Ospfv3Network = "non-broadcast-point-to-multipoint"
)

// Ospfv3Metric represents Ospfv3 metric
type Ospfv3Metric string

const (
    // OSPFv3 external type 1 metrics
    Ospfv3Metric_type1 Ospfv3Metric = "type1"

    // OSPFv3 external type 2 metrics
    Ospfv3Metric_type2 Ospfv3Metric = "type2"
)

// Ospfv3AuthenticationType2 represents Ospfv3 authentication type2
type Ospfv3AuthenticationType2 string

const (
    // NULL authentication
    Ospfv3AuthenticationType2_null Ospfv3AuthenticationType2 = "null"

    // MD5 algorithm
    Ospfv3AuthenticationType2_md5 Ospfv3AuthenticationType2 = "md5"

    // SHA1 algorithm
    Ospfv3AuthenticationType2_sha1 Ospfv3AuthenticationType2 = "sha1"
)

// Ospfv3FastReroutePriority represents Ospfv3 fast reroute priority
type Ospfv3FastReroutePriority string

const (
    // Critical
    Ospfv3FastReroutePriority_critical Ospfv3FastReroutePriority = "critical"

    // High
    Ospfv3FastReroutePriority_high Ospfv3FastReroutePriority = "high"

    // Medium
    Ospfv3FastReroutePriority_medium Ospfv3FastReroutePriority = "medium"

    // Low
    Ospfv3FastReroutePriority_low Ospfv3FastReroutePriority = "low"
)

// Ospfv3bfdEnableMode represents Ospfv3bfd enable mode
type Ospfv3bfdEnableMode string

const (
    // Disable Mode - Prevent inheritance
    Ospfv3bfdEnableMode_disable Ospfv3bfdEnableMode = "disable"

    // Default Mode - Default BFD behavior
    Ospfv3bfdEnableMode_default_ Ospfv3bfdEnableMode = "default"

    // Strict Mode - Hold down adj until BFD sesion up
    Ospfv3bfdEnableMode_strict Ospfv3bfdEnableMode = "strict"
)

// Ospfv3LogAdj represents Ospfv3 log adj
type Ospfv3LogAdj string

const (
    // No output
    Ospfv3LogAdj_suppress Ospfv3LogAdj = "suppress"

    // Limited output
    Ospfv3LogAdj_brief Ospfv3LogAdj = "brief"

    // Verbose output
    Ospfv3LogAdj_detail Ospfv3LogAdj = "detail"
)

// Ospfv3TraceBufSize represents Ospfv3 trace buf size
type Ospfv3TraceBufSize string

const (
    // Disable trace
    Ospfv3TraceBufSize_size0 Ospfv3TraceBufSize = "size0"

    // trace buffer size 256
    Ospfv3TraceBufSize_size256 Ospfv3TraceBufSize = "size256"

    // trace buffer size 512
    Ospfv3TraceBufSize_size512 Ospfv3TraceBufSize = "size512"

    // trace buffer size 1024
    Ospfv3TraceBufSize_size1024 Ospfv3TraceBufSize = "size1024"

    // trace buffer size 2048
    Ospfv3TraceBufSize_size2048 Ospfv3TraceBufSize = "size2048"

    // trace buffer size 4096
    Ospfv3TraceBufSize_size4096 Ospfv3TraceBufSize = "size4096"

    // trace buffer size 8192
    Ospfv3TraceBufSize_size8192 Ospfv3TraceBufSize = "size8192"

    // trace buffer size 16384
    Ospfv3TraceBufSize_size16384 Ospfv3TraceBufSize = "size16384"

    // trace buffer size 32768
    Ospfv3TraceBufSize_size32768 Ospfv3TraceBufSize = "size32768"

    // trace buffer size 65536
    Ospfv3TraceBufSize_size65536 Ospfv3TraceBufSize = "size65536"
)

// Ospfv3FastReroute represents Ospfv3 fast reroute
type Ospfv3FastReroute string

const (
    // Disable
    Ospfv3FastReroute_none Ospfv3FastReroute = "none"

    // Per link
    Ospfv3FastReroute_per_link Ospfv3FastReroute = "per-link"

    // Per prefix
    Ospfv3FastReroute_per_prefix Ospfv3FastReroute = "per-prefix"
)

// Ospfv3isisRoute represents Ospfv3isis route
type Ospfv3isisRoute string

const (
    // IS-IS level-1 routes
    Ospfv3isisRoute_level1 Ospfv3isisRoute = "level1"

    // IS-IS level-2 routes
    Ospfv3isisRoute_level2 Ospfv3isisRoute = "level2"

    // IS-IS level-1 and level-2 routes
    Ospfv3isisRoute_level1_and2 Ospfv3isisRoute = "level1-and2"
)

// Ospfv3nssaExternalRoute represents Ospfv3nssa external route
type Ospfv3nssaExternalRoute string

const (
    // NSSA external type 1 routes
    Ospfv3nssaExternalRoute_external1 Ospfv3nssaExternalRoute = "external1"

    // NSSA external type 2 routes
    Ospfv3nssaExternalRoute_external2 Ospfv3nssaExternalRoute = "external2"

    // NSSA external (type 1 and 2) routes
    Ospfv3nssaExternalRoute_external Ospfv3nssaExternalRoute = "external"
)

// Ospfv3ExternalRoute represents Ospfv3 external route
type Ospfv3ExternalRoute string

const (
    // External type 1 routes
    Ospfv3ExternalRoute_external1 Ospfv3ExternalRoute = "external1"

    // External type 2 routes
    Ospfv3ExternalRoute_external2 Ospfv3ExternalRoute = "external2"

    // External (type 1 and 2) routes
    Ospfv3ExternalRoute_external Ospfv3ExternalRoute = "external"
)

// Ospfv3nsr represents Ospfv3nsr
type Ospfv3nsr string

const (
    // Enable non-stop routing
    Ospfv3nsr_true Ospfv3nsr = "true"

    // Disable non-stop routing
    Ospfv3nsr_false Ospfv3nsr = "false"
)

// Ospfv3AddressFamily represents Ospfv3 address family
type Ospfv3AddressFamily string

const (
    // IPv6 address family
    Ospfv3AddressFamily_ipv6 Ospfv3AddressFamily = "ipv6"
)

// Ospfv3Protocol represents Ospfv3 protocol
type Ospfv3Protocol string

const (
    // All
    Ospfv3Protocol_all Ospfv3Protocol = "all"

    // Connected
    Ospfv3Protocol_connected Ospfv3Protocol = "connected"

    // Static
    Ospfv3Protocol_static Ospfv3Protocol = "static"

    // BGP
    Ospfv3Protocol_bgp Ospfv3Protocol = "bgp"

    // ISIS
    Ospfv3Protocol_isis Ospfv3Protocol = "isis"

    // OSPFv3
    Ospfv3Protocol_ospfv3 Ospfv3Protocol = "ospfv3"

    // EIGRP
    Ospfv3Protocol_eigrp Ospfv3Protocol = "eigrp"
)

// Ospfv3EncryptionAlgorithm represents Ospfv3 encryption algorithm
type Ospfv3EncryptionAlgorithm string

const (
    // Use NULL encryption
    Ospfv3EncryptionAlgorithm_null Ospfv3EncryptionAlgorithm = "null"

    // Use the DES algorithm
    Ospfv3EncryptionAlgorithm_des Ospfv3EncryptionAlgorithm = "des"

    // Use the triple DES algorithm
    Ospfv3EncryptionAlgorithm_Y_3des Ospfv3EncryptionAlgorithm = "3des"

    // Use the AES algorithm
    Ospfv3EncryptionAlgorithm_aes Ospfv3EncryptionAlgorithm = "aes"

    // Use the 192-bit AES algorithm
    Ospfv3EncryptionAlgorithm_aes192 Ospfv3EncryptionAlgorithm = "aes192"

    // Use the 256-bit AES algorithm
    Ospfv3EncryptionAlgorithm_aes256 Ospfv3EncryptionAlgorithm = "aes256"
)

// Ospfv3ProtocolType2 represents Ospfv3 protocol type2
type Ospfv3ProtocolType2 string

const (
    // Connected
    Ospfv3ProtocolType2_connected Ospfv3ProtocolType2 = "connected"

    // Static
    Ospfv3ProtocolType2_static Ospfv3ProtocolType2 = "static"

    // BGP
    Ospfv3ProtocolType2_bgp Ospfv3ProtocolType2 = "bgp"

    // ISIS
    Ospfv3ProtocolType2_isis Ospfv3ProtocolType2 = "isis"

    // OSPFv3
    Ospfv3ProtocolType2_ospfv3 Ospfv3ProtocolType2 = "ospfv3"

    // EIGRP
    Ospfv3ProtocolType2_eigrp Ospfv3ProtocolType2 = "eigrp"

    // Subscriber
    Ospfv3ProtocolType2_subscriber Ospfv3ProtocolType2 = "subscriber"

    // Application
    Ospfv3ProtocolType2_application Ospfv3ProtocolType2 = "application"

    // Mobile
    Ospfv3ProtocolType2_mobile Ospfv3ProtocolType2 = "mobile"
)

// Ospfv3SubsequentAddressFamily represents Ospfv3 subsequent address family
type Ospfv3SubsequentAddressFamily string

const (
    // Unicast subsequent address family
    Ospfv3SubsequentAddressFamily_unicast Ospfv3SubsequentAddressFamily = "unicast"
)

// Ospfv3EigrpRoute represents Ospfv3 eigrp route
type Ospfv3EigrpRoute string

const (
    // EIGRP internal routes
    Ospfv3EigrpRoute_internal Ospfv3EigrpRoute = "internal"

    // EIGRP external routes
    Ospfv3EigrpRoute_external Ospfv3EigrpRoute = "external"
)

// Ospfv3FastRerouteTiebreakers represents Ospfv3 fast reroute tiebreakers
type Ospfv3FastRerouteTiebreakers string

const (
    // Downstream
    Ospfv3FastRerouteTiebreakers_downstream Ospfv3FastRerouteTiebreakers = "downstream"

    // LC Disjoint
    Ospfv3FastRerouteTiebreakers_line_card_disjoint Ospfv3FastRerouteTiebreakers = "line-card-disjoint"

    // Lowest metric
    Ospfv3FastRerouteTiebreakers_lowest_metric Ospfv3FastRerouteTiebreakers = "lowest-metric"

    // Node protection
    Ospfv3FastRerouteTiebreakers_node_protect Ospfv3FastRerouteTiebreakers = "node-protect"

    // Primary path
    Ospfv3FastRerouteTiebreakers_primary_path Ospfv3FastRerouteTiebreakers = "primary-path"

    // Secondar path
    Ospfv3FastRerouteTiebreakers_secondary_path Ospfv3FastRerouteTiebreakers = "secondary-path"

    // SRLG
    Ospfv3FastRerouteTiebreakers_srlg_disjoint Ospfv3FastRerouteTiebreakers = "srlg-disjoint"
)

// Ospfv3Authentication represents Ospfv3 authentication
type Ospfv3Authentication string

const (
    // MD5 algorithm
    Ospfv3Authentication_md5 Ospfv3Authentication = "md5"

    // SHA1 algorithm
    Ospfv3Authentication_sha1 Ospfv3Authentication = "sha1"
)

// Ospfv3InternalRoute represents Ospfv3 internal route
type Ospfv3InternalRoute string

const (
    // OSPFv3 internal routes
    Ospfv3InternalRoute_internal Ospfv3InternalRoute = "internal"
)

// Ospfv3
// OSPFv3 configuration
type Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable OSPFv3 router IDs as DNS names. The type is interface{}.
    DnsNameLookup interface{}

    // OSPFv3 processes.
    Processes Ospfv3_Processes
}

func (ospfv3 *Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3) GetGoName(yname string) string {
    if yname == "dns-name-lookup" { return "DnsNameLookup" }
    if yname == "processes" { return "Processes" }
    return ""
}

func (ospfv3 *Ospfv3) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3"
}

func (ospfv3 *Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "processes" {
        return &ospfv3.Processes
    }
    return nil
}

func (ospfv3 *Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["processes"] = &ospfv3.Processes
    return children
}

func (ospfv3 *Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dns-name-lookup"] = ospfv3.DnsNameLookup
    return leafs
}

func (ospfv3 *Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3) GetParentYangName() string { return "Cisco-IOS-XR-ipv6-ospfv3-cfg" }

// Ospfv3_Processes
// OSPFv3 processes
type Ospfv3_Processes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An OSPFv3 process. The type is slice of Ospfv3_Processes_Process.
    Process []Ospfv3_Processes_Process
}

func (processes *Ospfv3_Processes) GetFilter() yfilter.YFilter { return processes.YFilter }

func (processes *Ospfv3_Processes) SetFilter(yf yfilter.YFilter) { processes.YFilter = yf }

func (processes *Ospfv3_Processes) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (processes *Ospfv3_Processes) GetSegmentPath() string {
    return "processes"
}

func (processes *Ospfv3_Processes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range processes.Process {
            if processes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process{}
        processes.Process = append(processes.Process, child)
        return &processes.Process[len(processes.Process)-1]
    }
    return nil
}

func (processes *Ospfv3_Processes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range processes.Process {
        children[processes.Process[i].GetSegmentPath()] = &processes.Process[i]
    }
    return children
}

func (processes *Ospfv3_Processes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (processes *Ospfv3_Processes) GetBundleName() string { return "cisco_ios_xr" }

func (processes *Ospfv3_Processes) GetYangName() string { return "processes" }

func (processes *Ospfv3_Processes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processes *Ospfv3_Processes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processes *Ospfv3_Processes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processes *Ospfv3_Processes) SetParent(parent types.Entity) { processes.parent = parent }

func (processes *Ospfv3_Processes) GetParent() types.Entity { return processes.parent }

func (processes *Ospfv3_Processes) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process
// An OSPFv3 process
type Ospfv3_Processes_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPFv3 process name. The type is string with
    // length: 1..32.
    ProcessName interface{}

    // Enable non-stop routing. The type is Ospfv3nsr. The default value is true.
    Nsr interface{}

    // Enable protocol shutdown. The type is interface{}.
    ProtocolShutdown interface{}

    // Enable OSPFv3. The type is interface{}.
    Enable interface{}

    // Default VRF related configuration.
    DefaultVrf Ospfv3_Processes_Process_DefaultVrf

    // VRF related configuration.
    Vrfs Ospfv3_Processes_Process_Vrfs

    // Address Family (AF).
    Af Ospfv3_Processes_Process_Af

    // Configuration to change size of trace buffer.
    TraceBufs Ospfv3_Processes_Process_TraceBufs
}

func (process *Ospfv3_Processes_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Ospfv3_Processes_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Ospfv3_Processes_Process) GetGoName(yname string) string {
    if yname == "process-name" { return "ProcessName" }
    if yname == "nsr" { return "Nsr" }
    if yname == "protocol-shutdown" { return "ProtocolShutdown" }
    if yname == "enable" { return "Enable" }
    if yname == "default-vrf" { return "DefaultVrf" }
    if yname == "vrfs" { return "Vrfs" }
    if yname == "af" { return "Af" }
    if yname == "trace-bufs" { return "TraceBufs" }
    return ""
}

func (process *Ospfv3_Processes_Process) GetSegmentPath() string {
    return "process" + "[process-name='" + fmt.Sprintf("%v", process.ProcessName) + "']"
}

func (process *Ospfv3_Processes_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "default-vrf" {
        return &process.DefaultVrf
    }
    if childYangName == "vrfs" {
        return &process.Vrfs
    }
    if childYangName == "af" {
        return &process.Af
    }
    if childYangName == "trace-bufs" {
        return &process.TraceBufs
    }
    return nil
}

func (process *Ospfv3_Processes_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["default-vrf"] = &process.DefaultVrf
    children["vrfs"] = &process.Vrfs
    children["af"] = &process.Af
    children["trace-bufs"] = &process.TraceBufs
    return children
}

func (process *Ospfv3_Processes_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["process-name"] = process.ProcessName
    leafs["nsr"] = process.Nsr
    leafs["protocol-shutdown"] = process.ProtocolShutdown
    leafs["enable"] = process.Enable
    return leafs
}

func (process *Ospfv3_Processes_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Ospfv3_Processes_Process) GetYangName() string { return "process" }

func (process *Ospfv3_Processes_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Ospfv3_Processes_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Ospfv3_Processes_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Ospfv3_Processes_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Ospfv3_Processes_Process) GetParent() types.Entity { return process.parent }

func (process *Ospfv3_Processes_Process) GetParentYangName() string { return "processes" }

// Ospfv3_Processes_Process_DefaultVrf
// Default VRF related configuration
type Ospfv3_Processes_Process_DefaultVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // SPF prefix prioritization disabled. The type is interface{}.
    SpfPrefixPriorityDisable interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Set metric of redistributed routes. The type is interface{} with range:
    // 1..16777214.
    DefaultMetric interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Route policy for SPF prefix prioritization. The type is string.
    SpfPrefixPriorityPolicy interface{}

    // Specify the router ID for this OSPFv3 process in IPv4 address format. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Log changes in adjacency state. The type is Ospfv3LogAdj.
    LogAdjacencyChanges interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Area configuration.
    AreaAddresses Ospfv3_Processes_Process_DefaultVrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospfv3_Processes_Process_DefaultVrf_Timers

    // Summarize redistributed routes matching prefix/length.
    SummaryPrefixes Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes

    // SNMP configuration.
    Snmp Ospfv3_Processes_Process_DefaultVrf_Snmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_FastReroute

    // Define an administrative distance.
    Distance Ospfv3_Processes_Process_DefaultVrf_Distance

    // Set OSPFv3 limits.
    Maximum Ospfv3_Processes_Process_DefaultVrf_Maximum

    // Redistribute information from another routing protocol.
    Redistributes Ospfv3_Processes_Process_DefaultVrf_Redistributes

    // Do not complain about a specified event.
    Ignore Ospfv3_Processes_Process_DefaultVrf_Ignore

    // Filter prefixes from RIB .
    DistributeListOut Ospfv3_Processes_Process_DefaultVrf_DistributeListOut

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_DefaultVrf_DistributeList

    // Stub router configuration.
    StubRouter Ospfv3_Processes_Process_DefaultVrf_StubRouter

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_DefaultVrf_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_Authentication

    // Graceful restart configuration.
    GracefulRestart Ospfv3_Processes_Process_DefaultVrf_GracefulRestart

    // Control distribution of default information.
    DefaultInformation Ospfv3_Processes_Process_DefaultVrf_DefaultInformation

    // Process scope configuration.
    ProcessScope Ospfv3_Processes_Process_DefaultVrf_ProcessScope

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_Encryption

    // Calculate interface cost according to bandwidth.
    AutoCost Ospfv3_Processes_Process_DefaultVrf_AutoCost
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetFilter() yfilter.YFilter { return defaultVrf.YFilter }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) SetFilter(yf yfilter.YFilter) { defaultVrf.YFilter = yf }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetGoName(yname string) string {
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "spf-prefix-priority-disable" { return "SpfPrefixPriorityDisable" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "cost" { return "Cost" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "spf-prefix-priority-policy" { return "SpfPrefixPriorityPolicy" }
    if yname == "router-id" { return "RouterId" }
    if yname == "network" { return "Network" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "log-adjacency-changes" { return "LogAdjacencyChanges" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "area-addresses" { return "AreaAddresses" }
    if yname == "timers" { return "Timers" }
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "snmp" { return "Snmp" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "distance" { return "Distance" }
    if yname == "maximum" { return "Maximum" }
    if yname == "redistributes" { return "Redistributes" }
    if yname == "ignore" { return "Ignore" }
    if yname == "distribute-list-out" { return "DistributeListOut" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "stub-router" { return "StubRouter" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "authentication" { return "Authentication" }
    if yname == "graceful-restart" { return "GracefulRestart" }
    if yname == "default-information" { return "DefaultInformation" }
    if yname == "process-scope" { return "ProcessScope" }
    if yname == "encryption" { return "Encryption" }
    if yname == "auto-cost" { return "AutoCost" }
    return ""
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetSegmentPath() string {
    return "default-vrf"
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-addresses" {
        return &defaultVrf.AreaAddresses
    }
    if childYangName == "timers" {
        return &defaultVrf.Timers
    }
    if childYangName == "summary-prefixes" {
        return &defaultVrf.SummaryPrefixes
    }
    if childYangName == "snmp" {
        return &defaultVrf.Snmp
    }
    if childYangName == "fast-reroute" {
        return &defaultVrf.FastReroute
    }
    if childYangName == "distance" {
        return &defaultVrf.Distance
    }
    if childYangName == "maximum" {
        return &defaultVrf.Maximum
    }
    if childYangName == "redistributes" {
        return &defaultVrf.Redistributes
    }
    if childYangName == "ignore" {
        return &defaultVrf.Ignore
    }
    if childYangName == "distribute-list-out" {
        return &defaultVrf.DistributeListOut
    }
    if childYangName == "distribute-list" {
        return &defaultVrf.DistributeList
    }
    if childYangName == "stub-router" {
        return &defaultVrf.StubRouter
    }
    if childYangName == "bfd" {
        return &defaultVrf.Bfd
    }
    if childYangName == "database-filter" {
        return &defaultVrf.DatabaseFilter
    }
    if childYangName == "authentication" {
        return &defaultVrf.Authentication
    }
    if childYangName == "graceful-restart" {
        return &defaultVrf.GracefulRestart
    }
    if childYangName == "default-information" {
        return &defaultVrf.DefaultInformation
    }
    if childYangName == "process-scope" {
        return &defaultVrf.ProcessScope
    }
    if childYangName == "encryption" {
        return &defaultVrf.Encryption
    }
    if childYangName == "auto-cost" {
        return &defaultVrf.AutoCost
    }
    return nil
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["area-addresses"] = &defaultVrf.AreaAddresses
    children["timers"] = &defaultVrf.Timers
    children["summary-prefixes"] = &defaultVrf.SummaryPrefixes
    children["snmp"] = &defaultVrf.Snmp
    children["fast-reroute"] = &defaultVrf.FastReroute
    children["distance"] = &defaultVrf.Distance
    children["maximum"] = &defaultVrf.Maximum
    children["redistributes"] = &defaultVrf.Redistributes
    children["ignore"] = &defaultVrf.Ignore
    children["distribute-list-out"] = &defaultVrf.DistributeListOut
    children["distribute-list"] = &defaultVrf.DistributeList
    children["stub-router"] = &defaultVrf.StubRouter
    children["bfd"] = &defaultVrf.Bfd
    children["database-filter"] = &defaultVrf.DatabaseFilter
    children["authentication"] = &defaultVrf.Authentication
    children["graceful-restart"] = &defaultVrf.GracefulRestart
    children["default-information"] = &defaultVrf.DefaultInformation
    children["process-scope"] = &defaultVrf.ProcessScope
    children["encryption"] = &defaultVrf.Encryption
    children["auto-cost"] = &defaultVrf.AutoCost
    return children
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ldp-sync"] = defaultVrf.LdpSync
    leafs["prefix-suppression"] = defaultVrf.PrefixSuppression
    leafs["spf-prefix-priority-disable"] = defaultVrf.SpfPrefixPriorityDisable
    leafs["retransmit-interval"] = defaultVrf.RetransmitInterval
    leafs["passive"] = defaultVrf.Passive
    leafs["default-metric"] = defaultVrf.DefaultMetric
    leafs["flood-reduction"] = defaultVrf.FloodReduction
    leafs["hello-interval"] = defaultVrf.HelloInterval
    leafs["priority"] = defaultVrf.Priority
    leafs["cost"] = defaultVrf.Cost
    leafs["dead-interval"] = defaultVrf.DeadInterval
    leafs["packet-size"] = defaultVrf.PacketSize
    leafs["instance"] = defaultVrf.Instance
    leafs["spf-prefix-priority-policy"] = defaultVrf.SpfPrefixPriorityPolicy
    leafs["router-id"] = defaultVrf.RouterId
    leafs["network"] = defaultVrf.Network
    leafs["mtu-ignore"] = defaultVrf.MtuIgnore
    leafs["log-adjacency-changes"] = defaultVrf.LogAdjacencyChanges
    leafs["demand-circuit"] = defaultVrf.DemandCircuit
    leafs["transmit-delay"] = defaultVrf.TransmitDelay
    return leafs
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetBundleName() string { return "cisco_ios_xr" }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetYangName() string { return "default-vrf" }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) SetParent(parent types.Entity) { defaultVrf.parent = parent }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetParent() types.Entity { return defaultVrf.parent }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses
// Area configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetFilter() yfilter.YFilter { return areaAddresses.YFilter }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) SetFilter(yf yfilter.YFilter) { areaAddresses.YFilter = yf }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetGoName(yname string) string {
    if yname == "area-address" { return "AreaAddress" }
    if yname == "area-area-id" { return "AreaAreaId" }
    return ""
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetSegmentPath() string {
    return "area-addresses"
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-address" {
        for _, c := range areaAddresses.AreaAddress {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress{}
        areaAddresses.AreaAddress = append(areaAddresses.AreaAddress, child)
        return &areaAddresses.AreaAddress[len(areaAddresses.AreaAddress)-1]
    }
    if childYangName == "area-area-id" {
        for _, c := range areaAddresses.AreaAreaId {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId{}
        areaAddresses.AreaAreaId = append(areaAddresses.AreaAreaId, child)
        return &areaAddresses.AreaAreaId[len(areaAddresses.AreaAreaId)-1]
    }
    return nil
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaAddresses.AreaAddress {
        children[areaAddresses.AreaAddress[i].GetSegmentPath()] = &areaAddresses.AreaAddress[i]
    }
    for i := range areaAddresses.AreaAreaId {
        children[areaAddresses.AreaAreaId[i].GetSegmentPath()] = &areaAddresses.AreaAreaId[i]
    }
    return children
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetYangName() string { return "area-addresses" }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) SetParent(parent types.Entity) { areaAddresses.parent = parent }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetParent() types.Entity { return areaAddresses.parent }

func (areaAddresses *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Specify area as a stub area.  Allowed only in non-backbone areas. The type
    // is bool.
    Stub interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Enable OSPFv3 area. The type is interface{}.
    Enable interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 0..16777215.
    DefaultCost interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd

    // Range configuration.
    Ranges Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption

    // Specify area as a NSSA area.  Allowed only in non-backbone areas.
    Nssa Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList

    // OSPFv3 interfaces.
    Interfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces

    // Area Scope Configuration.
    AreaScope Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope

    // Sham Link sub-mode.
    ShamLinks Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks

    // Virtual link sub-mode.
    VirtualLinks Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetFilter() yfilter.YFilter { return areaAddress.YFilter }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) SetFilter(yf yfilter.YFilter) { areaAddress.YFilter = yf }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "stub" { return "Stub" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "priority" { return "Priority" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "enable" { return "Enable" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "passive" { return "Passive" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "network" { return "Network" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "cost" { return "Cost" }
    if yname == "authentication" { return "Authentication" }
    if yname == "bfd" { return "Bfd" }
    if yname == "ranges" { return "Ranges" }
    if yname == "encryption" { return "Encryption" }
    if yname == "nssa" { return "Nssa" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "sham-links" { return "ShamLinks" }
    if yname == "virtual-links" { return "VirtualLinks" }
    return ""
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetSegmentPath() string {
    return "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &areaAddress.Authentication
    }
    if childYangName == "bfd" {
        return &areaAddress.Bfd
    }
    if childYangName == "ranges" {
        return &areaAddress.Ranges
    }
    if childYangName == "encryption" {
        return &areaAddress.Encryption
    }
    if childYangName == "nssa" {
        return &areaAddress.Nssa
    }
    if childYangName == "database-filter" {
        return &areaAddress.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &areaAddress.DistributeList
    }
    if childYangName == "interfaces" {
        return &areaAddress.Interfaces
    }
    if childYangName == "area-scope" {
        return &areaAddress.AreaScope
    }
    if childYangName == "sham-links" {
        return &areaAddress.ShamLinks
    }
    if childYangName == "virtual-links" {
        return &areaAddress.VirtualLinks
    }
    return nil
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &areaAddress.Authentication
    children["bfd"] = &areaAddress.Bfd
    children["ranges"] = &areaAddress.Ranges
    children["encryption"] = &areaAddress.Encryption
    children["nssa"] = &areaAddress.Nssa
    children["database-filter"] = &areaAddress.DatabaseFilter
    children["distribute-list"] = &areaAddress.DistributeList
    children["interfaces"] = &areaAddress.Interfaces
    children["area-scope"] = &areaAddress.AreaScope
    children["sham-links"] = &areaAddress.ShamLinks
    children["virtual-links"] = &areaAddress.VirtualLinks
    return children
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaAddress.Address
    leafs["stub"] = areaAddress.Stub
    leafs["packet-size"] = areaAddress.PacketSize
    leafs["instance"] = areaAddress.Instance
    leafs["demand-circuit"] = areaAddress.DemandCircuit
    leafs["priority"] = areaAddress.Priority
    leafs["prefix-suppression"] = areaAddress.PrefixSuppression
    leafs["enable"] = areaAddress.Enable
    leafs["mtu-ignore"] = areaAddress.MtuIgnore
    leafs["passive"] = areaAddress.Passive
    leafs["hello-interval"] = areaAddress.HelloInterval
    leafs["dead-interval"] = areaAddress.DeadInterval
    leafs["default-cost"] = areaAddress.DefaultCost
    leafs["flood-reduction"] = areaAddress.FloodReduction
    leafs["retransmit-interval"] = areaAddress.RetransmitInterval
    leafs["ldp-sync"] = areaAddress.LdpSync
    leafs["network"] = areaAddress.Network
    leafs["transmit-delay"] = areaAddress.TransmitDelay
    leafs["cost"] = areaAddress.Cost
    return leafs
}

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetYangName() string { return "area-address" }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) SetParent(parent types.Entity) { areaAddress.parent = parent }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetParent() types.Entity { return areaAddress.parent }

func (areaAddress *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress) GetParentYangName() string { return "area-addresses" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Authentication) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Bfd) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges
// Range configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summarize inter-area routes matching prefix/length. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range.
    Range []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetYangName() string { return "ranges" }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range
// Summarize inter-area routes matching
// prefix/length
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix format. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Do not advertise address range. The type is bool. The default value is
    // false.
    NotAdvertise interface{}

    // Specified metric for this range. The type is interface{} with range:
    // 1..16777214.
    Cost interface{}
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "cost" { return "Cost" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetSegmentPath() string {
    return "range" + "[prefix='" + fmt.Sprintf("%v", self.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", self.PrefixLength) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = self.Prefix
    leafs["prefix-length"] = self.PrefixLength
    leafs["not-advertise"] = self.NotAdvertise
    leafs["cost"] = self.Cost
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetYangName() string { return "range" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Ranges_Range) GetParentYangName() string { return "ranges" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Encryption) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area.  Allowed only in
// non-backbone areas
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Only valid with DefaultInfoOriginate. The type is interface{} with range:
    // 0..16777214.
    Metric interface{}

    // Only valid with DefaultInfoOriginate. The type is Ospfv3Metric.
    MetricType interface{}

    // Do not send summary LSA into NSSA. The type is interface{}.
    NoSummary interface{}
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "no-summary" { return "NoSummary" }
    return ""
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["metric"] = nssa.Metric
    leafs["metric-type"] = nssa.MetricType
    leafs["no-summary"] = nssa.NoSummary
    return leafs
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Nssa) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces
// OSPFv3 interfaces
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface.
    Interface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface
// OSPFv3 interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface to configure. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable OSPFv3 interface. The type is interface{}.
    Enable interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication

    // Specify a neighbor router.
    Neighbors Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "enable" { return "Enable" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "cost" { return "Cost" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "instance" { return "Instance" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "priority" { return "Priority" }
    if yname == "network" { return "Network" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "encryption" { return "Encryption" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &self.Authentication
    }
    if childYangName == "neighbors" {
        return &self.Neighbors
    }
    if childYangName == "encryption" {
        return &self.Encryption
    }
    if childYangName == "bfd" {
        return &self.Bfd
    }
    if childYangName == "database-filter" {
        return &self.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &self.DistributeList
    }
    if childYangName == "fast-reroute" {
        return &self.FastReroute
    }
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &self.Authentication
    children["neighbors"] = &self.Neighbors
    children["encryption"] = &self.Encryption
    children["bfd"] = &self.Bfd
    children["database-filter"] = &self.DatabaseFilter
    children["distribute-list"] = &self.DistributeList
    children["fast-reroute"] = &self.FastReroute
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["enable"] = self.Enable
    leafs["dead-interval"] = self.DeadInterval
    leafs["flood-reduction"] = self.FloodReduction
    leafs["cost"] = self.Cost
    leafs["transmit-delay"] = self.TransmitDelay
    leafs["instance"] = self.Instance
    leafs["ldp-sync"] = self.LdpSync
    leafs["mtu-ignore"] = self.MtuIgnore
    leafs["retransmit-interval"] = self.RetransmitInterval
    leafs["hello-interval"] = self.HelloInterval
    leafs["passive"] = self.Passive
    leafs["packet-size"] = self.PacketSize
    leafs["prefix-suppression"] = self.PrefixSuppression
    leafs["priority"] = self.Priority
    leafs["network"] = self.Network
    leafs["demand-circuit"] = self.DemandCircuit
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors
// Specify a neighbor router
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor.
    Neighbor []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor
// IPv6 address
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV6 address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NeighborAddress interface{}

    // OSPFv3 priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255.
    Priority interface{}

    // OSPFv3 dead-router polling interval (in seconds). The type is interface{}
    // with range: 0..65535. Units are second.
    PollInterval interface{}

    // OSPFv3 cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535.
    Cost interface{}

    // Filter OSPFv3 LSA during synchronization and flooding for
    // point-to-multipoint neighbor. The type is bool.
    DatabaseFilter interface{}

    // Zone. The type is string.
    Zone interface{}
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "zone" { return "Zone" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    leafs["zone"] = neighbor.Zone
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope
// Area Scope Configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    return nil
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &areaScope.FastReroute
    return children
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks
// Sham Link sub-mode
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ShamLink local and remote endpoints. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink.
    ShamLink []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetFilter() yfilter.YFilter { return shamLinks.YFilter }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) SetFilter(yf yfilter.YFilter) { shamLinks.YFilter = yf }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetGoName(yname string) string {
    if yname == "sham-link" { return "ShamLink" }
    return ""
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetSegmentPath() string {
    return "sham-links"
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link" {
        for _, c := range shamLinks.ShamLink {
            if shamLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink{}
        shamLinks.ShamLink = append(shamLinks.ShamLink, child)
        return &shamLinks.ShamLink[len(shamLinks.ShamLink)-1]
    }
    return nil
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinks.ShamLink {
        children[shamLinks.ShamLink[i].GetSegmentPath()] = &shamLinks.ShamLink[i]
    }
    return children
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetYangName() string { return "sham-links" }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) SetParent(parent types.Entity) { shamLinks.parent = parent }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetParent() types.Entity { return shamLinks.parent }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink
// ShamLink local and remote endpoints
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Remote sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Enable sham link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetFilter() yfilter.YFilter { return shamLink.YFilter }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) SetFilter(yf yfilter.YFilter) { shamLink.YFilter = yf }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetSegmentPath() string {
    return "sham-link" + "[source-address='" + fmt.Sprintf("%v", shamLink.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLink.DestinationAddress) + "']"
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLink.Authentication
    }
    if childYangName == "encryption" {
        return &shamLink.Encryption
    }
    return nil
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLink.Authentication
    children["encryption"] = &shamLink.Encryption
    return children
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLink.SourceAddress
    leafs["destination-address"] = shamLink.DestinationAddress
    leafs["enable"] = shamLink.Enable
    leafs["hello-interval"] = shamLink.HelloInterval
    leafs["dead-interval"] = shamLink.DeadInterval
    leafs["retransmit-interval"] = shamLink.RetransmitInterval
    leafs["transmit-delay"] = shamLink.TransmitDelay
    return leafs
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetBundleName() string { return "cisco_ios_xr" }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetYangName() string { return "sham-link" }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) SetParent(parent types.Entity) { shamLink.parent = parent }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetParent() types.Entity { return shamLink.parent }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetParentYangName() string { return "sham-links" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks
// Virtual link sub-mode
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID of virtual link neighbor. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink.
    VirtualLink []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetFilter() yfilter.YFilter { return virtualLinks.YFilter }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) SetFilter(yf yfilter.YFilter) { virtualLinks.YFilter = yf }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetGoName(yname string) string {
    if yname == "virtual-link" { return "VirtualLink" }
    return ""
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetSegmentPath() string {
    return "virtual-links"
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link" {
        for _, c := range virtualLinks.VirtualLink {
            if virtualLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink{}
        virtualLinks.VirtualLink = append(virtualLinks.VirtualLink, child)
        return &virtualLinks.VirtualLink[len(virtualLinks.VirtualLink)-1]
    }
    return nil
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinks.VirtualLink {
        children[virtualLinks.VirtualLink[i].GetSegmentPath()] = &virtualLinks.VirtualLink[i]
    }
    return children
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetYangName() string { return "virtual-links" }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) SetParent(parent types.Entity) { virtualLinks.parent = parent }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetParent() types.Entity { return virtualLinks.parent }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink
// Router ID of virtual link neighbor
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkAddress interface{}

    // Enabled virtual link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-address" { return "VirtualLinkAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetSegmentPath() string {
    return "virtual-link" + "[virtual-link-address='" + fmt.Sprintf("%v", virtualLink.VirtualLinkAddress) + "']"
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLink.Authentication
    }
    if childYangName == "encryption" {
        return &virtualLink.Encryption
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLink.Authentication
    children["encryption"] = &virtualLink.Encryption
    return children
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-address"] = virtualLink.VirtualLinkAddress
    leafs["enable"] = virtualLink.Enable
    leafs["hello-interval"] = virtualLink.HelloInterval
    leafs["dead-interval"] = virtualLink.DeadInterval
    leafs["retransmit-interval"] = virtualLink.RetransmitInterval
    leafs["transmit-delay"] = virtualLink.TransmitDelay
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetParentYangName() string { return "virtual-links" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Specify area as a stub area.  Allowed only in non-backbone areas. The type
    // is bool.
    Stub interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Enable OSPFv3 area. The type is interface{}.
    Enable interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 0..16777215.
    DefaultCost interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd

    // Range configuration.
    Ranges Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption

    // Specify area as a NSSA area.  Allowed only in non-backbone areas.
    Nssa Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList

    // OSPFv3 interfaces.
    Interfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces

    // Area Scope Configuration.
    AreaScope Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope

    // Sham Link sub-mode.
    ShamLinks Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks

    // Virtual link sub-mode.
    VirtualLinks Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetFilter() yfilter.YFilter { return areaAreaId.YFilter }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) SetFilter(yf yfilter.YFilter) { areaAreaId.YFilter = yf }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "stub" { return "Stub" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "priority" { return "Priority" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "enable" { return "Enable" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "passive" { return "Passive" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "network" { return "Network" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "cost" { return "Cost" }
    if yname == "authentication" { return "Authentication" }
    if yname == "bfd" { return "Bfd" }
    if yname == "ranges" { return "Ranges" }
    if yname == "encryption" { return "Encryption" }
    if yname == "nssa" { return "Nssa" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "sham-links" { return "ShamLinks" }
    if yname == "virtual-links" { return "VirtualLinks" }
    return ""
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetSegmentPath() string {
    return "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &areaAreaId.Authentication
    }
    if childYangName == "bfd" {
        return &areaAreaId.Bfd
    }
    if childYangName == "ranges" {
        return &areaAreaId.Ranges
    }
    if childYangName == "encryption" {
        return &areaAreaId.Encryption
    }
    if childYangName == "nssa" {
        return &areaAreaId.Nssa
    }
    if childYangName == "database-filter" {
        return &areaAreaId.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &areaAreaId.DistributeList
    }
    if childYangName == "interfaces" {
        return &areaAreaId.Interfaces
    }
    if childYangName == "area-scope" {
        return &areaAreaId.AreaScope
    }
    if childYangName == "sham-links" {
        return &areaAreaId.ShamLinks
    }
    if childYangName == "virtual-links" {
        return &areaAreaId.VirtualLinks
    }
    return nil
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &areaAreaId.Authentication
    children["bfd"] = &areaAreaId.Bfd
    children["ranges"] = &areaAreaId.Ranges
    children["encryption"] = &areaAreaId.Encryption
    children["nssa"] = &areaAreaId.Nssa
    children["database-filter"] = &areaAreaId.DatabaseFilter
    children["distribute-list"] = &areaAreaId.DistributeList
    children["interfaces"] = &areaAreaId.Interfaces
    children["area-scope"] = &areaAreaId.AreaScope
    children["sham-links"] = &areaAreaId.ShamLinks
    children["virtual-links"] = &areaAreaId.VirtualLinks
    return children
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaAreaId.AreaId
    leafs["stub"] = areaAreaId.Stub
    leafs["packet-size"] = areaAreaId.PacketSize
    leafs["instance"] = areaAreaId.Instance
    leafs["demand-circuit"] = areaAreaId.DemandCircuit
    leafs["priority"] = areaAreaId.Priority
    leafs["prefix-suppression"] = areaAreaId.PrefixSuppression
    leafs["enable"] = areaAreaId.Enable
    leafs["mtu-ignore"] = areaAreaId.MtuIgnore
    leafs["passive"] = areaAreaId.Passive
    leafs["hello-interval"] = areaAreaId.HelloInterval
    leafs["dead-interval"] = areaAreaId.DeadInterval
    leafs["default-cost"] = areaAreaId.DefaultCost
    leafs["flood-reduction"] = areaAreaId.FloodReduction
    leafs["retransmit-interval"] = areaAreaId.RetransmitInterval
    leafs["ldp-sync"] = areaAreaId.LdpSync
    leafs["network"] = areaAreaId.Network
    leafs["transmit-delay"] = areaAreaId.TransmitDelay
    leafs["cost"] = areaAreaId.Cost
    return leafs
}

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetBundleName() string { return "cisco_ios_xr" }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetYangName() string { return "area-area-id" }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) SetParent(parent types.Entity) { areaAreaId.parent = parent }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetParent() types.Entity { return areaAreaId.parent }

func (areaAreaId *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId) GetParentYangName() string { return "area-addresses" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Authentication) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Bfd) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges
// Range configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summarize inter-area routes matching prefix/length. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range.
    Range []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetYangName() string { return "ranges" }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range
// Summarize inter-area routes matching
// prefix/length
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix format. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Do not advertise address range. The type is bool. The default value is
    // false.
    NotAdvertise interface{}

    // Specified metric for this range. The type is interface{} with range:
    // 1..16777214.
    Cost interface{}
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "cost" { return "Cost" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetSegmentPath() string {
    return "range" + "[prefix='" + fmt.Sprintf("%v", self.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", self.PrefixLength) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = self.Prefix
    leafs["prefix-length"] = self.PrefixLength
    leafs["not-advertise"] = self.NotAdvertise
    leafs["cost"] = self.Cost
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetYangName() string { return "range" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Ranges_Range) GetParentYangName() string { return "ranges" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Encryption) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area.  Allowed only in
// non-backbone areas
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Only valid with DefaultInfoOriginate. The type is interface{} with range:
    // 0..16777214.
    Metric interface{}

    // Only valid with DefaultInfoOriginate. The type is Ospfv3Metric.
    MetricType interface{}

    // Do not send summary LSA into NSSA. The type is interface{}.
    NoSummary interface{}
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "no-summary" { return "NoSummary" }
    return ""
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["metric"] = nssa.Metric
    leafs["metric-type"] = nssa.MetricType
    leafs["no-summary"] = nssa.NoSummary
    return leafs
}

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Nssa) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces
// OSPFv3 interfaces
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface.
    Interface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface
// OSPFv3 interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface to configure. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable OSPFv3 interface. The type is interface{}.
    Enable interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication

    // Specify a neighbor router.
    Neighbors Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "enable" { return "Enable" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "cost" { return "Cost" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "instance" { return "Instance" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "priority" { return "Priority" }
    if yname == "network" { return "Network" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "encryption" { return "Encryption" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &self.Authentication
    }
    if childYangName == "neighbors" {
        return &self.Neighbors
    }
    if childYangName == "encryption" {
        return &self.Encryption
    }
    if childYangName == "bfd" {
        return &self.Bfd
    }
    if childYangName == "database-filter" {
        return &self.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &self.DistributeList
    }
    if childYangName == "fast-reroute" {
        return &self.FastReroute
    }
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &self.Authentication
    children["neighbors"] = &self.Neighbors
    children["encryption"] = &self.Encryption
    children["bfd"] = &self.Bfd
    children["database-filter"] = &self.DatabaseFilter
    children["distribute-list"] = &self.DistributeList
    children["fast-reroute"] = &self.FastReroute
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["enable"] = self.Enable
    leafs["dead-interval"] = self.DeadInterval
    leafs["flood-reduction"] = self.FloodReduction
    leafs["cost"] = self.Cost
    leafs["transmit-delay"] = self.TransmitDelay
    leafs["instance"] = self.Instance
    leafs["ldp-sync"] = self.LdpSync
    leafs["mtu-ignore"] = self.MtuIgnore
    leafs["retransmit-interval"] = self.RetransmitInterval
    leafs["hello-interval"] = self.HelloInterval
    leafs["passive"] = self.Passive
    leafs["packet-size"] = self.PacketSize
    leafs["prefix-suppression"] = self.PrefixSuppression
    leafs["priority"] = self.Priority
    leafs["network"] = self.Network
    leafs["demand-circuit"] = self.DemandCircuit
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors
// Specify a neighbor router
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor.
    Neighbor []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor
// IPv6 address
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV6 address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NeighborAddress interface{}

    // OSPFv3 priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255.
    Priority interface{}

    // OSPFv3 dead-router polling interval (in seconds). The type is interface{}
    // with range: 0..65535. Units are second.
    PollInterval interface{}

    // OSPFv3 cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535.
    Cost interface{}

    // Filter OSPFv3 LSA during synchronization and flooding for
    // point-to-multipoint neighbor. The type is bool.
    DatabaseFilter interface{}

    // Zone. The type is string.
    Zone interface{}
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "zone" { return "Zone" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    leafs["zone"] = neighbor.Zone
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope
// Area Scope Configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    return nil
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &areaScope.FastReroute
    return children
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks
// Sham Link sub-mode
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ShamLink local and remote endpoints. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink.
    ShamLink []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetFilter() yfilter.YFilter { return shamLinks.YFilter }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) SetFilter(yf yfilter.YFilter) { shamLinks.YFilter = yf }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetGoName(yname string) string {
    if yname == "sham-link" { return "ShamLink" }
    return ""
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetSegmentPath() string {
    return "sham-links"
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link" {
        for _, c := range shamLinks.ShamLink {
            if shamLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink{}
        shamLinks.ShamLink = append(shamLinks.ShamLink, child)
        return &shamLinks.ShamLink[len(shamLinks.ShamLink)-1]
    }
    return nil
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinks.ShamLink {
        children[shamLinks.ShamLink[i].GetSegmentPath()] = &shamLinks.ShamLink[i]
    }
    return children
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetYangName() string { return "sham-links" }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) SetParent(parent types.Entity) { shamLinks.parent = parent }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetParent() types.Entity { return shamLinks.parent }

func (shamLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink
// ShamLink local and remote endpoints
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Remote sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Enable sham link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetFilter() yfilter.YFilter { return shamLink.YFilter }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) SetFilter(yf yfilter.YFilter) { shamLink.YFilter = yf }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetSegmentPath() string {
    return "sham-link" + "[source-address='" + fmt.Sprintf("%v", shamLink.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLink.DestinationAddress) + "']"
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLink.Authentication
    }
    if childYangName == "encryption" {
        return &shamLink.Encryption
    }
    return nil
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLink.Authentication
    children["encryption"] = &shamLink.Encryption
    return children
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLink.SourceAddress
    leafs["destination-address"] = shamLink.DestinationAddress
    leafs["enable"] = shamLink.Enable
    leafs["hello-interval"] = shamLink.HelloInterval
    leafs["dead-interval"] = shamLink.DeadInterval
    leafs["retransmit-interval"] = shamLink.RetransmitInterval
    leafs["transmit-delay"] = shamLink.TransmitDelay
    return leafs
}

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetBundleName() string { return "cisco_ios_xr" }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetYangName() string { return "sham-link" }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) SetParent(parent types.Entity) { shamLink.parent = parent }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetParent() types.Entity { return shamLink.parent }

func (shamLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetParentYangName() string { return "sham-links" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks
// Virtual link sub-mode
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID of virtual link neighbor. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink.
    VirtualLink []Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetFilter() yfilter.YFilter { return virtualLinks.YFilter }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) SetFilter(yf yfilter.YFilter) { virtualLinks.YFilter = yf }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetGoName(yname string) string {
    if yname == "virtual-link" { return "VirtualLink" }
    return ""
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetSegmentPath() string {
    return "virtual-links"
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link" {
        for _, c := range virtualLinks.VirtualLink {
            if virtualLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink{}
        virtualLinks.VirtualLink = append(virtualLinks.VirtualLink, child)
        return &virtualLinks.VirtualLink[len(virtualLinks.VirtualLink)-1]
    }
    return nil
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinks.VirtualLink {
        children[virtualLinks.VirtualLink[i].GetSegmentPath()] = &virtualLinks.VirtualLink[i]
    }
    return children
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetYangName() string { return "virtual-links" }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) SetParent(parent types.Entity) { virtualLinks.parent = parent }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetParent() types.Entity { return virtualLinks.parent }

func (virtualLinks *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink
// Router ID of virtual link neighbor
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkAddress interface{}

    // Enabled virtual link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-address" { return "VirtualLinkAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetSegmentPath() string {
    return "virtual-link" + "[virtual-link-address='" + fmt.Sprintf("%v", virtualLink.VirtualLinkAddress) + "']"
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLink.Authentication
    }
    if childYangName == "encryption" {
        return &virtualLink.Encryption
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLink.Authentication
    children["encryption"] = &virtualLink.Encryption
    return children
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-address"] = virtualLink.VirtualLinkAddress
    leafs["enable"] = virtualLink.Enable
    leafs["hello-interval"] = virtualLink.HelloInterval
    leafs["dead-interval"] = virtualLink.DeadInterval
    leafs["retransmit-interval"] = virtualLink.RetransmitInterval
    leafs["transmit-delay"] = virtualLink.TransmitDelay
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetParentYangName() string { return "virtual-links" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_DefaultVrf_Timers
// Adjust routing timers
type Ospfv3_Processes_Process_DefaultVrf_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pacing timers.
    Pacing Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing

    // LSA timers.
    LsaTimers Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers

    // Throttle timers.
    Throttle Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetGoName(yname string) string {
    if yname == "pacing" { return "Pacing" }
    if yname == "lsa-timers" { return "LsaTimers" }
    if yname == "throttle" { return "Throttle" }
    return ""
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pacing" {
        return &timers.Pacing
    }
    if childYangName == "lsa-timers" {
        return &timers.LsaTimers
    }
    if childYangName == "throttle" {
        return &timers.Throttle
    }
    return nil
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pacing"] = &timers.Pacing
    children["lsa-timers"] = &timers.LsaTimers
    children["throttle"] = &timers.Throttle
    return children
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetYangName() string { return "timers" }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Ospfv3_Processes_Process_DefaultVrf_Timers) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing
// Pacing timers
type Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The minimum interval in milliseconds to pace limit flooding on interface.
    // The type is interface{} with range: 5..100. Units are millisecond.
    Flood interface{}

    // The minimum interval in msec between neighbor retransmissions. The type is
    // interface{} with range: 5..100.
    Retransmission interface{}

    // Interval in seconds at which LSAs are grouped and refreshed, checksummed,
    // or aged. The type is interface{} with range: 10..1800. Units are second.
    LsaGroup interface{}
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetFilter() yfilter.YFilter { return pacing.YFilter }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) SetFilter(yf yfilter.YFilter) { pacing.YFilter = yf }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    if yname == "retransmission" { return "Retransmission" }
    if yname == "lsa-group" { return "LsaGroup" }
    return ""
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetSegmentPath() string {
    return "pacing"
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flood"] = pacing.Flood
    leafs["retransmission"] = pacing.Retransmission
    leafs["lsa-group"] = pacing.LsaGroup
    return leafs
}

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetBundleName() string { return "cisco_ios_xr" }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetYangName() string { return "pacing" }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) SetParent(parent types.Entity) { pacing.parent = parent }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetParent() types.Entity { return pacing.parent }

func (pacing *Ospfv3_Processes_Process_DefaultVrf_Timers_Pacing) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers
// LSA timers
type Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The minimum interval in milliseconds between accepting the same LSA. The
    // type is interface{} with range: 0..60000. Units are millisecond.
    Arrival interface{}
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetFilter() yfilter.YFilter { return lsaTimers.YFilter }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) SetFilter(yf yfilter.YFilter) { lsaTimers.YFilter = yf }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetGoName(yname string) string {
    if yname == "arrival" { return "Arrival" }
    return ""
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetSegmentPath() string {
    return "lsa-timers"
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["arrival"] = lsaTimers.Arrival
    return leafs
}

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetYangName() string { return "lsa-timers" }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) SetParent(parent types.Entity) { lsaTimers.parent = parent }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetParent() types.Entity { return lsaTimers.parent }

func (lsaTimers *Ospfv3_Processes_Process_DefaultVrf_Timers_LsaTimers) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle
// Throttle timers
type Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA throttle timers for all types of OSPF LSAs.
    Lsa Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa

    // SPF throttle timers.
    Spf Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetFilter() yfilter.YFilter { return throttle.YFilter }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) SetFilter(yf yfilter.YFilter) { throttle.YFilter = yf }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "spf" { return "Spf" }
    return ""
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetSegmentPath() string {
    return "throttle"
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        return &throttle.Lsa
    }
    if childYangName == "spf" {
        return &throttle.Spf
    }
    return nil
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa"] = &throttle.Lsa
    children["spf"] = &throttle.Spf
    return children
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetBundleName() string { return "cisco_ios_xr" }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetYangName() string { return "throttle" }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) SetParent(parent types.Entity) { throttle.parent = parent }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetParent() types.Entity { return throttle.parent }

func (throttle *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa
// LSA throttle timers for all types of OSPF LSAs
type Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay to generate first occurrence of LSA in milliseconds. The type is
    // interface{} with range: 0..600000. Units are millisecond.
    FirstDelay interface{}

    // Minimum delay between originating the same LSA in milliseconds. The type is
    // interface{} with range: 1..600000. Units are millisecond.
    MinimumDelay interface{}

    // Maximum delay between originating the same LSA in milliseconds. The type is
    // interface{} with range: 1..600000. Units are millisecond.
    MaximumDelay interface{}
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetGoName(yname string) string {
    if yname == "first-delay" { return "FirstDelay" }
    if yname == "minimum-delay" { return "MinimumDelay" }
    if yname == "maximum-delay" { return "MaximumDelay" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["first-delay"] = lsa.FirstDelay
    leafs["minimum-delay"] = lsa.MinimumDelay
    leafs["maximum-delay"] = lsa.MaximumDelay
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Lsa) GetParentYangName() string { return "throttle" }

// Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf
// SPF throttle timers
type Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Initial delay between receiving a change and starting SPF in ms. The type
    // is interface{} with range: 1..600000.
    FirstDelay interface{}

    // Minimum hold time between consecutive SPF calculations in ms. The type is
    // interface{} with range: 1..600000.
    MinimumDelay interface{}

    // Maximum wait time between consecutive SPF calculations in ms. The type is
    // interface{} with range: 1..600000.
    MaximumDelay interface{}
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetFilter() yfilter.YFilter { return spf.YFilter }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) SetFilter(yf yfilter.YFilter) { spf.YFilter = yf }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetGoName(yname string) string {
    if yname == "first-delay" { return "FirstDelay" }
    if yname == "minimum-delay" { return "MinimumDelay" }
    if yname == "maximum-delay" { return "MaximumDelay" }
    return ""
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetSegmentPath() string {
    return "spf"
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["first-delay"] = spf.FirstDelay
    leafs["minimum-delay"] = spf.MinimumDelay
    leafs["maximum-delay"] = spf.MaximumDelay
    return leafs
}

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetBundleName() string { return "cisco_ios_xr" }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetYangName() string { return "spf" }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) SetParent(parent types.Entity) { spf.parent = parent }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetParent() types.Entity { return spf.parent }

func (spf *Ospfv3_Processes_Process_DefaultVrf_Timers_Throttle_Spf) GetParentYangName() string { return "throttle" }

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes
// Summarize redistributed routes matching
// prefix/length
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        for _, c := range summaryPrefixes.SummaryPrefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix{}
        summaryPrefixes.SummaryPrefix = append(summaryPrefixes.SummaryPrefix, child)
        return &summaryPrefixes.SummaryPrefix[len(summaryPrefixes.SummaryPrefix)-1]
    }
    return nil
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryPrefixes.SummaryPrefix {
        children[summaryPrefixes.SummaryPrefix[i].GetSegmentPath()] = &summaryPrefixes.SummaryPrefix[i]
    }
    return children
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
// IPv6 address
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix string format. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Suppress routes matching prefix/length. The type is bool.
    NotAdvertise interface{}

    // Tag. The type is interface{} with range: 1..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix" + "[prefix='" + fmt.Sprintf("%v", summaryPrefix.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", summaryPrefix.PrefixLength) + "']"
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    leafs["not-advertise"] = summaryPrefix.NotAdvertise
    leafs["tag"] = summaryPrefix.Tag
    return leafs
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetParentYangName() string { return "summary-prefixes" }

// Ospfv3_Processes_Process_DefaultVrf_Snmp
// SNMP configuration
type Ospfv3_Processes_Process_DefaultVrf_Snmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SNMP context configuration. The type is string.
    Context interface{}

    // SNMP trap rate configuration.
    TrapRateLimit Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetFilter() yfilter.YFilter { return snmp.YFilter }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) SetFilter(yf yfilter.YFilter) { snmp.YFilter = yf }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetGoName(yname string) string {
    if yname == "context" { return "Context" }
    if yname == "trap-rate-limit" { return "TrapRateLimit" }
    return ""
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetSegmentPath() string {
    return "snmp"
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trap-rate-limit" {
        return &snmp.TrapRateLimit
    }
    return nil
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trap-rate-limit"] = &snmp.TrapRateLimit
    return children
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["context"] = snmp.Context
    return leafs
}

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetBundleName() string { return "cisco_ios_xr" }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetYangName() string { return "snmp" }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) SetParent(parent types.Entity) { snmp.parent = parent }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetParent() types.Entity { return snmp.parent }

func (snmp *Ospfv3_Processes_Process_DefaultVrf_Snmp) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit
// SNMP trap rate configuration
type Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Trap rate limit sliding window size. The type is interface{} with range:
    // 2..60.
    WindowSize interface{}

    // Max number of traps sent in window time. The type is interface{} with
    // range: 0..300.
    MaxWindowTraps interface{}
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetFilter() yfilter.YFilter { return trapRateLimit.YFilter }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) SetFilter(yf yfilter.YFilter) { trapRateLimit.YFilter = yf }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetGoName(yname string) string {
    if yname == "window-size" { return "WindowSize" }
    if yname == "max-window-traps" { return "MaxWindowTraps" }
    return ""
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetSegmentPath() string {
    return "trap-rate-limit"
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window-size"] = trapRateLimit.WindowSize
    leafs["max-window-traps"] = trapRateLimit.MaxWindowTraps
    return leafs
}

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetBundleName() string { return "cisco_ios_xr" }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetYangName() string { return "trap-rate-limit" }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) SetParent(parent types.Entity) { trapRateLimit.parent = parent }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetParent() types.Entity { return trapRateLimit.parent }

func (trapRateLimit *Ospfv3_Processes_Process_DefaultVrf_Snmp_TrapRateLimit) GetParentYangName() string { return "snmp" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospfv3_Processes_Process_DefaultVrf_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetGoName(yname string) string {
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroute) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // Ospfv3FastReroutePriority.
    Priority interface{}
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = perLink.Priority
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // Ospfv3FastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "load-sharing-disable" { return "LoadSharingDisable" }
    if yname == "priority" { return "Priority" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tiebreakers"] = &perPrefix.Tiebreakers
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["load-sharing-disable"] = perPrefix.LoadSharingDisable
    leafs["priority"] = perPrefix.Priority
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // Ospfv3FastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker. The type is interface{} with range: 1..255.
    // This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospfv3_Processes_Process_DefaultVrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospfv3_Processes_Process_DefaultVrf_Distance
// Define an administrative distance
type Ospfv3_Processes_Process_DefaultVrf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255.
    Administrative interface{}

    // OSPFv3 administrative distance.
    Ospfv3 Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetGoName(yname string) string {
    if yname == "administrative" { return "Administrative" }
    if yname == "ospfv3" { return "Ospfv3" }
    return ""
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospfv3" {
        return &distance.Ospfv3
    }
    return nil
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ospfv3"] = &distance.Ospfv3
    return children
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["administrative"] = distance.Administrative
    return leafs
}

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetYangName() string { return "distance" }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Ospfv3_Processes_Process_DefaultVrf_Distance) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3
// OSPFv3 administrative distance
type Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255.
    External interface{}
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetGoName(yname string) string {
    if yname == "intra-area" { return "IntraArea" }
    if yname == "inter-area" { return "InterArea" }
    if yname == "external" { return "External" }
    return ""
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetSegmentPath() string {
    return "ospfv3"
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["intra-area"] = ospfv3.IntraArea
    leafs["inter-area"] = ospfv3.InterArea
    leafs["external"] = ospfv3.External
    return leafs
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Distance_Ospfv3) GetParentYangName() string { return "distance" }

// Ospfv3_Processes_Process_DefaultVrf_Maximum
// Set OSPFv3 limits
type Ospfv3_Processes_Process_DefaultVrf_Maximum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify maximum number of interfaces. The type is interface{} with range:
    // 1..4294967295.
    Interfaces interface{}

    // Specify maximum number of paths per route. The type is interface{} with
    // range: 1..64.
    Paths interface{}

    // Limit number of redistributed prefixes.
    RedistributedPrefixes Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetFilter() yfilter.YFilter { return maximum.YFilter }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) SetFilter(yf yfilter.YFilter) { maximum.YFilter = yf }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "paths" { return "Paths" }
    if yname == "redistributed-prefixes" { return "RedistributedPrefixes" }
    return ""
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetSegmentPath() string {
    return "maximum"
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistributed-prefixes" {
        return &maximum.RedistributedPrefixes
    }
    return nil
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistributed-prefixes"] = &maximum.RedistributedPrefixes
    return children
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interfaces"] = maximum.Interfaces
    leafs["paths"] = maximum.Paths
    return leafs
}

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetBundleName() string { return "cisco_ios_xr" }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetYangName() string { return "maximum" }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) SetParent(parent types.Entity) { maximum.parent = parent }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetParent() types.Entity { return maximum.parent }

func (maximum *Ospfv3_Processes_Process_DefaultVrf_Maximum) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes
// Limit number of redistributed prefixes
type Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed to protocol. The type is
    // interface{} with range: 1..4294967295.
    Prefixes interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning message when limit is exceeded. The type is interface{}.
    WarningOnly interface{}
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetFilter() yfilter.YFilter { return redistributedPrefixes.YFilter }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) SetFilter(yf yfilter.YFilter) { redistributedPrefixes.YFilter = yf }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetGoName(yname string) string {
    if yname == "prefixes" { return "Prefixes" }
    if yname == "threshold" { return "Threshold" }
    if yname == "warning-only" { return "WarningOnly" }
    return ""
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetSegmentPath() string {
    return "redistributed-prefixes"
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefixes"] = redistributedPrefixes.Prefixes
    leafs["threshold"] = redistributedPrefixes.Threshold
    leafs["warning-only"] = redistributedPrefixes.WarningOnly
    return leafs
}

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetYangName() string { return "redistributed-prefixes" }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) SetParent(parent types.Entity) { redistributedPrefixes.parent = parent }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetParent() types.Entity { return redistributedPrefixes.parent }

func (redistributedPrefixes *Ospfv3_Processes_Process_DefaultVrf_Maximum_RedistributedPrefixes) GetParentYangName() string { return "maximum" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes
// Redistribute information from another routing
// protocol
type Ospfv3_Processes_Process_DefaultVrf_Redistributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute.
    Redistribute []Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetFilter() yfilter.YFilter { return redistributes.YFilter }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) SetFilter(yf yfilter.YFilter) { redistributes.YFilter = yf }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetGoName(yname string) string {
    if yname == "redistribute" { return "Redistribute" }
    return ""
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetSegmentPath() string {
    return "redistributes"
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribute" {
        for _, c := range redistributes.Redistribute {
            if redistributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute{}
        redistributes.Redistribute = append(redistributes.Redistribute, child)
        return &redistributes.Redistribute[len(redistributes.Redistribute)-1]
    }
    return nil
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributes.Redistribute {
        children[redistributes.Redistribute[i].GetSegmentPath()] = &redistributes.Redistribute[i]
    }
    return children
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetYangName() string { return "redistributes" }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) SetParent(parent types.Entity) { redistributes.parent = parent }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetParent() types.Entity { return redistributes.parent }

func (redistributes *Ospfv3_Processes_Process_DefaultVrf_Redistributes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol. The type is Ospfv3ProtocolType2.
    ProtocolName interface{}

    // connected or static or subscriber or mobile.
    ConnectedOrStaticOrSubscriberOrMobile Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile

    // bgp. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp.
    Bgp []Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp

    // ospfv3 or isis or application. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication.
    Ospfv3OrIsisOrApplication []Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication

    // eigrp. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetFilter() yfilter.YFilter { return redistribute.YFilter }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) SetFilter(yf yfilter.YFilter) { redistribute.YFilter = yf }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "connected-or-static-or-subscriber-or-mobile" { return "ConnectedOrStaticOrSubscriberOrMobile" }
    if yname == "bgp" { return "Bgp" }
    if yname == "ospfv3-or-isis-or-application" { return "Ospfv3OrIsisOrApplication" }
    if yname == "eigrp" { return "Eigrp" }
    return ""
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetSegmentPath() string {
    return "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-or-static-or-subscriber-or-mobile" {
        return &redistribute.ConnectedOrStaticOrSubscriberOrMobile
    }
    if childYangName == "bgp" {
        for _, c := range redistribute.Bgp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp{}
        redistribute.Bgp = append(redistribute.Bgp, child)
        return &redistribute.Bgp[len(redistribute.Bgp)-1]
    }
    if childYangName == "ospfv3-or-isis-or-application" {
        for _, c := range redistribute.Ospfv3OrIsisOrApplication {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication{}
        redistribute.Ospfv3OrIsisOrApplication = append(redistribute.Ospfv3OrIsisOrApplication, child)
        return &redistribute.Ospfv3OrIsisOrApplication[len(redistribute.Ospfv3OrIsisOrApplication)-1]
    }
    if childYangName == "eigrp" {
        for _, c := range redistribute.Eigrp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp{}
        redistribute.Eigrp = append(redistribute.Eigrp, child)
        return &redistribute.Eigrp[len(redistribute.Eigrp)-1]
    }
    return nil
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-or-static-or-subscriber-or-mobile"] = &redistribute.ConnectedOrStaticOrSubscriberOrMobile
    for i := range redistribute.Bgp {
        children[redistribute.Bgp[i].GetSegmentPath()] = &redistribute.Bgp[i]
    }
    for i := range redistribute.Ospfv3OrIsisOrApplication {
        children[redistribute.Ospfv3OrIsisOrApplication[i].GetSegmentPath()] = &redistribute.Ospfv3OrIsisOrApplication[i]
    }
    for i := range redistribute.Eigrp {
        children[redistribute.Eigrp[i].GetSegmentPath()] = &redistribute.Eigrp[i]
    }
    return children
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribute.ProtocolName
    return leafs
}

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetYangName() string { return "redistribute" }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) SetParent(parent types.Entity) { redistribute.parent = parent }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetParent() types.Entity { return redistribute.parent }

func (redistribute *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute) GetParentYangName() string { return "redistributes" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile
// connected or static or subscriber or mobile
// This type is a presence type.
type Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetFilter() yfilter.YFilter { return connectedOrStaticOrSubscriberOrMobile.YFilter }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) SetFilter(yf yfilter.YFilter) { connectedOrStaticOrSubscriberOrMobile.YFilter = yf }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetGoName(yname string) string {
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetSegmentPath() string {
    return "connected-or-static-or-subscriber-or-mobile"
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["internal-route-type"] = connectedOrStaticOrSubscriberOrMobile.InternalRouteType
    leafs["default-metric"] = connectedOrStaticOrSubscriberOrMobile.DefaultMetric
    leafs["metric-type"] = connectedOrStaticOrSubscriberOrMobile.MetricType
    leafs["tag"] = connectedOrStaticOrSubscriberOrMobile.Tag
    leafs["route-policy-name"] = connectedOrStaticOrSubscriberOrMobile.RoutePolicyName
    leafs["external-route-type"] = connectedOrStaticOrSubscriberOrMobile.ExternalRouteType
    leafs["nssa-external-route-type"] = connectedOrStaticOrSubscriberOrMobile.NssaExternalRouteType
    leafs["redistribute-route"] = connectedOrStaticOrSubscriberOrMobile.RedistributeRoute
    leafs["isis-route-type"] = connectedOrStaticOrSubscriberOrMobile.IsisRouteType
    leafs["eigrp-route-type"] = connectedOrStaticOrSubscriberOrMobile.EigrpRouteType
    leafs["preserve-med"] = connectedOrStaticOrSubscriberOrMobile.PreserveMed
    leafs["preserve-med-info"] = connectedOrStaticOrSubscriberOrMobile.PreserveMedInfo
    return leafs
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetBundleName() string { return "cisco_ios_xr" }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetYangName() string { return "connected-or-static-or-subscriber-or-mobile" }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) SetParent(parent types.Entity) { connectedOrStaticOrSubscriberOrMobile.parent = parent }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetParent() types.Entity { return connectedOrStaticOrSubscriberOrMobile.parent }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp
// bgp
type Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 0..65535.
    AsXx interface{}

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - second
    // half (Y), or 2-byte AS number, or 4-byte AS number in asplain format. The
    // type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetSegmentPath() string {
    return "bgp" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = bgp.AsXx
    leafs["as-yy"] = bgp.AsYy
    leafs["internal-route-type"] = bgp.InternalRouteType
    leafs["default-metric"] = bgp.DefaultMetric
    leafs["metric-type"] = bgp.MetricType
    leafs["tag"] = bgp.Tag
    leafs["route-policy-name"] = bgp.RoutePolicyName
    leafs["external-route-type"] = bgp.ExternalRouteType
    leafs["nssa-external-route-type"] = bgp.NssaExternalRouteType
    leafs["redistribute-route"] = bgp.RedistributeRoute
    leafs["isis-route-type"] = bgp.IsisRouteType
    leafs["eigrp-route-type"] = bgp.EigrpRouteType
    leafs["preserve-med"] = bgp.PreserveMed
    leafs["preserve-med-info"] = bgp.PreserveMedInfo
    return leafs
}

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetYangName() string { return "bgp" }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Bgp) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication
// ospfv3 or isis or application
type Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ISIS process name if protocol is ISIS, or OSPFv3
    // process name if protocol is OSPFv3. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetFilter() yfilter.YFilter { return ospfv3OrIsisOrApplication.YFilter }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) SetFilter(yf yfilter.YFilter) { ospfv3OrIsisOrApplication.YFilter = yf }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetGoName(yname string) string {
    if yname == "process-name" { return "ProcessName" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetSegmentPath() string {
    return "ospfv3-or-isis-or-application" + "[process-name='" + fmt.Sprintf("%v", ospfv3OrIsisOrApplication.ProcessName) + "']"
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["process-name"] = ospfv3OrIsisOrApplication.ProcessName
    leafs["internal-route-type"] = ospfv3OrIsisOrApplication.InternalRouteType
    leafs["default-metric"] = ospfv3OrIsisOrApplication.DefaultMetric
    leafs["metric-type"] = ospfv3OrIsisOrApplication.MetricType
    leafs["tag"] = ospfv3OrIsisOrApplication.Tag
    leafs["route-policy-name"] = ospfv3OrIsisOrApplication.RoutePolicyName
    leafs["external-route-type"] = ospfv3OrIsisOrApplication.ExternalRouteType
    leafs["nssa-external-route-type"] = ospfv3OrIsisOrApplication.NssaExternalRouteType
    leafs["redistribute-route"] = ospfv3OrIsisOrApplication.RedistributeRoute
    leafs["isis-route-type"] = ospfv3OrIsisOrApplication.IsisRouteType
    leafs["eigrp-route-type"] = ospfv3OrIsisOrApplication.EigrpRouteType
    leafs["preserve-med"] = ospfv3OrIsisOrApplication.PreserveMed
    leafs["preserve-med-info"] = ospfv3OrIsisOrApplication.PreserveMedInfo
    return leafs
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetYangName() string { return "ospfv3-or-isis-or-application" }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) SetParent(parent types.Entity) { ospfv3OrIsisOrApplication.parent = parent }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetParent() types.Entity { return ospfv3OrIsisOrApplication.parent }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp
// eigrp
type Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetSegmentPath() string {
    return "eigrp" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = eigrp.AsXx
    leafs["internal-route-type"] = eigrp.InternalRouteType
    leafs["default-metric"] = eigrp.DefaultMetric
    leafs["metric-type"] = eigrp.MetricType
    leafs["tag"] = eigrp.Tag
    leafs["route-policy-name"] = eigrp.RoutePolicyName
    leafs["external-route-type"] = eigrp.ExternalRouteType
    leafs["nssa-external-route-type"] = eigrp.NssaExternalRouteType
    leafs["redistribute-route"] = eigrp.RedistributeRoute
    leafs["isis-route-type"] = eigrp.IsisRouteType
    leafs["eigrp-route-type"] = eigrp.EigrpRouteType
    leafs["preserve-med"] = eigrp.PreserveMed
    leafs["preserve-med-info"] = eigrp.PreserveMedInfo
    return leafs
}

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *Ospfv3_Processes_Process_DefaultVrf_Redistributes_Redistribute_Eigrp) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_DefaultVrf_Ignore
// Do not complain about a specified event
type Ospfv3_Processes_Process_DefaultVrf_Ignore struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Do not complain upon receiving LSA of the specified type.
    Lsa Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetFilter() yfilter.YFilter { return ignore.YFilter }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) SetFilter(yf yfilter.YFilter) { ignore.YFilter = yf }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetSegmentPath() string {
    return "ignore"
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        return &ignore.Lsa
    }
    return nil
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa"] = &ignore.Lsa
    return children
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetBundleName() string { return "cisco_ios_xr" }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetYangName() string { return "ignore" }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) SetParent(parent types.Entity) { ignore.parent = parent }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetParent() types.Entity { return ignore.parent }

func (ignore *Ospfv3_Processes_Process_DefaultVrf_Ignore) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa
// Do not complain upon receiving LSA of the
// specified type
type Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable ignore of MOSPF type 6 LSA. The type is interface{}.
    Mospf interface{}
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetGoName(yname string) string {
    if yname == "mospf" { return "Mospf" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mospf"] = lsa.Mospf
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Ignore_Lsa) GetParentYangName() string { return "ignore" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeListOut
// Filter prefixes from RIB 
type Ospfv3_Processes_Process_DefaultVrf_DistributeListOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter generated type-5 LSAs.
    DistributeOuts Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetFilter() yfilter.YFilter { return distributeListOut.YFilter }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) SetFilter(yf yfilter.YFilter) { distributeListOut.YFilter = yf }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetGoName(yname string) string {
    if yname == "distribute-outs" { return "DistributeOuts" }
    return ""
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetSegmentPath() string {
    return "distribute-list-out"
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-outs" {
        return &distributeListOut.DistributeOuts
    }
    return nil
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-outs"] = &distributeListOut.DistributeOuts
    return children
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetBundleName() string { return "cisco_ios_xr" }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetYangName() string { return "distribute-list-out" }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) SetParent(parent types.Entity) { distributeListOut.parent = parent }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetParent() types.Entity { return distributeListOut.parent }

func (distributeListOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts
// Filter generated type-5 LSAs
type Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter generated type-5 LSAs. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut.
    DistributeOut []Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetFilter() yfilter.YFilter { return distributeOuts.YFilter }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) SetFilter(yf yfilter.YFilter) { distributeOuts.YFilter = yf }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetGoName(yname string) string {
    if yname == "distribute-out" { return "DistributeOut" }
    return ""
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetSegmentPath() string {
    return "distribute-outs"
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-out" {
        for _, c := range distributeOuts.DistributeOut {
            if distributeOuts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut{}
        distributeOuts.DistributeOut = append(distributeOuts.DistributeOut, child)
        return &distributeOuts.DistributeOut[len(distributeOuts.DistributeOut)-1]
    }
    return nil
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range distributeOuts.DistributeOut {
        children[distributeOuts.DistributeOut[i].GetSegmentPath()] = &distributeOuts.DistributeOut[i]
    }
    return children
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetBundleName() string { return "cisco_ios_xr" }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetYangName() string { return "distribute-outs" }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) SetParent(parent types.Entity) { distributeOuts.parent = parent }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetParent() types.Entity { return distributeOuts.parent }

func (distributeOuts *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts) GetParentYangName() string { return "distribute-list-out" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut
// Filter generated type-5 LSAs
type Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. none. The type is Ospfv3Protocol.
    ProtocolName interface{}

    // keys: as-yy, as-xx, process-name. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName.
    AsYyAndAsXxAndProcessName []Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetFilter() yfilter.YFilter { return distributeOut.YFilter }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) SetFilter(yf yfilter.YFilter) { distributeOut.YFilter = yf }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "as-yy-and-as-xx-and-process-name" { return "AsYyAndAsXxAndProcessName" }
    return ""
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetSegmentPath() string {
    return "distribute-out" + "[protocol-name='" + fmt.Sprintf("%v", distributeOut.ProtocolName) + "']"
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as-yy-and-as-xx-and-process-name" {
        for _, c := range distributeOut.AsYyAndAsXxAndProcessName {
            if distributeOut.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName{}
        distributeOut.AsYyAndAsXxAndProcessName = append(distributeOut.AsYyAndAsXxAndProcessName, child)
        return &distributeOut.AsYyAndAsXxAndProcessName[len(distributeOut.AsYyAndAsXxAndProcessName)-1]
    }
    return nil
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range distributeOut.AsYyAndAsXxAndProcessName {
        children[distributeOut.AsYyAndAsXxAndProcessName[i].GetSegmentPath()] = &distributeOut.AsYyAndAsXxAndProcessName[i]
    }
    return children
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = distributeOut.ProtocolName
    return leafs
}

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetBundleName() string { return "cisco_ios_xr" }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetYangName() string { return "distribute-out" }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) SetParent(parent types.Entity) { distributeOut.parent = parent }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetParent() types.Entity { return distributeOut.parent }

func (distributeOut *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut) GetParentYangName() string { return "distribute-outs" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName
// keys: as-yy, as-xx, process-name
type Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - second
    // half (Y), or 2-byte AS number, or 4-byte AS number in asplain format. The
    // type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 1..65535.
    AsXx interface{}

    // This attribute is a key. If ISIS or OSPFv3, specify the instance name. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Prefix-list name. The type is string. This attribute is mandatory.
    PrefixList interface{}
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetFilter() yfilter.YFilter { return asYyAndAsXxAndProcessName.YFilter }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) SetFilter(yf yfilter.YFilter) { asYyAndAsXxAndProcessName.YFilter = yf }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetGoName(yname string) string {
    if yname == "as-yy" { return "AsYy" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetSegmentPath() string {
    return "as-yy-and-as-xx-and-process-name" + "[as-yy='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.AsYy) + "']" + "[as-xx='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.AsXx) + "']" + "[process-name='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.ProcessName) + "']"
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-yy"] = asYyAndAsXxAndProcessName.AsYy
    leafs["as-xx"] = asYyAndAsXxAndProcessName.AsXx
    leafs["process-name"] = asYyAndAsXxAndProcessName.ProcessName
    leafs["prefix-list"] = asYyAndAsXxAndProcessName.PrefixList
    return leafs
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetBundleName() string { return "cisco_ios_xr" }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetYangName() string { return "as-yy-and-as-xx-and-process-name" }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) SetParent(parent types.Entity) { asYyAndAsXxAndProcessName.parent = parent }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetParent() types.Entity { return asYyAndAsXxAndProcessName.parent }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_DefaultVrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetParentYangName() string { return "distribute-out" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_DefaultVrf_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_DefaultVrf_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_DefaultVrf_DistributeList) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_DefaultVrf_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_DefaultVrf_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter
// Stub router configuration
type Ospfv3_Processes_Process_DefaultVrf_StubRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub router R-bit configuration.
    Rbit Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit

    // Stub router V6-bit configuration.
    V6Bit Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit

    // Stub router max-metric configuration.
    MaxMetric Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetFilter() yfilter.YFilter { return stubRouter.YFilter }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) SetFilter(yf yfilter.YFilter) { stubRouter.YFilter = yf }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetGoName(yname string) string {
    if yname == "rbit" { return "Rbit" }
    if yname == "v6bit" { return "V6Bit" }
    if yname == "max-metric" { return "MaxMetric" }
    return ""
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetSegmentPath() string {
    return "stub-router"
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rbit" {
        return &stubRouter.Rbit
    }
    if childYangName == "v6bit" {
        return &stubRouter.V6Bit
    }
    if childYangName == "max-metric" {
        return &stubRouter.MaxMetric
    }
    return nil
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rbit"] = &stubRouter.Rbit
    children["v6bit"] = &stubRouter.V6Bit
    children["max-metric"] = &stubRouter.MaxMetric
    return children
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetBundleName() string { return "cisco_ios_xr" }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetYangName() string { return "stub-router" }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) SetParent(parent types.Entity) { stubRouter.parent = parent }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetParent() types.Entity { return stubRouter.parent }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_StubRouter) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit
// Stub router R-bit configuration
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetFilter() yfilter.YFilter { return rbit.YFilter }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) SetFilter(yf yfilter.YFilter) { rbit.YFilter = yf }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetSegmentPath() string {
    return "rbit"
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &rbit.OnStartup
    }
    return nil
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &rbit.OnStartup
    return children
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = rbit.OnSwitchover
    leafs["always"] = rbit.Always
    leafs["external-lsa"] = rbit.ExternalLsa
    leafs["include-stub"] = rbit.IncludeStub
    leafs["enable"] = rbit.Enable
    leafs["on-proc-migration"] = rbit.OnProcMigration
    leafs["on-proc-restart"] = rbit.OnProcRestart
    leafs["summary-lsa"] = rbit.SummaryLsa
    return leafs
}

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetBundleName() string { return "cisco_ios_xr" }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetYangName() string { return "rbit" }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) SetParent(parent types.Entity) { rbit.parent = parent }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetParent() types.Entity { return rbit.parent }

func (rbit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_Rbit_OnStartup) GetParentYangName() string { return "rbit" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit
// Stub router V6-bit configuration
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetFilter() yfilter.YFilter { return v6Bit.YFilter }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) SetFilter(yf yfilter.YFilter) { v6Bit.YFilter = yf }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetSegmentPath() string {
    return "v6bit"
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &v6Bit.OnStartup
    }
    return nil
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &v6Bit.OnStartup
    return children
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = v6Bit.OnSwitchover
    leafs["always"] = v6Bit.Always
    leafs["external-lsa"] = v6Bit.ExternalLsa
    leafs["include-stub"] = v6Bit.IncludeStub
    leafs["enable"] = v6Bit.Enable
    leafs["on-proc-migration"] = v6Bit.OnProcMigration
    leafs["on-proc-restart"] = v6Bit.OnProcRestart
    leafs["summary-lsa"] = v6Bit.SummaryLsa
    return leafs
}

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetBundleName() string { return "cisco_ios_xr" }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetYangName() string { return "v6bit" }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) SetParent(parent types.Entity) { v6Bit.parent = parent }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetParent() types.Entity { return v6Bit.parent }

func (v6Bit *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_V6Bit_OnStartup) GetParentYangName() string { return "v6bit" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric
// Stub router max-metric configuration
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetFilter() yfilter.YFilter { return maxMetric.YFilter }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) SetFilter(yf yfilter.YFilter) { maxMetric.YFilter = yf }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetSegmentPath() string {
    return "max-metric"
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &maxMetric.OnStartup
    }
    return nil
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &maxMetric.OnStartup
    return children
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = maxMetric.OnSwitchover
    leafs["always"] = maxMetric.Always
    leafs["external-lsa"] = maxMetric.ExternalLsa
    leafs["include-stub"] = maxMetric.IncludeStub
    leafs["enable"] = maxMetric.Enable
    leafs["on-proc-migration"] = maxMetric.OnProcMigration
    leafs["on-proc-restart"] = maxMetric.OnProcRestart
    leafs["summary-lsa"] = maxMetric.SummaryLsa
    return leafs
}

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetYangName() string { return "max-metric" }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) SetParent(parent types.Entity) { maxMetric.parent = parent }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetParent() types.Entity { return maxMetric.parent }

func (maxMetric *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_DefaultVrf_StubRouter_MaxMetric_OnStartup) GetParentYangName() string { return "max-metric" }

// Ospfv3_Processes_Process_DefaultVrf_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_DefaultVrf_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_DefaultVrf_Bfd) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable out. The type is interface{}.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_DefaultVrf_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_DefaultVrf_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_DefaultVrf_Authentication) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_GracefulRestart
// Graceful restart configuration
type Ospfv3_Processes_Process_DefaultVrf_GracefulRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum interval between graceful restarts (seconds). The type is
    // interface{} with range: 90..3600. Units are second.
    Interval interface{}

    // Terminate graceful restart helper mode if LSA changed. The type is
    // interface{}.
    StrictLsaChecking interface{}

    // Disable router's helper support. The type is interface{}.
    Helper interface{}

    // Enable graceful restart. The type is interface{}.
    Enable interface{}

    // Maximum route lifetime following restart (seconds). The type is interface{}
    // with range: 90..1800. Units are second.
    Lifetime interface{}
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetFilter() yfilter.YFilter { return gracefulRestart.YFilter }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) SetFilter(yf yfilter.YFilter) { gracefulRestart.YFilter = yf }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "strict-lsa-checking" { return "StrictLsaChecking" }
    if yname == "helper" { return "Helper" }
    if yname == "enable" { return "Enable" }
    if yname == "lifetime" { return "Lifetime" }
    return ""
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetSegmentPath() string {
    return "graceful-restart"
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = gracefulRestart.Interval
    leafs["strict-lsa-checking"] = gracefulRestart.StrictLsaChecking
    leafs["helper"] = gracefulRestart.Helper
    leafs["enable"] = gracefulRestart.Enable
    leafs["lifetime"] = gracefulRestart.Lifetime
    return leafs
}

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetYangName() string { return "graceful-restart" }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) SetParent(parent types.Entity) { gracefulRestart.parent = parent }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetParent() types.Entity { return gracefulRestart.parent }

func (gracefulRestart *Ospfv3_Processes_Process_DefaultVrf_GracefulRestart) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DefaultInformation
// Control distribution of default information
type Ospfv3_Processes_Process_DefaultVrf_DefaultInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distribute a default route.
    Originate Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetFilter() yfilter.YFilter { return defaultInformation.YFilter }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) SetFilter(yf yfilter.YFilter) { defaultInformation.YFilter = yf }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetGoName(yname string) string {
    if yname == "originate" { return "Originate" }
    return ""
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetSegmentPath() string {
    return "default-information"
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "originate" {
        return &defaultInformation.Originate
    }
    return nil
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["originate"] = &defaultInformation.Originate
    return children
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetBundleName() string { return "cisco_ios_xr" }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetYangName() string { return "default-information" }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) SetParent(parent types.Entity) { defaultInformation.parent = parent }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetParent() types.Entity { return defaultInformation.parent }

func (defaultInformation *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate
// Distribute a default route
// This type is a presence type.
type Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. This attribute is
    // mandatory.
    Always interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    Metric interface{}

    // OSPFv3 metric type for default routes. The type is interface{} with range:
    // 1..2.
    MetricType interface{}

    // Tag for default route. The type is interface{} with range: 0..4294967295.
    Tag interface{}

    // Route policy to default-information origination. The type is string.
    RoutePolicyName interface{}
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetFilter() yfilter.YFilter { return originate.YFilter }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) SetFilter(yf yfilter.YFilter) { originate.YFilter = yf }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetGoName(yname string) string {
    if yname == "always" { return "Always" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetSegmentPath() string {
    return "originate"
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["always"] = originate.Always
    leafs["metric"] = originate.Metric
    leafs["metric-type"] = originate.MetricType
    leafs["tag"] = originate.Tag
    leafs["route-policy-name"] = originate.RoutePolicyName
    return leafs
}

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetBundleName() string { return "cisco_ios_xr" }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetYangName() string { return "originate" }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) SetParent(parent types.Entity) { originate.parent = parent }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetParent() types.Entity { return originate.parent }

func (originate *Ospfv3_Processes_Process_DefaultVrf_DefaultInformation_Originate) GetParentYangName() string { return "default-information" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope
// Process scope configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetFilter() yfilter.YFilter { return processScope.YFilter }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) SetFilter(yf yfilter.YFilter) { processScope.YFilter = yf }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetSegmentPath() string {
    return "process-scope"
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &processScope.FastReroute
    }
    return nil
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &processScope.FastReroute
    return children
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetBundleName() string { return "cisco_ios_xr" }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetYangName() string { return "process-scope" }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) SetParent(parent types.Entity) { processScope.parent = parent }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetParent() types.Entity { return processScope.parent }

func (processScope *Ospfv3_Processes_Process_DefaultVrf_ProcessScope) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute) GetParentYangName() string { return "process-scope" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_DefaultVrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_DefaultVrf_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_DefaultVrf_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_DefaultVrf_Encryption) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_AutoCost
// Calculate interface cost according to bandwidth
// This type is a presence type.
type Ospfv3_Processes_Process_DefaultVrf_AutoCost struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify 'true' to assign cost based on interface type. The type is
    // interface{}.
    Disable interface{}

    // Specify reference bandwidth for cost computations in terms of Mbits per
    // second. The type is interface{} with range: 1..4294967. Units are Mbit/s.
    ReferenceBandwidth interface{}
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetFilter() yfilter.YFilter { return autoCost.YFilter }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) SetFilter(yf yfilter.YFilter) { autoCost.YFilter = yf }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "reference-bandwidth" { return "ReferenceBandwidth" }
    return ""
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetSegmentPath() string {
    return "auto-cost"
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = autoCost.Disable
    leafs["reference-bandwidth"] = autoCost.ReferenceBandwidth
    return leafs
}

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetBundleName() string { return "cisco_ios_xr" }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetYangName() string { return "auto-cost" }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) SetParent(parent types.Entity) { autoCost.parent = parent }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetParent() types.Entity { return autoCost.parent }

func (autoCost *Ospfv3_Processes_Process_DefaultVrf_AutoCost) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_Vrfs
// VRF related configuration
type Ospfv3_Processes_Process_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular OSPF VRF. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf.
    Vrf []Ospfv3_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Ospfv3_Processes_Process_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_Vrfs_Vrf
// Configuration for a particular OSPF VRF
type Ospfv3_Processes_Process_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this VRF. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Enable OSPFv3 VRF configuration. The type is interface{}.
    Enable interface{}

    // Enable SNMP trap configuration in a VRF. The type is interface{}.
    SnmpvrfTrap interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Set metric of redistributed routes. The type is interface{} with range:
    // 1..16777214.
    DefaultMetric interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Route policy for SPF prefix prioritization. The type is string.
    SpfPrefixPriorityPolicy interface{}

    // Specify the router ID for this OSPFv3 process in IPv4 address format. The
    // type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Log changes in adjacency state. The type is Ospfv3LogAdj.
    LogAdjacencyChanges interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // OSPFv3 Capability.
    Capability Ospfv3_Processes_Process_Vrfs_Vrf_Capability

    // OSPFv3 Domain ID.
    DomainId Ospfv3_Processes_Process_Vrfs_Vrf_DomainId

    // Area configuration.
    AreaAddresses Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses

    // Adjust routing timers.
    Timers Ospfv3_Processes_Process_Vrfs_Vrf_Timers

    // Summarize redistributed routes matching prefix/length.
    SummaryPrefixes Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // SNMP configuration.
    Snmp Ospfv3_Processes_Process_Vrfs_Vrf_Snmp

    // Fast-reroute instance scoped parameters.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute

    // Define an administrative distance.
    Distance Ospfv3_Processes_Process_Vrfs_Vrf_Distance

    // Set OSPFv3 limits.
    Maximum Ospfv3_Processes_Process_Vrfs_Vrf_Maximum

    // Redistribute information from another routing protocol.
    Redistributes Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes

    // Do not complain about a specified event.
    Ignore Ospfv3_Processes_Process_Vrfs_Vrf_Ignore

    // Filter prefixes from RIB .
    DistributeListOut Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList

    // Stub router configuration.
    StubRouter Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_Vrfs_Vrf_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_Authentication

    // Graceful restart configuration.
    GracefulRestart Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart

    // Control distribution of default information.
    DefaultInformation Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation

    // Process scope configuration.
    ProcessScope Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_Encryption

    // Calculate interface cost according to bandwidth.
    AutoCost Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "enable" { return "Enable" }
    if yname == "snmpvrf-trap" { return "SnmpvrfTrap" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "priority" { return "Priority" }
    if yname == "cost" { return "Cost" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "spf-prefix-priority-policy" { return "SpfPrefixPriorityPolicy" }
    if yname == "router-id" { return "RouterId" }
    if yname == "network" { return "Network" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "log-adjacency-changes" { return "LogAdjacencyChanges" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "capability" { return "Capability" }
    if yname == "domain-id" { return "DomainId" }
    if yname == "area-addresses" { return "AreaAddresses" }
    if yname == "timers" { return "Timers" }
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "snmp" { return "Snmp" }
    if yname == "fast-reroute" { return "FastReroute" }
    if yname == "distance" { return "Distance" }
    if yname == "maximum" { return "Maximum" }
    if yname == "redistributes" { return "Redistributes" }
    if yname == "ignore" { return "Ignore" }
    if yname == "distribute-list-out" { return "DistributeListOut" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "stub-router" { return "StubRouter" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "authentication" { return "Authentication" }
    if yname == "graceful-restart" { return "GracefulRestart" }
    if yname == "default-information" { return "DefaultInformation" }
    if yname == "process-scope" { return "ProcessScope" }
    if yname == "encryption" { return "Encryption" }
    if yname == "auto-cost" { return "AutoCost" }
    return ""
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "capability" {
        return &vrf.Capability
    }
    if childYangName == "domain-id" {
        return &vrf.DomainId
    }
    if childYangName == "area-addresses" {
        return &vrf.AreaAddresses
    }
    if childYangName == "timers" {
        return &vrf.Timers
    }
    if childYangName == "summary-prefixes" {
        return &vrf.SummaryPrefixes
    }
    if childYangName == "snmp" {
        return &vrf.Snmp
    }
    if childYangName == "fast-reroute" {
        return &vrf.FastReroute
    }
    if childYangName == "distance" {
        return &vrf.Distance
    }
    if childYangName == "maximum" {
        return &vrf.Maximum
    }
    if childYangName == "redistributes" {
        return &vrf.Redistributes
    }
    if childYangName == "ignore" {
        return &vrf.Ignore
    }
    if childYangName == "distribute-list-out" {
        return &vrf.DistributeListOut
    }
    if childYangName == "distribute-list" {
        return &vrf.DistributeList
    }
    if childYangName == "stub-router" {
        return &vrf.StubRouter
    }
    if childYangName == "bfd" {
        return &vrf.Bfd
    }
    if childYangName == "database-filter" {
        return &vrf.DatabaseFilter
    }
    if childYangName == "authentication" {
        return &vrf.Authentication
    }
    if childYangName == "graceful-restart" {
        return &vrf.GracefulRestart
    }
    if childYangName == "default-information" {
        return &vrf.DefaultInformation
    }
    if childYangName == "process-scope" {
        return &vrf.ProcessScope
    }
    if childYangName == "encryption" {
        return &vrf.Encryption
    }
    if childYangName == "auto-cost" {
        return &vrf.AutoCost
    }
    return nil
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["capability"] = &vrf.Capability
    children["domain-id"] = &vrf.DomainId
    children["area-addresses"] = &vrf.AreaAddresses
    children["timers"] = &vrf.Timers
    children["summary-prefixes"] = &vrf.SummaryPrefixes
    children["snmp"] = &vrf.Snmp
    children["fast-reroute"] = &vrf.FastReroute
    children["distance"] = &vrf.Distance
    children["maximum"] = &vrf.Maximum
    children["redistributes"] = &vrf.Redistributes
    children["ignore"] = &vrf.Ignore
    children["distribute-list-out"] = &vrf.DistributeListOut
    children["distribute-list"] = &vrf.DistributeList
    children["stub-router"] = &vrf.StubRouter
    children["bfd"] = &vrf.Bfd
    children["database-filter"] = &vrf.DatabaseFilter
    children["authentication"] = &vrf.Authentication
    children["graceful-restart"] = &vrf.GracefulRestart
    children["default-information"] = &vrf.DefaultInformation
    children["process-scope"] = &vrf.ProcessScope
    children["encryption"] = &vrf.Encryption
    children["auto-cost"] = &vrf.AutoCost
    return children
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    leafs["enable"] = vrf.Enable
    leafs["snmpvrf-trap"] = vrf.SnmpvrfTrap
    leafs["prefix-suppression"] = vrf.PrefixSuppression
    leafs["retransmit-interval"] = vrf.RetransmitInterval
    leafs["passive"] = vrf.Passive
    leafs["default-metric"] = vrf.DefaultMetric
    leafs["flood-reduction"] = vrf.FloodReduction
    leafs["hello-interval"] = vrf.HelloInterval
    leafs["priority"] = vrf.Priority
    leafs["cost"] = vrf.Cost
    leafs["dead-interval"] = vrf.DeadInterval
    leafs["packet-size"] = vrf.PacketSize
    leafs["instance"] = vrf.Instance
    leafs["spf-prefix-priority-policy"] = vrf.SpfPrefixPriorityPolicy
    leafs["router-id"] = vrf.RouterId
    leafs["network"] = vrf.Network
    leafs["mtu-ignore"] = vrf.MtuIgnore
    leafs["log-adjacency-changes"] = vrf.LogAdjacencyChanges
    leafs["demand-circuit"] = vrf.DemandCircuit
    leafs["transmit-delay"] = vrf.TransmitDelay
    return leafs
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Capability
// OSPFv3 Capability
type Ospfv3_Processes_Process_Vrfs_Vrf_Capability struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable VRF Lite. The type is bool.
    VrfLite interface{}
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetFilter() yfilter.YFilter { return capability.YFilter }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) SetFilter(yf yfilter.YFilter) { capability.YFilter = yf }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetGoName(yname string) string {
    if yname == "vrf-lite" { return "VrfLite" }
    return ""
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetSegmentPath() string {
    return "capability"
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-lite"] = capability.VrfLite
    return leafs
}

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetBundleName() string { return "cisco_ios_xr" }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetYangName() string { return "capability" }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) SetParent(parent types.Entity) { capability.parent = parent }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetParent() types.Entity { return capability.parent }

func (capability *Ospfv3_Processes_Process_Vrfs_Vrf_Capability) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DomainId
// OSPFv3 Domain ID
type Ospfv3_Processes_Process_Vrfs_Vrf_DomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Secondary domain ID Table.
    SecondaryDomainIds Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds

    // OSPF Primary domain ID.
    PrimaryDomainId Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetFilter() yfilter.YFilter { return domainId.YFilter }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) SetFilter(yf yfilter.YFilter) { domainId.YFilter = yf }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetGoName(yname string) string {
    if yname == "secondary-domain-ids" { return "SecondaryDomainIds" }
    if yname == "primary-domain-id" { return "PrimaryDomainId" }
    return ""
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetSegmentPath() string {
    return "domain-id"
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondary-domain-ids" {
        return &domainId.SecondaryDomainIds
    }
    if childYangName == "primary-domain-id" {
        return &domainId.PrimaryDomainId
    }
    return nil
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["secondary-domain-ids"] = &domainId.SecondaryDomainIds
    children["primary-domain-id"] = &domainId.PrimaryDomainId
    return children
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetBundleName() string { return "cisco_ios_xr" }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetYangName() string { return "domain-id" }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) SetParent(parent types.Entity) { domainId.parent = parent }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetParent() types.Entity { return domainId.parent }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds
// Secondary domain ID Table
type Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF Secondary domain ID. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId.
    SecondaryDomainId []Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetFilter() yfilter.YFilter { return secondaryDomainIds.YFilter }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) SetFilter(yf yfilter.YFilter) { secondaryDomainIds.YFilter = yf }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetGoName(yname string) string {
    if yname == "secondary-domain-id" { return "SecondaryDomainId" }
    return ""
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetSegmentPath() string {
    return "secondary-domain-ids"
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "secondary-domain-id" {
        for _, c := range secondaryDomainIds.SecondaryDomainId {
            if secondaryDomainIds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId{}
        secondaryDomainIds.SecondaryDomainId = append(secondaryDomainIds.SecondaryDomainId, child)
        return &secondaryDomainIds.SecondaryDomainId[len(secondaryDomainIds.SecondaryDomainId)-1]
    }
    return nil
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range secondaryDomainIds.SecondaryDomainId {
        children[secondaryDomainIds.SecondaryDomainId[i].GetSegmentPath()] = &secondaryDomainIds.SecondaryDomainId[i]
    }
    return children
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetYangName() string { return "secondary-domain-ids" }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) SetParent(parent types.Entity) { secondaryDomainIds.parent = parent }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetParent() types.Entity { return secondaryDomainIds.parent }

func (secondaryDomainIds *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId
// OSPF Secondary domain ID
type Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Secondary domain ID type. The type is
    // Ospfv3DomainId.
    DomainIdType interface{}

    // This attribute is a key. Secondary domain ID value. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    DomainIdName interface{}
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetFilter() yfilter.YFilter { return secondaryDomainId.YFilter }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) SetFilter(yf yfilter.YFilter) { secondaryDomainId.YFilter = yf }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-name" { return "DomainIdName" }
    return ""
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetSegmentPath() string {
    return "secondary-domain-id" + "[domain-id-type='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdType) + "']" + "[domain-id-name='" + fmt.Sprintf("%v", secondaryDomainId.DomainIdName) + "']"
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = secondaryDomainId.DomainIdType
    leafs["domain-id-name"] = secondaryDomainId.DomainIdName
    return leafs
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetYangName() string { return "secondary-domain-id" }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) SetParent(parent types.Entity) { secondaryDomainId.parent = parent }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetParent() types.Entity { return secondaryDomainId.parent }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_SecondaryDomainIds_SecondaryDomainId) GetParentYangName() string { return "secondary-domain-ids" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId
// OSPF Primary domain ID
type Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary domain ID type. The type is Ospfv3DomainId.
    DomainIdType interface{}

    // Primary domain ID value. The type is string.
    DomainIdName interface{}
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetFilter() yfilter.YFilter { return primaryDomainId.YFilter }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) SetFilter(yf yfilter.YFilter) { primaryDomainId.YFilter = yf }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-name" { return "DomainIdName" }
    return ""
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetSegmentPath() string {
    return "primary-domain-id"
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = primaryDomainId.DomainIdType
    leafs["domain-id-name"] = primaryDomainId.DomainIdName
    return leafs
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetYangName() string { return "primary-domain-id" }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) SetParent(parent types.Entity) { primaryDomainId.parent = parent }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetParent() types.Entity { return primaryDomainId.parent }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_DomainId_PrimaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses
// Area configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configuration for a particular area. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress.
    AreaAddress []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress

    // Configuration for a particular area. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId.
    AreaAreaId []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetFilter() yfilter.YFilter { return areaAddresses.YFilter }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) SetFilter(yf yfilter.YFilter) { areaAddresses.YFilter = yf }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetGoName(yname string) string {
    if yname == "area-address" { return "AreaAddress" }
    if yname == "area-area-id" { return "AreaAreaId" }
    return ""
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetSegmentPath() string {
    return "area-addresses"
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-address" {
        for _, c := range areaAddresses.AreaAddress {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress{}
        areaAddresses.AreaAddress = append(areaAddresses.AreaAddress, child)
        return &areaAddresses.AreaAddress[len(areaAddresses.AreaAddress)-1]
    }
    if childYangName == "area-area-id" {
        for _, c := range areaAddresses.AreaAreaId {
            if areaAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId{}
        areaAddresses.AreaAreaId = append(areaAddresses.AreaAreaId, child)
        return &areaAddresses.AreaAreaId[len(areaAddresses.AreaAreaId)-1]
    }
    return nil
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaAddresses.AreaAddress {
        children[areaAddresses.AreaAddress[i].GetSegmentPath()] = &areaAddresses.AreaAddress[i]
    }
    for i := range areaAddresses.AreaAreaId {
        children[areaAddresses.AreaAreaId[i].GetSegmentPath()] = &areaAddresses.AreaAreaId[i]
    }
    return children
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetYangName() string { return "area-addresses" }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) SetParent(parent types.Entity) { areaAddresses.parent = parent }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetParent() types.Entity { return areaAddresses.parent }

func (areaAddresses *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress
// Configuration for a particular area
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in IP address format. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Specify area as a stub area.  Allowed only in non-backbone areas. The type
    // is bool.
    Stub interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Enable OSPFv3 area. The type is interface{}.
    Enable interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 0..16777215.
    DefaultCost interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd

    // Range configuration.
    Ranges Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption

    // Specify area as a NSSA area.  Allowed only in non-backbone areas.
    Nssa Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList

    // OSPFv3 interfaces.
    Interfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces

    // Area Scope Configuration.
    AreaScope Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope

    // Sham Link sub-mode.
    ShamLinks Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks

    // Virtual link sub-mode.
    VirtualLinks Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetFilter() yfilter.YFilter { return areaAddress.YFilter }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) SetFilter(yf yfilter.YFilter) { areaAddress.YFilter = yf }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "stub" { return "Stub" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "priority" { return "Priority" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "enable" { return "Enable" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "passive" { return "Passive" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "network" { return "Network" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "cost" { return "Cost" }
    if yname == "authentication" { return "Authentication" }
    if yname == "bfd" { return "Bfd" }
    if yname == "ranges" { return "Ranges" }
    if yname == "encryption" { return "Encryption" }
    if yname == "nssa" { return "Nssa" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "sham-links" { return "ShamLinks" }
    if yname == "virtual-links" { return "VirtualLinks" }
    return ""
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetSegmentPath() string {
    return "area-address" + "[address='" + fmt.Sprintf("%v", areaAddress.Address) + "']"
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &areaAddress.Authentication
    }
    if childYangName == "bfd" {
        return &areaAddress.Bfd
    }
    if childYangName == "ranges" {
        return &areaAddress.Ranges
    }
    if childYangName == "encryption" {
        return &areaAddress.Encryption
    }
    if childYangName == "nssa" {
        return &areaAddress.Nssa
    }
    if childYangName == "database-filter" {
        return &areaAddress.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &areaAddress.DistributeList
    }
    if childYangName == "interfaces" {
        return &areaAddress.Interfaces
    }
    if childYangName == "area-scope" {
        return &areaAddress.AreaScope
    }
    if childYangName == "sham-links" {
        return &areaAddress.ShamLinks
    }
    if childYangName == "virtual-links" {
        return &areaAddress.VirtualLinks
    }
    return nil
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &areaAddress.Authentication
    children["bfd"] = &areaAddress.Bfd
    children["ranges"] = &areaAddress.Ranges
    children["encryption"] = &areaAddress.Encryption
    children["nssa"] = &areaAddress.Nssa
    children["database-filter"] = &areaAddress.DatabaseFilter
    children["distribute-list"] = &areaAddress.DistributeList
    children["interfaces"] = &areaAddress.Interfaces
    children["area-scope"] = &areaAddress.AreaScope
    children["sham-links"] = &areaAddress.ShamLinks
    children["virtual-links"] = &areaAddress.VirtualLinks
    return children
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = areaAddress.Address
    leafs["stub"] = areaAddress.Stub
    leafs["packet-size"] = areaAddress.PacketSize
    leafs["instance"] = areaAddress.Instance
    leafs["demand-circuit"] = areaAddress.DemandCircuit
    leafs["priority"] = areaAddress.Priority
    leafs["prefix-suppression"] = areaAddress.PrefixSuppression
    leafs["enable"] = areaAddress.Enable
    leafs["mtu-ignore"] = areaAddress.MtuIgnore
    leafs["passive"] = areaAddress.Passive
    leafs["hello-interval"] = areaAddress.HelloInterval
    leafs["dead-interval"] = areaAddress.DeadInterval
    leafs["default-cost"] = areaAddress.DefaultCost
    leafs["flood-reduction"] = areaAddress.FloodReduction
    leafs["retransmit-interval"] = areaAddress.RetransmitInterval
    leafs["ldp-sync"] = areaAddress.LdpSync
    leafs["network"] = areaAddress.Network
    leafs["transmit-delay"] = areaAddress.TransmitDelay
    leafs["cost"] = areaAddress.Cost
    return leafs
}

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetBundleName() string { return "cisco_ios_xr" }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetYangName() string { return "area-address" }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) SetParent(parent types.Entity) { areaAddress.parent = parent }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetParent() types.Entity { return areaAddress.parent }

func (areaAddress *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress) GetParentYangName() string { return "area-addresses" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Authentication) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Bfd) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges
// Range configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summarize inter-area routes matching prefix/length. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range.
    Range []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetYangName() string { return "ranges" }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range
// Summarize inter-area routes matching
// prefix/length
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix format. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Do not advertise address range. The type is bool. The default value is
    // false.
    NotAdvertise interface{}

    // Specified metric for this range. The type is interface{} with range:
    // 1..16777214.
    Cost interface{}
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "cost" { return "Cost" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetSegmentPath() string {
    return "range" + "[prefix='" + fmt.Sprintf("%v", self.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", self.PrefixLength) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = self.Prefix
    leafs["prefix-length"] = self.PrefixLength
    leafs["not-advertise"] = self.NotAdvertise
    leafs["cost"] = self.Cost
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetYangName() string { return "range" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Ranges_Range) GetParentYangName() string { return "ranges" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Encryption) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa
// Specify area as a NSSA area.  Allowed only in
// non-backbone areas
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Only valid with DefaultInfoOriginate. The type is interface{} with range:
    // 0..16777214.
    Metric interface{}

    // Only valid with DefaultInfoOriginate. The type is Ospfv3Metric.
    MetricType interface{}

    // Do not send summary LSA into NSSA. The type is interface{}.
    NoSummary interface{}
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "no-summary" { return "NoSummary" }
    return ""
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["metric"] = nssa.Metric
    leafs["metric-type"] = nssa.MetricType
    leafs["no-summary"] = nssa.NoSummary
    return leafs
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Nssa) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces
// OSPFv3 interfaces
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface.
    Interface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface
// OSPFv3 interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface to configure. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable OSPFv3 interface. The type is interface{}.
    Enable interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication

    // Specify a neighbor router.
    Neighbors Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "enable" { return "Enable" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "cost" { return "Cost" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "instance" { return "Instance" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "priority" { return "Priority" }
    if yname == "network" { return "Network" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "encryption" { return "Encryption" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &self.Authentication
    }
    if childYangName == "neighbors" {
        return &self.Neighbors
    }
    if childYangName == "encryption" {
        return &self.Encryption
    }
    if childYangName == "bfd" {
        return &self.Bfd
    }
    if childYangName == "database-filter" {
        return &self.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &self.DistributeList
    }
    if childYangName == "fast-reroute" {
        return &self.FastReroute
    }
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &self.Authentication
    children["neighbors"] = &self.Neighbors
    children["encryption"] = &self.Encryption
    children["bfd"] = &self.Bfd
    children["database-filter"] = &self.DatabaseFilter
    children["distribute-list"] = &self.DistributeList
    children["fast-reroute"] = &self.FastReroute
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["enable"] = self.Enable
    leafs["dead-interval"] = self.DeadInterval
    leafs["flood-reduction"] = self.FloodReduction
    leafs["cost"] = self.Cost
    leafs["transmit-delay"] = self.TransmitDelay
    leafs["instance"] = self.Instance
    leafs["ldp-sync"] = self.LdpSync
    leafs["mtu-ignore"] = self.MtuIgnore
    leafs["retransmit-interval"] = self.RetransmitInterval
    leafs["hello-interval"] = self.HelloInterval
    leafs["passive"] = self.Passive
    leafs["packet-size"] = self.PacketSize
    leafs["prefix-suppression"] = self.PrefixSuppression
    leafs["priority"] = self.Priority
    leafs["network"] = self.Network
    leafs["demand-circuit"] = self.DemandCircuit
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Authentication) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors
// Specify a neighbor router
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor.
    Neighbor []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor
// IPv6 address
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV6 address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NeighborAddress interface{}

    // OSPFv3 priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255.
    Priority interface{}

    // OSPFv3 dead-router polling interval (in seconds). The type is interface{}
    // with range: 0..65535. Units are second.
    PollInterval interface{}

    // OSPFv3 cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535.
    Cost interface{}

    // Filter OSPFv3 LSA during synchronization and flooding for
    // point-to-multipoint neighbor. The type is bool.
    DatabaseFilter interface{}

    // Zone. The type is string.
    Zone interface{}
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "zone" { return "Zone" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    leafs["zone"] = neighbor.Zone
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Encryption) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_Bfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope
// Area Scope Configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    return nil
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &areaScope.FastReroute
    return children
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks
// Sham Link sub-mode
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ShamLink local and remote endpoints. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink.
    ShamLink []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetFilter() yfilter.YFilter { return shamLinks.YFilter }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) SetFilter(yf yfilter.YFilter) { shamLinks.YFilter = yf }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetGoName(yname string) string {
    if yname == "sham-link" { return "ShamLink" }
    return ""
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetSegmentPath() string {
    return "sham-links"
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link" {
        for _, c := range shamLinks.ShamLink {
            if shamLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink{}
        shamLinks.ShamLink = append(shamLinks.ShamLink, child)
        return &shamLinks.ShamLink[len(shamLinks.ShamLink)-1]
    }
    return nil
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinks.ShamLink {
        children[shamLinks.ShamLink[i].GetSegmentPath()] = &shamLinks.ShamLink[i]
    }
    return children
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetYangName() string { return "sham-links" }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) SetParent(parent types.Entity) { shamLinks.parent = parent }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetParent() types.Entity { return shamLinks.parent }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink
// ShamLink local and remote endpoints
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Remote sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Enable sham link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetFilter() yfilter.YFilter { return shamLink.YFilter }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) SetFilter(yf yfilter.YFilter) { shamLink.YFilter = yf }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetSegmentPath() string {
    return "sham-link" + "[source-address='" + fmt.Sprintf("%v", shamLink.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLink.DestinationAddress) + "']"
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLink.Authentication
    }
    if childYangName == "encryption" {
        return &shamLink.Encryption
    }
    return nil
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLink.Authentication
    children["encryption"] = &shamLink.Encryption
    return children
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLink.SourceAddress
    leafs["destination-address"] = shamLink.DestinationAddress
    leafs["enable"] = shamLink.Enable
    leafs["hello-interval"] = shamLink.HelloInterval
    leafs["dead-interval"] = shamLink.DeadInterval
    leafs["retransmit-interval"] = shamLink.RetransmitInterval
    leafs["transmit-delay"] = shamLink.TransmitDelay
    return leafs
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetBundleName() string { return "cisco_ios_xr" }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetYangName() string { return "sham-link" }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) SetParent(parent types.Entity) { shamLink.parent = parent }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetParent() types.Entity { return shamLink.parent }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink) GetParentYangName() string { return "sham-links" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Authentication) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_ShamLinks_ShamLink_Encryption) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks
// Virtual link sub-mode
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID of virtual link neighbor. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink.
    VirtualLink []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetFilter() yfilter.YFilter { return virtualLinks.YFilter }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) SetFilter(yf yfilter.YFilter) { virtualLinks.YFilter = yf }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetGoName(yname string) string {
    if yname == "virtual-link" { return "VirtualLink" }
    return ""
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetSegmentPath() string {
    return "virtual-links"
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link" {
        for _, c := range virtualLinks.VirtualLink {
            if virtualLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink{}
        virtualLinks.VirtualLink = append(virtualLinks.VirtualLink, child)
        return &virtualLinks.VirtualLink[len(virtualLinks.VirtualLink)-1]
    }
    return nil
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinks.VirtualLink {
        children[virtualLinks.VirtualLink[i].GetSegmentPath()] = &virtualLinks.VirtualLink[i]
    }
    return children
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetYangName() string { return "virtual-links" }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) SetParent(parent types.Entity) { virtualLinks.parent = parent }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetParent() types.Entity { return virtualLinks.parent }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks) GetParentYangName() string { return "area-address" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink
// Router ID of virtual link neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkAddress interface{}

    // Enabled virtual link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-address" { return "VirtualLinkAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetSegmentPath() string {
    return "virtual-link" + "[virtual-link-address='" + fmt.Sprintf("%v", virtualLink.VirtualLinkAddress) + "']"
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLink.Authentication
    }
    if childYangName == "encryption" {
        return &virtualLink.Encryption
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLink.Authentication
    children["encryption"] = &virtualLink.Encryption
    return children
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-address"] = virtualLink.VirtualLinkAddress
    leafs["enable"] = virtualLink.Enable
    leafs["hello-interval"] = virtualLink.HelloInterval
    leafs["dead-interval"] = virtualLink.DeadInterval
    leafs["retransmit-interval"] = virtualLink.RetransmitInterval
    leafs["transmit-delay"] = virtualLink.TransmitDelay
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink) GetParentYangName() string { return "virtual-links" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Authentication) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAddress_VirtualLinks_VirtualLink_Encryption) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId
// Configuration for a particular area
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID if in integer format. The type is
    // interface{} with range: 0..4294967295.
    AreaId interface{}

    // Specify area as a stub area.  Allowed only in non-backbone areas. The type
    // is bool.
    Stub interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Enable OSPFv3 area. The type is interface{}.
    Enable interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Set the summary default-cost of a NSSA/stub area. The type is interface{}
    // with range: 0..16777215.
    DefaultCost interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd

    // Range configuration.
    Ranges Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption

    // Specify area as a NSSA area.  Allowed only in non-backbone areas.
    Nssa Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList

    // OSPFv3 interfaces.
    Interfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces

    // Area Scope Configuration.
    AreaScope Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope

    // Sham Link sub-mode.
    ShamLinks Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks

    // Virtual link sub-mode.
    VirtualLinks Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetFilter() yfilter.YFilter { return areaAreaId.YFilter }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) SetFilter(yf yfilter.YFilter) { areaAreaId.YFilter = yf }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "stub" { return "Stub" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "instance" { return "Instance" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "priority" { return "Priority" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "enable" { return "Enable" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "passive" { return "Passive" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "default-cost" { return "DefaultCost" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "network" { return "Network" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "cost" { return "Cost" }
    if yname == "authentication" { return "Authentication" }
    if yname == "bfd" { return "Bfd" }
    if yname == "ranges" { return "Ranges" }
    if yname == "encryption" { return "Encryption" }
    if yname == "nssa" { return "Nssa" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "interfaces" { return "Interfaces" }
    if yname == "area-scope" { return "AreaScope" }
    if yname == "sham-links" { return "ShamLinks" }
    if yname == "virtual-links" { return "VirtualLinks" }
    return ""
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetSegmentPath() string {
    return "area-area-id" + "[area-id='" + fmt.Sprintf("%v", areaAreaId.AreaId) + "']"
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &areaAreaId.Authentication
    }
    if childYangName == "bfd" {
        return &areaAreaId.Bfd
    }
    if childYangName == "ranges" {
        return &areaAreaId.Ranges
    }
    if childYangName == "encryption" {
        return &areaAreaId.Encryption
    }
    if childYangName == "nssa" {
        return &areaAreaId.Nssa
    }
    if childYangName == "database-filter" {
        return &areaAreaId.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &areaAreaId.DistributeList
    }
    if childYangName == "interfaces" {
        return &areaAreaId.Interfaces
    }
    if childYangName == "area-scope" {
        return &areaAreaId.AreaScope
    }
    if childYangName == "sham-links" {
        return &areaAreaId.ShamLinks
    }
    if childYangName == "virtual-links" {
        return &areaAreaId.VirtualLinks
    }
    return nil
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &areaAreaId.Authentication
    children["bfd"] = &areaAreaId.Bfd
    children["ranges"] = &areaAreaId.Ranges
    children["encryption"] = &areaAreaId.Encryption
    children["nssa"] = &areaAreaId.Nssa
    children["database-filter"] = &areaAreaId.DatabaseFilter
    children["distribute-list"] = &areaAreaId.DistributeList
    children["interfaces"] = &areaAreaId.Interfaces
    children["area-scope"] = &areaAreaId.AreaScope
    children["sham-links"] = &areaAreaId.ShamLinks
    children["virtual-links"] = &areaAreaId.VirtualLinks
    return children
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaAreaId.AreaId
    leafs["stub"] = areaAreaId.Stub
    leafs["packet-size"] = areaAreaId.PacketSize
    leafs["instance"] = areaAreaId.Instance
    leafs["demand-circuit"] = areaAreaId.DemandCircuit
    leafs["priority"] = areaAreaId.Priority
    leafs["prefix-suppression"] = areaAreaId.PrefixSuppression
    leafs["enable"] = areaAreaId.Enable
    leafs["mtu-ignore"] = areaAreaId.MtuIgnore
    leafs["passive"] = areaAreaId.Passive
    leafs["hello-interval"] = areaAreaId.HelloInterval
    leafs["dead-interval"] = areaAreaId.DeadInterval
    leafs["default-cost"] = areaAreaId.DefaultCost
    leafs["flood-reduction"] = areaAreaId.FloodReduction
    leafs["retransmit-interval"] = areaAreaId.RetransmitInterval
    leafs["ldp-sync"] = areaAreaId.LdpSync
    leafs["network"] = areaAreaId.Network
    leafs["transmit-delay"] = areaAreaId.TransmitDelay
    leafs["cost"] = areaAreaId.Cost
    return leafs
}

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetBundleName() string { return "cisco_ios_xr" }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetYangName() string { return "area-area-id" }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) SetParent(parent types.Entity) { areaAreaId.parent = parent }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetParent() types.Entity { return areaAreaId.parent }

func (areaAreaId *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId) GetParentYangName() string { return "area-addresses" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Authentication) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Bfd) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges
// Range configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summarize inter-area routes matching prefix/length. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range.
    Range []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetFilter() yfilter.YFilter { return ranges.YFilter }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) SetFilter(yf yfilter.YFilter) { ranges.YFilter = yf }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetGoName(yname string) string {
    if yname == "range" { return "Range" }
    return ""
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetSegmentPath() string {
    return "ranges"
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "range" {
        for _, c := range ranges.Range {
            if ranges.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range{}
        ranges.Range = append(ranges.Range, child)
        return &ranges.Range[len(ranges.Range)-1]
    }
    return nil
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ranges.Range {
        children[ranges.Range[i].GetSegmentPath()] = &ranges.Range[i]
    }
    return children
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetBundleName() string { return "cisco_ios_xr" }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetYangName() string { return "ranges" }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) SetParent(parent types.Entity) { ranges.parent = parent }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetParent() types.Entity { return ranges.parent }

func (ranges *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range
// Summarize inter-area routes matching
// prefix/length
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix format. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Do not advertise address range. The type is bool. The default value is
    // false.
    NotAdvertise interface{}

    // Specified metric for this range. The type is interface{} with range:
    // 1..16777214.
    Cost interface{}
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "cost" { return "Cost" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetSegmentPath() string {
    return "range" + "[prefix='" + fmt.Sprintf("%v", self.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", self.PrefixLength) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = self.Prefix
    leafs["prefix-length"] = self.PrefixLength
    leafs["not-advertise"] = self.NotAdvertise
    leafs["cost"] = self.Cost
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetYangName() string { return "range" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Ranges_Range) GetParentYangName() string { return "ranges" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Encryption) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa
// Specify area as a NSSA area.  Allowed only in
// non-backbone areas
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No redistribution into this NSSA area. The type is bool. The default value
    // is false.
    NoRedistribution interface{}

    // Originate Type 7 default into NSSA area. The type is bool. The default
    // value is false.
    DefaultInfoOriginate interface{}

    // Only valid with DefaultInfoOriginate. The type is interface{} with range:
    // 0..16777214.
    Metric interface{}

    // Only valid with DefaultInfoOriginate. The type is Ospfv3Metric.
    MetricType interface{}

    // Do not send summary LSA into NSSA. The type is interface{}.
    NoSummary interface{}
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetFilter() yfilter.YFilter { return nssa.YFilter }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) SetFilter(yf yfilter.YFilter) { nssa.YFilter = yf }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetGoName(yname string) string {
    if yname == "no-redistribution" { return "NoRedistribution" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "no-summary" { return "NoSummary" }
    return ""
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetSegmentPath() string {
    return "nssa"
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["no-redistribution"] = nssa.NoRedistribution
    leafs["default-info-originate"] = nssa.DefaultInfoOriginate
    leafs["metric"] = nssa.Metric
    leafs["metric-type"] = nssa.MetricType
    leafs["no-summary"] = nssa.NoSummary
    return leafs
}

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetBundleName() string { return "cisco_ios_xr" }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetYangName() string { return "nssa" }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) SetParent(parent types.Entity) { nssa.parent = parent }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetParent() types.Entity { return nssa.parent }

func (nssa *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Nssa) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces
// OSPFv3 interfaces
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface.
    Interface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface
// OSPFv3 interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface to configure. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Enable OSPFv3 interface. The type is interface{}.
    Enable interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Enable/disable flood reduction. The type is bool.
    FloodReduction interface{}

    // Interface cost. The type is interface{} with range: 1..65535.
    Cost interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Instance ID. The type is interface{} with range: 0..255.
    Instance interface{}

    // Enable/Disable MPLS LDP sync. The type is bool.
    LdpSync interface{}

    // Enable/disable ignoring of MTU in DBD packets. The type is bool.
    MtuIgnore interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Enable/disable routing updates on an interface. The type is bool.
    Passive interface{}

    // Limit size of OSPFv3 packets. The type is interface{} with range:
    // 256..10000.
    PacketSize interface{}

    // Enable/disable prefix suppression on an interface. The type is bool.
    PrefixSuppression interface{}

    // Specify router priority. The type is interface{} with range: 0..255.
    Priority interface{}

    // Specify network type. The type is Ospfv3Network.
    Network interface{}

    // Enable/disable demand circuit operation. The type is bool.
    DemandCircuit interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication

    // Specify a neighbor router.
    Neighbors Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption

    // Configure BFD parameters.
    Bfd Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd

    // Database filter.
    DatabaseFilter Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter

    // Filter prefixes to/from RIB.
    DistributeList Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "enable" { return "Enable" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "flood-reduction" { return "FloodReduction" }
    if yname == "cost" { return "Cost" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "instance" { return "Instance" }
    if yname == "ldp-sync" { return "LdpSync" }
    if yname == "mtu-ignore" { return "MtuIgnore" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "passive" { return "Passive" }
    if yname == "packet-size" { return "PacketSize" }
    if yname == "prefix-suppression" { return "PrefixSuppression" }
    if yname == "priority" { return "Priority" }
    if yname == "network" { return "Network" }
    if yname == "demand-circuit" { return "DemandCircuit" }
    if yname == "authentication" { return "Authentication" }
    if yname == "neighbors" { return "Neighbors" }
    if yname == "encryption" { return "Encryption" }
    if yname == "bfd" { return "Bfd" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "distribute-list" { return "DistributeList" }
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &self.Authentication
    }
    if childYangName == "neighbors" {
        return &self.Neighbors
    }
    if childYangName == "encryption" {
        return &self.Encryption
    }
    if childYangName == "bfd" {
        return &self.Bfd
    }
    if childYangName == "database-filter" {
        return &self.DatabaseFilter
    }
    if childYangName == "distribute-list" {
        return &self.DistributeList
    }
    if childYangName == "fast-reroute" {
        return &self.FastReroute
    }
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &self.Authentication
    children["neighbors"] = &self.Neighbors
    children["encryption"] = &self.Encryption
    children["bfd"] = &self.Bfd
    children["database-filter"] = &self.DatabaseFilter
    children["distribute-list"] = &self.DistributeList
    children["fast-reroute"] = &self.FastReroute
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["enable"] = self.Enable
    leafs["dead-interval"] = self.DeadInterval
    leafs["flood-reduction"] = self.FloodReduction
    leafs["cost"] = self.Cost
    leafs["transmit-delay"] = self.TransmitDelay
    leafs["instance"] = self.Instance
    leafs["ldp-sync"] = self.LdpSync
    leafs["mtu-ignore"] = self.MtuIgnore
    leafs["retransmit-interval"] = self.RetransmitInterval
    leafs["hello-interval"] = self.HelloInterval
    leafs["passive"] = self.Passive
    leafs["packet-size"] = self.PacketSize
    leafs["prefix-suppression"] = self.PrefixSuppression
    leafs["priority"] = self.Priority
    leafs["network"] = self.Network
    leafs["demand-circuit"] = self.DemandCircuit
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Authentication) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors
// Specify a neighbor router
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor.
    Neighbor []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    return nil
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    return children
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor
// IPv6 address
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPV6 address. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    NeighborAddress interface{}

    // OSPFv3 priority of non-broadcast neighbor. The type is interface{} with
    // range: 0..255.
    Priority interface{}

    // OSPFv3 dead-router polling interval (in seconds). The type is interface{}
    // with range: 0..65535. Units are second.
    PollInterval interface{}

    // OSPFv3 cost for point-to-multipoint neighbor. The type is interface{} with
    // range: 1..65535.
    Cost interface{}

    // Filter OSPFv3 LSA during synchronization and flooding for
    // point-to-multipoint neighbor. The type is bool.
    DatabaseFilter interface{}

    // Zone. The type is string.
    Zone interface{}
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "priority" { return "Priority" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "cost" { return "Cost" }
    if yname == "database-filter" { return "DatabaseFilter" }
    if yname == "zone" { return "Zone" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["priority"] = neighbor.Priority
    leafs["poll-interval"] = neighbor.PollInterval
    leafs["cost"] = neighbor.Cost
    leafs["database-filter"] = neighbor.DatabaseFilter
    leafs["zone"] = neighbor.Zone
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Encryption) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    return leafs
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_Bfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable or disable database-filter. The type is bool.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_Interfaces_Interface_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope
// Area Scope Configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetFilter() yfilter.YFilter { return areaScope.YFilter }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) SetFilter(yf yfilter.YFilter) { areaScope.YFilter = yf }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetSegmentPath() string {
    return "area-scope"
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &areaScope.FastReroute
    }
    return nil
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &areaScope.FastReroute
    return children
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleName() string { return "cisco_ios_xr" }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetYangName() string { return "area-scope" }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) SetParent(parent types.Entity) { areaScope.parent = parent }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetParent() types.Entity { return areaScope.parent }

func (areaScope *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute) GetParentYangName() string { return "area-scope" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_AreaScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks
// Sham Link sub-mode
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ShamLink local and remote endpoints. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink.
    ShamLink []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetFilter() yfilter.YFilter { return shamLinks.YFilter }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) SetFilter(yf yfilter.YFilter) { shamLinks.YFilter = yf }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetGoName(yname string) string {
    if yname == "sham-link" { return "ShamLink" }
    return ""
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetSegmentPath() string {
    return "sham-links"
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link" {
        for _, c := range shamLinks.ShamLink {
            if shamLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink{}
        shamLinks.ShamLink = append(shamLinks.ShamLink, child)
        return &shamLinks.ShamLink[len(shamLinks.ShamLink)-1]
    }
    return nil
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range shamLinks.ShamLink {
        children[shamLinks.ShamLink[i].GetSegmentPath()] = &shamLinks.ShamLink[i]
    }
    return children
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetYangName() string { return "sham-links" }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) SetParent(parent types.Entity) { shamLinks.parent = parent }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetParent() types.Entity { return shamLinks.parent }

func (shamLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink
// ShamLink local and remote endpoints
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Local sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Remote sham-link endpoint. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Enable sham link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetFilter() yfilter.YFilter { return shamLink.YFilter }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) SetFilter(yf yfilter.YFilter) { shamLink.YFilter = yf }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetSegmentPath() string {
    return "sham-link" + "[source-address='" + fmt.Sprintf("%v", shamLink.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", shamLink.DestinationAddress) + "']"
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &shamLink.Authentication
    }
    if childYangName == "encryption" {
        return &shamLink.Encryption
    }
    return nil
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &shamLink.Authentication
    children["encryption"] = &shamLink.Encryption
    return children
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = shamLink.SourceAddress
    leafs["destination-address"] = shamLink.DestinationAddress
    leafs["enable"] = shamLink.Enable
    leafs["hello-interval"] = shamLink.HelloInterval
    leafs["dead-interval"] = shamLink.DeadInterval
    leafs["retransmit-interval"] = shamLink.RetransmitInterval
    leafs["transmit-delay"] = shamLink.TransmitDelay
    return leafs
}

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetBundleName() string { return "cisco_ios_xr" }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetYangName() string { return "sham-link" }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) SetParent(parent types.Entity) { shamLink.parent = parent }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetParent() types.Entity { return shamLink.parent }

func (shamLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink) GetParentYangName() string { return "sham-links" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Authentication) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_ShamLinks_ShamLink_Encryption) GetParentYangName() string { return "sham-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks
// Virtual link sub-mode
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID of virtual link neighbor. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink.
    VirtualLink []Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetFilter() yfilter.YFilter { return virtualLinks.YFilter }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) SetFilter(yf yfilter.YFilter) { virtualLinks.YFilter = yf }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetGoName(yname string) string {
    if yname == "virtual-link" { return "VirtualLink" }
    return ""
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetSegmentPath() string {
    return "virtual-links"
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link" {
        for _, c := range virtualLinks.VirtualLink {
            if virtualLinks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink{}
        virtualLinks.VirtualLink = append(virtualLinks.VirtualLink, child)
        return &virtualLinks.VirtualLink[len(virtualLinks.VirtualLink)-1]
    }
    return nil
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range virtualLinks.VirtualLink {
        children[virtualLinks.VirtualLink[i].GetSegmentPath()] = &virtualLinks.VirtualLink[i]
    }
    return children
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetYangName() string { return "virtual-links" }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) SetParent(parent types.Entity) { virtualLinks.parent = parent }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetParent() types.Entity { return virtualLinks.parent }

func (virtualLinks *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks) GetParentYangName() string { return "area-area-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink
// Router ID of virtual link neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router ID of virtual link neighbor. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkAddress interface{}

    // Enabled virtual link. The type is interface{}.
    Enable interface{}

    // Time between HELLO packets. The type is interface{} with range: 1..65535.
    // Units are second.
    HelloInterval interface{}

    // Interval after which a neighbor is declared dead (in seconds). The type is
    // interface{} with range: 1..65535. Units are second.
    DeadInterval interface{}

    // Specify the transmit interval in seconds. The type is interface{} with
    // range: 1..65535. Units are second.
    RetransmitInterval interface{}

    // Specify the transmit delay in seconds. The type is interface{} with range:
    // 1..65535. Units are second.
    TransmitDelay interface{}

    // Authenticate OSPFv3 packets.
    Authentication Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication

    // Encrypt and authenticate OSPFv3 packets.
    Encryption Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-address" { return "VirtualLinkAddress" }
    if yname == "enable" { return "Enable" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "retransmit-interval" { return "RetransmitInterval" }
    if yname == "transmit-delay" { return "TransmitDelay" }
    if yname == "authentication" { return "Authentication" }
    if yname == "encryption" { return "Encryption" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetSegmentPath() string {
    return "virtual-link" + "[virtual-link-address='" + fmt.Sprintf("%v", virtualLink.VirtualLinkAddress) + "']"
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication" {
        return &virtualLink.Authentication
    }
    if childYangName == "encryption" {
        return &virtualLink.Encryption
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["authentication"] = &virtualLink.Authentication
    children["encryption"] = &virtualLink.Encryption
    return children
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-address"] = virtualLink.VirtualLinkAddress
    leafs["enable"] = virtualLink.Enable
    leafs["hello-interval"] = virtualLink.HelloInterval
    leafs["dead-interval"] = virtualLink.DeadInterval
    leafs["retransmit-interval"] = virtualLink.RetransmitInterval
    leafs["transmit-delay"] = virtualLink.TransmitDelay
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink) GetParentYangName() string { return "virtual-links" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Authentication) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_AreaAddresses_AreaAreaId_VirtualLinks_VirtualLink_Encryption) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers
// Adjust routing timers
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pacing timers.
    Pacing Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing

    // LSA timers.
    LsaTimers Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers

    // Throttle timers.
    Throttle Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetGoName(yname string) string {
    if yname == "pacing" { return "Pacing" }
    if yname == "lsa-timers" { return "LsaTimers" }
    if yname == "throttle" { return "Throttle" }
    return ""
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pacing" {
        return &timers.Pacing
    }
    if childYangName == "lsa-timers" {
        return &timers.LsaTimers
    }
    if childYangName == "throttle" {
        return &timers.Throttle
    }
    return nil
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pacing"] = &timers.Pacing
    children["lsa-timers"] = &timers.LsaTimers
    children["throttle"] = &timers.Throttle
    return children
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetYangName() string { return "timers" }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing
// Pacing timers
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The minimum interval in milliseconds to pace limit flooding on interface.
    // The type is interface{} with range: 5..100. Units are millisecond.
    Flood interface{}

    // The minimum interval in msec between neighbor retransmissions. The type is
    // interface{} with range: 5..100.
    Retransmission interface{}

    // Interval in seconds at which LSAs are grouped and refreshed, checksummed,
    // or aged. The type is interface{} with range: 10..1800. Units are second.
    LsaGroup interface{}
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetFilter() yfilter.YFilter { return pacing.YFilter }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) SetFilter(yf yfilter.YFilter) { pacing.YFilter = yf }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    if yname == "retransmission" { return "Retransmission" }
    if yname == "lsa-group" { return "LsaGroup" }
    return ""
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetSegmentPath() string {
    return "pacing"
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flood"] = pacing.Flood
    leafs["retransmission"] = pacing.Retransmission
    leafs["lsa-group"] = pacing.LsaGroup
    return leafs
}

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetBundleName() string { return "cisco_ios_xr" }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetYangName() string { return "pacing" }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) SetParent(parent types.Entity) { pacing.parent = parent }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetParent() types.Entity { return pacing.parent }

func (pacing *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Pacing) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers
// LSA timers
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The minimum interval in milliseconds between accepting the same LSA. The
    // type is interface{} with range: 0..60000. Units are millisecond.
    Arrival interface{}
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetFilter() yfilter.YFilter { return lsaTimers.YFilter }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) SetFilter(yf yfilter.YFilter) { lsaTimers.YFilter = yf }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetGoName(yname string) string {
    if yname == "arrival" { return "Arrival" }
    return ""
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetSegmentPath() string {
    return "lsa-timers"
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["arrival"] = lsaTimers.Arrival
    return leafs
}

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetYangName() string { return "lsa-timers" }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) SetParent(parent types.Entity) { lsaTimers.parent = parent }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetParent() types.Entity { return lsaTimers.parent }

func (lsaTimers *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_LsaTimers) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle
// Throttle timers
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA throttle timers for all types of OSPF LSAs.
    Lsa Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa

    // SPF throttle timers.
    Spf Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetFilter() yfilter.YFilter { return throttle.YFilter }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) SetFilter(yf yfilter.YFilter) { throttle.YFilter = yf }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "spf" { return "Spf" }
    return ""
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetSegmentPath() string {
    return "throttle"
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        return &throttle.Lsa
    }
    if childYangName == "spf" {
        return &throttle.Spf
    }
    return nil
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa"] = &throttle.Lsa
    children["spf"] = &throttle.Spf
    return children
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetBundleName() string { return "cisco_ios_xr" }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetYangName() string { return "throttle" }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) SetParent(parent types.Entity) { throttle.parent = parent }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetParent() types.Entity { return throttle.parent }

func (throttle *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle) GetParentYangName() string { return "timers" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa
// LSA throttle timers for all types of OSPF LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay to generate first occurrence of LSA in milliseconds. The type is
    // interface{} with range: 0..600000. Units are millisecond.
    FirstDelay interface{}

    // Minimum delay between originating the same LSA in milliseconds. The type is
    // interface{} with range: 1..600000. Units are millisecond.
    MinimumDelay interface{}

    // Maximum delay between originating the same LSA in milliseconds. The type is
    // interface{} with range: 1..600000. Units are millisecond.
    MaximumDelay interface{}
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetGoName(yname string) string {
    if yname == "first-delay" { return "FirstDelay" }
    if yname == "minimum-delay" { return "MinimumDelay" }
    if yname == "maximum-delay" { return "MaximumDelay" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["first-delay"] = lsa.FirstDelay
    leafs["minimum-delay"] = lsa.MinimumDelay
    leafs["maximum-delay"] = lsa.MaximumDelay
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Lsa) GetParentYangName() string { return "throttle" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf
// SPF throttle timers
type Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Initial delay between receiving a change and starting SPF in ms. The type
    // is interface{} with range: 1..600000.
    FirstDelay interface{}

    // Minimum hold time between consecutive SPF calculations in ms. The type is
    // interface{} with range: 1..600000.
    MinimumDelay interface{}

    // Maximum wait time between consecutive SPF calculations in ms. The type is
    // interface{} with range: 1..600000.
    MaximumDelay interface{}
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetFilter() yfilter.YFilter { return spf.YFilter }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) SetFilter(yf yfilter.YFilter) { spf.YFilter = yf }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetGoName(yname string) string {
    if yname == "first-delay" { return "FirstDelay" }
    if yname == "minimum-delay" { return "MinimumDelay" }
    if yname == "maximum-delay" { return "MaximumDelay" }
    return ""
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetSegmentPath() string {
    return "spf"
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["first-delay"] = spf.FirstDelay
    leafs["minimum-delay"] = spf.MinimumDelay
    leafs["maximum-delay"] = spf.MaximumDelay
    return leafs
}

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetBundleName() string { return "cisco_ios_xr" }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetYangName() string { return "spf" }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) SetParent(parent types.Entity) { spf.parent = parent }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetParent() types.Entity { return spf.parent }

func (spf *Ospfv3_Processes_Process_Vrfs_Vrf_Timers_Throttle_Spf) GetParentYangName() string { return "throttle" }

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Summarize redistributed routes matching
// prefix/length
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 address. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        for _, c := range summaryPrefixes.SummaryPrefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix{}
        summaryPrefixes.SummaryPrefix = append(summaryPrefixes.SummaryPrefix, child)
        return &summaryPrefixes.SummaryPrefix[len(summaryPrefixes.SummaryPrefix)-1]
    }
    return nil
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryPrefixes.SummaryPrefix {
        children[summaryPrefixes.SummaryPrefix[i].GetSegmentPath()] = &summaryPrefixes.SummaryPrefix[i]
    }
    return children
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
// IPv6 address
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IPv6 prefix string format. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Prefix interface{}

    // This attribute is a key. IPV6 prefix length. The type is interface{} with
    // range: 0..128.
    PrefixLength interface{}

    // Suppress routes matching prefix/length. The type is bool.
    NotAdvertise interface{}

    // Tag. The type is interface{} with range: 1..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "not-advertise" { return "NotAdvertise" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix" + "[prefix='" + fmt.Sprintf("%v", summaryPrefix.Prefix) + "']" + "[prefix-length='" + fmt.Sprintf("%v", summaryPrefix.PrefixLength) + "']"
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    leafs["not-advertise"] = summaryPrefix.NotAdvertise
    leafs["tag"] = summaryPrefix.Tag
    return leafs
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetParentYangName() string { return "summary-prefixes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Snmp
// SNMP configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_Snmp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SNMP context configuration. The type is string.
    Context interface{}

    // SNMP trap rate configuration.
    TrapRateLimit Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetFilter() yfilter.YFilter { return snmp.YFilter }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) SetFilter(yf yfilter.YFilter) { snmp.YFilter = yf }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetGoName(yname string) string {
    if yname == "context" { return "Context" }
    if yname == "trap-rate-limit" { return "TrapRateLimit" }
    return ""
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetSegmentPath() string {
    return "snmp"
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trap-rate-limit" {
        return &snmp.TrapRateLimit
    }
    return nil
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["trap-rate-limit"] = &snmp.TrapRateLimit
    return children
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["context"] = snmp.Context
    return leafs
}

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetBundleName() string { return "cisco_ios_xr" }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetYangName() string { return "snmp" }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) SetParent(parent types.Entity) { snmp.parent = parent }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetParent() types.Entity { return snmp.parent }

func (snmp *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit
// SNMP trap rate configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Trap rate limit sliding window size. The type is interface{} with range:
    // 2..60.
    WindowSize interface{}

    // Max number of traps sent in window time. The type is interface{} with
    // range: 0..300.
    MaxWindowTraps interface{}
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetFilter() yfilter.YFilter { return trapRateLimit.YFilter }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) SetFilter(yf yfilter.YFilter) { trapRateLimit.YFilter = yf }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetGoName(yname string) string {
    if yname == "window-size" { return "WindowSize" }
    if yname == "max-window-traps" { return "MaxWindowTraps" }
    return ""
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetSegmentPath() string {
    return "trap-rate-limit"
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["window-size"] = trapRateLimit.WindowSize
    leafs["max-window-traps"] = trapRateLimit.MaxWindowTraps
    return leafs
}

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetBundleName() string { return "cisco_ios_xr" }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetYangName() string { return "trap-rate-limit" }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) SetParent(parent types.Entity) { trapRateLimit.parent = parent }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetParent() types.Entity { return trapRateLimit.parent }

func (trapRateLimit *Ospfv3_Processes_Process_Vrfs_Vrf_Snmp_TrapRateLimit) GetParentYangName() string { return "snmp" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute
// Fast-reroute instance scoped parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link global configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink

    // Fast-reroute per-prefix global configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetGoName(yname string) string {
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink
// Fast-reroute per-link global configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // Ospfv3FastReroutePriority.
    Priority interface{}
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = perLink.Priority
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix
// Fast-reroute per-prefix global configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Disable load sharing between multiple backups. The type is interface{}.
    LoadSharingDisable interface{}

    // Fast-reroute per-link/per-prefix priority-limit command. The type is
    // Ospfv3FastReroutePriority.
    Priority interface{}

    // Fast-reroute tiebreakers configurations.
    Tiebreakers Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "load-sharing-disable" { return "LoadSharingDisable" }
    if yname == "priority" { return "Priority" }
    if yname == "tiebreakers" { return "Tiebreakers" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreakers" {
        return &perPrefix.Tiebreakers
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tiebreakers"] = &perPrefix.Tiebreakers
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["load-sharing-disable"] = perPrefix.LoadSharingDisable
    leafs["priority"] = perPrefix.Priority
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers
// Fast-reroute tiebreakers configurations
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute tiebreakers configuration. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker.
    Tiebreaker []Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetFilter() yfilter.YFilter { return tiebreakers.YFilter }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) SetFilter(yf yfilter.YFilter) { tiebreakers.YFilter = yf }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker" { return "Tiebreaker" }
    return ""
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetSegmentPath() string {
    return "tiebreakers"
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tiebreaker" {
        for _, c := range tiebreakers.Tiebreaker {
            if tiebreakers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker{}
        tiebreakers.Tiebreaker = append(tiebreakers.Tiebreaker, child)
        return &tiebreakers.Tiebreaker[len(tiebreakers.Tiebreaker)-1]
    }
    return nil
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tiebreakers.Tiebreaker {
        children[tiebreakers.Tiebreaker[i].GetSegmentPath()] = &tiebreakers.Tiebreaker[i]
    }
    return children
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetYangName() string { return "tiebreakers" }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) SetParent(parent types.Entity) { tiebreakers.parent = parent }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetParent() types.Entity { return tiebreakers.parent }

func (tiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker
// Fast-reroute tiebreakers configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tiebreaker type. The type is
    // Ospfv3FastRerouteTiebreakers.
    TiebreakerType interface{}

    // Index value for a tiebreaker. The type is interface{} with range: 1..255.
    // This attribute is mandatory.
    TiebreakerIndex interface{}
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetFilter() yfilter.YFilter { return tiebreaker.YFilter }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetFilter(yf yfilter.YFilter) { tiebreaker.YFilter = yf }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetSegmentPath() string {
    return "tiebreaker" + "[tiebreaker-type='" + fmt.Sprintf("%v", tiebreaker.TiebreakerType) + "']"
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = tiebreaker.TiebreakerType
    leafs["tiebreaker-index"] = tiebreaker.TiebreakerIndex
    return leafs
}

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleName() string { return "cisco_ios_xr" }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetYangName() string { return "tiebreaker" }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) SetParent(parent types.Entity) { tiebreaker.parent = parent }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParent() types.Entity { return tiebreaker.parent }

func (tiebreaker *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroute_PerPrefix_Tiebreakers_Tiebreaker) GetParentYangName() string { return "tiebreakers" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Distance
// Define an administrative distance
type Ospfv3_Processes_Process_Vrfs_Vrf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Define an administrative distance. The type is interface{} with range:
    // 1..255.
    Administrative interface{}

    // OSPFv3 administrative distance.
    Ospfv3 Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetGoName(yname string) string {
    if yname == "administrative" { return "Administrative" }
    if yname == "ospfv3" { return "Ospfv3" }
    return ""
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospfv3" {
        return &distance.Ospfv3
    }
    return nil
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ospfv3"] = &distance.Ospfv3
    return children
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["administrative"] = distance.Administrative
    return leafs
}

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetYangName() string { return "distance" }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Ospfv3_Processes_Process_Vrfs_Vrf_Distance) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3
// OSPFv3 administrative distance
type Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for intra-area routes. The type is interface{} with range: 1..255.
    IntraArea interface{}

    // Distance for inter-area routes. The type is interface{} with range: 1..255.
    InterArea interface{}

    // Distance for external type 5 and type 7 routes. The type is interface{}
    // with range: 1..255.
    External interface{}
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetGoName(yname string) string {
    if yname == "intra-area" { return "IntraArea" }
    if yname == "inter-area" { return "InterArea" }
    if yname == "external" { return "External" }
    return ""
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetSegmentPath() string {
    return "ospfv3"
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["intra-area"] = ospfv3.IntraArea
    leafs["inter-area"] = ospfv3.InterArea
    leafs["external"] = ospfv3.External
    return leafs
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Distance_Ospfv3) GetParentYangName() string { return "distance" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Maximum
// Set OSPFv3 limits
type Ospfv3_Processes_Process_Vrfs_Vrf_Maximum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify maximum number of interfaces. The type is interface{} with range:
    // 1..4294967295.
    Interfaces interface{}

    // Specify maximum number of paths per route. The type is interface{} with
    // range: 1..64.
    Paths interface{}

    // Limit number of redistributed prefixes.
    RedistributedPrefixes Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetFilter() yfilter.YFilter { return maximum.YFilter }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) SetFilter(yf yfilter.YFilter) { maximum.YFilter = yf }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "paths" { return "Paths" }
    if yname == "redistributed-prefixes" { return "RedistributedPrefixes" }
    return ""
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetSegmentPath() string {
    return "maximum"
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistributed-prefixes" {
        return &maximum.RedistributedPrefixes
    }
    return nil
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["redistributed-prefixes"] = &maximum.RedistributedPrefixes
    return children
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interfaces"] = maximum.Interfaces
    leafs["paths"] = maximum.Paths
    return leafs
}

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetBundleName() string { return "cisco_ios_xr" }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetYangName() string { return "maximum" }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) SetParent(parent types.Entity) { maximum.parent = parent }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetParent() types.Entity { return maximum.parent }

func (maximum *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes
// Limit number of redistributed prefixes
type Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of prefixes redistributed to protocol. The type is
    // interface{} with range: 1..4294967295.
    Prefixes interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100.
    Threshold interface{}

    // Only give warning message when limit is exceeded. The type is interface{}.
    WarningOnly interface{}
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetFilter() yfilter.YFilter { return redistributedPrefixes.YFilter }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) SetFilter(yf yfilter.YFilter) { redistributedPrefixes.YFilter = yf }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetGoName(yname string) string {
    if yname == "prefixes" { return "Prefixes" }
    if yname == "threshold" { return "Threshold" }
    if yname == "warning-only" { return "WarningOnly" }
    return ""
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetSegmentPath() string {
    return "redistributed-prefixes"
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefixes"] = redistributedPrefixes.Prefixes
    leafs["threshold"] = redistributedPrefixes.Threshold
    leafs["warning-only"] = redistributedPrefixes.WarningOnly
    return leafs
}

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetYangName() string { return "redistributed-prefixes" }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) SetParent(parent types.Entity) { redistributedPrefixes.parent = parent }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetParent() types.Entity { return redistributedPrefixes.parent }

func (redistributedPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_Maximum_RedistributedPrefixes) GetParentYangName() string { return "maximum" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes
// Redistribute information from another routing
// protocol
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute information from another routing protocol. The type is slice
    // of Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute.
    Redistribute []Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetFilter() yfilter.YFilter { return redistributes.YFilter }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) SetFilter(yf yfilter.YFilter) { redistributes.YFilter = yf }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetGoName(yname string) string {
    if yname == "redistribute" { return "Redistribute" }
    return ""
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetSegmentPath() string {
    return "redistributes"
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribute" {
        for _, c := range redistributes.Redistribute {
            if redistributes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute{}
        redistributes.Redistribute = append(redistributes.Redistribute, child)
        return &redistributes.Redistribute[len(redistributes.Redistribute)-1]
    }
    return nil
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributes.Redistribute {
        children[redistributes.Redistribute[i].GetSegmentPath()] = &redistributes.Redistribute[i]
    }
    return children
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetBundleName() string { return "cisco_ios_xr" }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetYangName() string { return "redistributes" }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) SetParent(parent types.Entity) { redistributes.parent = parent }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetParent() types.Entity { return redistributes.parent }

func (redistributes *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute
// Redistribute information from another routing
// protocol
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Protocol. The type is Ospfv3ProtocolType2.
    ProtocolName interface{}

    // connected or static or subscriber or mobile.
    ConnectedOrStaticOrSubscriberOrMobile Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile

    // bgp. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp.
    Bgp []Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp

    // ospfv3 or isis or application. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication.
    Ospfv3OrIsisOrApplication []Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication

    // eigrp. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp.
    Eigrp []Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetFilter() yfilter.YFilter { return redistribute.YFilter }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) SetFilter(yf yfilter.YFilter) { redistribute.YFilter = yf }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "connected-or-static-or-subscriber-or-mobile" { return "ConnectedOrStaticOrSubscriberOrMobile" }
    if yname == "bgp" { return "Bgp" }
    if yname == "ospfv3-or-isis-or-application" { return "Ospfv3OrIsisOrApplication" }
    if yname == "eigrp" { return "Eigrp" }
    return ""
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetSegmentPath() string {
    return "redistribute" + "[protocol-name='" + fmt.Sprintf("%v", redistribute.ProtocolName) + "']"
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-or-static-or-subscriber-or-mobile" {
        return &redistribute.ConnectedOrStaticOrSubscriberOrMobile
    }
    if childYangName == "bgp" {
        for _, c := range redistribute.Bgp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp{}
        redistribute.Bgp = append(redistribute.Bgp, child)
        return &redistribute.Bgp[len(redistribute.Bgp)-1]
    }
    if childYangName == "ospfv3-or-isis-or-application" {
        for _, c := range redistribute.Ospfv3OrIsisOrApplication {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication{}
        redistribute.Ospfv3OrIsisOrApplication = append(redistribute.Ospfv3OrIsisOrApplication, child)
        return &redistribute.Ospfv3OrIsisOrApplication[len(redistribute.Ospfv3OrIsisOrApplication)-1]
    }
    if childYangName == "eigrp" {
        for _, c := range redistribute.Eigrp {
            if redistribute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp{}
        redistribute.Eigrp = append(redistribute.Eigrp, child)
        return &redistribute.Eigrp[len(redistribute.Eigrp)-1]
    }
    return nil
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected-or-static-or-subscriber-or-mobile"] = &redistribute.ConnectedOrStaticOrSubscriberOrMobile
    for i := range redistribute.Bgp {
        children[redistribute.Bgp[i].GetSegmentPath()] = &redistribute.Bgp[i]
    }
    for i := range redistribute.Ospfv3OrIsisOrApplication {
        children[redistribute.Ospfv3OrIsisOrApplication[i].GetSegmentPath()] = &redistribute.Ospfv3OrIsisOrApplication[i]
    }
    for i := range redistribute.Eigrp {
        children[redistribute.Eigrp[i].GetSegmentPath()] = &redistribute.Eigrp[i]
    }
    return children
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribute.ProtocolName
    return leafs
}

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetYangName() string { return "redistribute" }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) SetParent(parent types.Entity) { redistribute.parent = parent }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetParent() types.Entity { return redistribute.parent }

func (redistribute *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute) GetParentYangName() string { return "redistributes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile
// connected or static or subscriber or mobile
// This type is a presence type.
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetFilter() yfilter.YFilter { return connectedOrStaticOrSubscriberOrMobile.YFilter }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) SetFilter(yf yfilter.YFilter) { connectedOrStaticOrSubscriberOrMobile.YFilter = yf }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetGoName(yname string) string {
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetSegmentPath() string {
    return "connected-or-static-or-subscriber-or-mobile"
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["internal-route-type"] = connectedOrStaticOrSubscriberOrMobile.InternalRouteType
    leafs["default-metric"] = connectedOrStaticOrSubscriberOrMobile.DefaultMetric
    leafs["metric-type"] = connectedOrStaticOrSubscriberOrMobile.MetricType
    leafs["tag"] = connectedOrStaticOrSubscriberOrMobile.Tag
    leafs["route-policy-name"] = connectedOrStaticOrSubscriberOrMobile.RoutePolicyName
    leafs["external-route-type"] = connectedOrStaticOrSubscriberOrMobile.ExternalRouteType
    leafs["nssa-external-route-type"] = connectedOrStaticOrSubscriberOrMobile.NssaExternalRouteType
    leafs["redistribute-route"] = connectedOrStaticOrSubscriberOrMobile.RedistributeRoute
    leafs["isis-route-type"] = connectedOrStaticOrSubscriberOrMobile.IsisRouteType
    leafs["eigrp-route-type"] = connectedOrStaticOrSubscriberOrMobile.EigrpRouteType
    leafs["preserve-med"] = connectedOrStaticOrSubscriberOrMobile.PreserveMed
    leafs["preserve-med-info"] = connectedOrStaticOrSubscriberOrMobile.PreserveMedInfo
    return leafs
}

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetBundleName() string { return "cisco_ios_xr" }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetYangName() string { return "connected-or-static-or-subscriber-or-mobile" }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) SetParent(parent types.Entity) { connectedOrStaticOrSubscriberOrMobile.parent = parent }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetParent() types.Entity { return connectedOrStaticOrSubscriberOrMobile.parent }

func (connectedOrStaticOrSubscriberOrMobile *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_ConnectedOrStaticOrSubscriberOrMobile) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp
// bgp
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 0..65535.
    AsXx interface{}

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - second
    // half (Y), or 2-byte AS number, or 4-byte AS number in asplain format. The
    // type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetSegmentPath() string {
    return "bgp" + "[as-xx='" + fmt.Sprintf("%v", bgp.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", bgp.AsYy) + "']"
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = bgp.AsXx
    leafs["as-yy"] = bgp.AsYy
    leafs["internal-route-type"] = bgp.InternalRouteType
    leafs["default-metric"] = bgp.DefaultMetric
    leafs["metric-type"] = bgp.MetricType
    leafs["tag"] = bgp.Tag
    leafs["route-policy-name"] = bgp.RoutePolicyName
    leafs["external-route-type"] = bgp.ExternalRouteType
    leafs["nssa-external-route-type"] = bgp.NssaExternalRouteType
    leafs["redistribute-route"] = bgp.RedistributeRoute
    leafs["isis-route-type"] = bgp.IsisRouteType
    leafs["eigrp-route-type"] = bgp.EigrpRouteType
    leafs["preserve-med"] = bgp.PreserveMed
    leafs["preserve-med-info"] = bgp.PreserveMedInfo
    return leafs
}

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetYangName() string { return "bgp" }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Bgp) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication
// ospfv3 or isis or application
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ISIS process name if protocol is ISIS, or OSPFv3
    // process name if protocol is OSPFv3. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetFilter() yfilter.YFilter { return ospfv3OrIsisOrApplication.YFilter }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) SetFilter(yf yfilter.YFilter) { ospfv3OrIsisOrApplication.YFilter = yf }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetGoName(yname string) string {
    if yname == "process-name" { return "ProcessName" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetSegmentPath() string {
    return "ospfv3-or-isis-or-application" + "[process-name='" + fmt.Sprintf("%v", ospfv3OrIsisOrApplication.ProcessName) + "']"
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["process-name"] = ospfv3OrIsisOrApplication.ProcessName
    leafs["internal-route-type"] = ospfv3OrIsisOrApplication.InternalRouteType
    leafs["default-metric"] = ospfv3OrIsisOrApplication.DefaultMetric
    leafs["metric-type"] = ospfv3OrIsisOrApplication.MetricType
    leafs["tag"] = ospfv3OrIsisOrApplication.Tag
    leafs["route-policy-name"] = ospfv3OrIsisOrApplication.RoutePolicyName
    leafs["external-route-type"] = ospfv3OrIsisOrApplication.ExternalRouteType
    leafs["nssa-external-route-type"] = ospfv3OrIsisOrApplication.NssaExternalRouteType
    leafs["redistribute-route"] = ospfv3OrIsisOrApplication.RedistributeRoute
    leafs["isis-route-type"] = ospfv3OrIsisOrApplication.IsisRouteType
    leafs["eigrp-route-type"] = ospfv3OrIsisOrApplication.EigrpRouteType
    leafs["preserve-med"] = ospfv3OrIsisOrApplication.PreserveMed
    leafs["preserve-med-info"] = ospfv3OrIsisOrApplication.PreserveMedInfo
    return leafs
}

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetYangName() string { return "ospfv3-or-isis-or-application" }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) SetParent(parent types.Entity) { ospfv3OrIsisOrApplication.parent = parent }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetParent() types.Entity { return ospfv3OrIsisOrApplication.parent }

func (ospfv3OrIsisOrApplication *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Ospfv3OrIsisOrApplication) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp
// eigrp
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 0..65535.
    AsXx interface{}

    // Redistribute OSPFv3 routes. The type is Ospfv3InternalRoute.
    InternalRouteType interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    DefaultMetric interface{}

    // OSPFv3 exterior metric type for redistributed routes. The type is
    // Ospfv3Metric.
    MetricType interface{}

    // Tag for routes redistributed into OSPFv3. The type is interface{} with
    // range: 0..4294967295.
    Tag interface{}

    // Route policy to redistribution. The type is string.
    RoutePolicyName interface{}

    // Redistribute OSPFv3 external routes. The type is Ospfv3ExternalRoute.
    ExternalRouteType interface{}

    // Redistribute OSPFv3 NSSA external routes. The type is
    // Ospfv3nssaExternalRoute.
    NssaExternalRouteType interface{}

    // Redistribution of OSPFv3 routes. The type is bool.
    RedistributeRoute interface{}

    // ISIS route type. The type is Ospfv3isisRoute.
    IsisRouteType interface{}

    // EIGRP route type. The type is Ospfv3EigrpRoute.
    EigrpRouteType interface{}

    // Preserve (Multi-Exit Discriminator) of BGP routes. The type is interface{}.
    PreserveMed interface{}

    // Preserve Information (Multi-Exit Discriminator) of BGP routes. The type is
    // interface{}.
    PreserveMedInfo interface{}
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetFilter() yfilter.YFilter { return eigrp.YFilter }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) SetFilter(yf yfilter.YFilter) { eigrp.YFilter = yf }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "internal-route-type" { return "InternalRouteType" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "external-route-type" { return "ExternalRouteType" }
    if yname == "nssa-external-route-type" { return "NssaExternalRouteType" }
    if yname == "redistribute-route" { return "RedistributeRoute" }
    if yname == "isis-route-type" { return "IsisRouteType" }
    if yname == "eigrp-route-type" { return "EigrpRouteType" }
    if yname == "preserve-med" { return "PreserveMed" }
    if yname == "preserve-med-info" { return "PreserveMedInfo" }
    return ""
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetSegmentPath() string {
    return "eigrp" + "[as-xx='" + fmt.Sprintf("%v", eigrp.AsXx) + "']"
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = eigrp.AsXx
    leafs["internal-route-type"] = eigrp.InternalRouteType
    leafs["default-metric"] = eigrp.DefaultMetric
    leafs["metric-type"] = eigrp.MetricType
    leafs["tag"] = eigrp.Tag
    leafs["route-policy-name"] = eigrp.RoutePolicyName
    leafs["external-route-type"] = eigrp.ExternalRouteType
    leafs["nssa-external-route-type"] = eigrp.NssaExternalRouteType
    leafs["redistribute-route"] = eigrp.RedistributeRoute
    leafs["isis-route-type"] = eigrp.IsisRouteType
    leafs["eigrp-route-type"] = eigrp.EigrpRouteType
    leafs["preserve-med"] = eigrp.PreserveMed
    leafs["preserve-med-info"] = eigrp.PreserveMedInfo
    return leafs
}

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetBundleName() string { return "cisco_ios_xr" }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetYangName() string { return "eigrp" }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) SetParent(parent types.Entity) { eigrp.parent = parent }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetParent() types.Entity { return eigrp.parent }

func (eigrp *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributes_Redistribute_Eigrp) GetParentYangName() string { return "redistribute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Ignore
// Do not complain about a specified event
type Ospfv3_Processes_Process_Vrfs_Vrf_Ignore struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Do not complain upon receiving LSA of the specified type.
    Lsa Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetFilter() yfilter.YFilter { return ignore.YFilter }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) SetFilter(yf yfilter.YFilter) { ignore.YFilter = yf }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetSegmentPath() string {
    return "ignore"
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        return &ignore.Lsa
    }
    return nil
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa"] = &ignore.Lsa
    return children
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetBundleName() string { return "cisco_ios_xr" }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetYangName() string { return "ignore" }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) SetParent(parent types.Entity) { ignore.parent = parent }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetParent() types.Entity { return ignore.parent }

func (ignore *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa
// Do not complain upon receiving LSA of the
// specified type
type Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable ignore of MOSPF type 6 LSA. The type is interface{}.
    Mospf interface{}
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetGoName(yname string) string {
    if yname == "mospf" { return "Mospf" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mospf"] = lsa.Mospf
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Ignore_Lsa) GetParentYangName() string { return "ignore" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut
// Filter prefixes from RIB 
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter generated type-5 LSAs.
    DistributeOuts Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetFilter() yfilter.YFilter { return distributeListOut.YFilter }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) SetFilter(yf yfilter.YFilter) { distributeListOut.YFilter = yf }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetGoName(yname string) string {
    if yname == "distribute-outs" { return "DistributeOuts" }
    return ""
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetSegmentPath() string {
    return "distribute-list-out"
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-outs" {
        return &distributeListOut.DistributeOuts
    }
    return nil
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["distribute-outs"] = &distributeListOut.DistributeOuts
    return children
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetBundleName() string { return "cisco_ios_xr" }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetYangName() string { return "distribute-list-out" }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) SetParent(parent types.Entity) { distributeListOut.parent = parent }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetParent() types.Entity { return distributeListOut.parent }

func (distributeListOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts
// Filter generated type-5 LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter generated type-5 LSAs. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut.
    DistributeOut []Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetFilter() yfilter.YFilter { return distributeOuts.YFilter }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) SetFilter(yf yfilter.YFilter) { distributeOuts.YFilter = yf }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetGoName(yname string) string {
    if yname == "distribute-out" { return "DistributeOut" }
    return ""
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetSegmentPath() string {
    return "distribute-outs"
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "distribute-out" {
        for _, c := range distributeOuts.DistributeOut {
            if distributeOuts.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut{}
        distributeOuts.DistributeOut = append(distributeOuts.DistributeOut, child)
        return &distributeOuts.DistributeOut[len(distributeOuts.DistributeOut)-1]
    }
    return nil
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range distributeOuts.DistributeOut {
        children[distributeOuts.DistributeOut[i].GetSegmentPath()] = &distributeOuts.DistributeOut[i]
    }
    return children
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetBundleName() string { return "cisco_ios_xr" }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetYangName() string { return "distribute-outs" }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) SetParent(parent types.Entity) { distributeOuts.parent = parent }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetParent() types.Entity { return distributeOuts.parent }

func (distributeOuts *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts) GetParentYangName() string { return "distribute-list-out" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut
// Filter generated type-5 LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. none. The type is Ospfv3Protocol.
    ProtocolName interface{}

    // keys: as-yy, as-xx, process-name. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName.
    AsYyAndAsXxAndProcessName []Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetFilter() yfilter.YFilter { return distributeOut.YFilter }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) SetFilter(yf yfilter.YFilter) { distributeOut.YFilter = yf }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "as-yy-and-as-xx-and-process-name" { return "AsYyAndAsXxAndProcessName" }
    return ""
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetSegmentPath() string {
    return "distribute-out" + "[protocol-name='" + fmt.Sprintf("%v", distributeOut.ProtocolName) + "']"
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as-yy-and-as-xx-and-process-name" {
        for _, c := range distributeOut.AsYyAndAsXxAndProcessName {
            if distributeOut.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName{}
        distributeOut.AsYyAndAsXxAndProcessName = append(distributeOut.AsYyAndAsXxAndProcessName, child)
        return &distributeOut.AsYyAndAsXxAndProcessName[len(distributeOut.AsYyAndAsXxAndProcessName)-1]
    }
    return nil
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range distributeOut.AsYyAndAsXxAndProcessName {
        children[distributeOut.AsYyAndAsXxAndProcessName[i].GetSegmentPath()] = &distributeOut.AsYyAndAsXxAndProcessName[i]
    }
    return children
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = distributeOut.ProtocolName
    return leafs
}

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetBundleName() string { return "cisco_ios_xr" }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetYangName() string { return "distribute-out" }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) SetParent(parent types.Entity) { distributeOut.parent = parent }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetParent() types.Entity { return distributeOut.parent }

func (distributeOut *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut) GetParentYangName() string { return "distribute-outs" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName
// keys: as-yy, as-xx, process-name
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - second
    // half (Y), or 2-byte AS number, or 4-byte AS number in asplain format. The
    // type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // This attribute is a key. 4-byte AS number in asdot (X.Y) format - first
    // half (X). The type is interface{} with range: 1..65535.
    AsXx interface{}

    // This attribute is a key. If ISIS or OSPFv3, specify the instance name. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Prefix-list name. The type is string. This attribute is mandatory.
    PrefixList interface{}
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetFilter() yfilter.YFilter { return asYyAndAsXxAndProcessName.YFilter }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) SetFilter(yf yfilter.YFilter) { asYyAndAsXxAndProcessName.YFilter = yf }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetGoName(yname string) string {
    if yname == "as-yy" { return "AsYy" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetSegmentPath() string {
    return "as-yy-and-as-xx-and-process-name" + "[as-yy='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.AsYy) + "']" + "[as-xx='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.AsXx) + "']" + "[process-name='" + fmt.Sprintf("%v", asYyAndAsXxAndProcessName.ProcessName) + "']"
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-yy"] = asYyAndAsXxAndProcessName.AsYy
    leafs["as-xx"] = asYyAndAsXxAndProcessName.AsXx
    leafs["process-name"] = asYyAndAsXxAndProcessName.ProcessName
    leafs["prefix-list"] = asYyAndAsXxAndProcessName.PrefixList
    return leafs
}

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetBundleName() string { return "cisco_ios_xr" }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetYangName() string { return "as-yy-and-as-xx-and-process-name" }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) SetParent(parent types.Entity) { asYyAndAsXxAndProcessName.parent = parent }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetParent() types.Entity { return asYyAndAsXxAndProcessName.parent }

func (asYyAndAsXxAndProcessName *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeListOut_DistributeOuts_DistributeOut_AsYyAndAsXxAndProcessName) GetParentYangName() string { return "distribute-out" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList
// Filter prefixes to/from RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes installed to RIB.
    In Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetFilter() yfilter.YFilter { return distributeList.YFilter }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) SetFilter(yf yfilter.YFilter) { distributeList.YFilter = yf }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetGoName(yname string) string {
    if yname == "in" { return "In" }
    return ""
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetSegmentPath() string {
    return "distribute-list"
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "in" {
        return &distributeList.In
    }
    return nil
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["in"] = &distributeList.In
    return children
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetBundleName() string { return "cisco_ios_xr" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetYangName() string { return "distribute-list" }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) SetParent(parent types.Entity) { distributeList.parent = parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetParent() types.Entity { return distributeList.parent }

func (distributeList *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In
// Filter prefixes installed to RIB
type Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Filter prefixes based on an IPv6 prefix-list. The type is string.
    PrefixList interface{}
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetFilter() yfilter.YFilter { return in.YFilter }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) SetFilter(yf yfilter.YFilter) { in.YFilter = yf }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetGoName(yname string) string {
    if yname == "prefix-list" { return "PrefixList" }
    return ""
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetSegmentPath() string {
    return "in"
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-list"] = in.PrefixList
    return leafs
}

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetBundleName() string { return "cisco_ios_xr" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetYangName() string { return "in" }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) SetParent(parent types.Entity) { in.parent = parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetParent() types.Entity { return in.parent }

func (in *Ospfv3_Processes_Process_Vrfs_Vrf_DistributeList_In) GetParentYangName() string { return "distribute-list" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter
// Stub router configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub router R-bit configuration.
    Rbit Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit

    // Stub router V6-bit configuration.
    V6Bit Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit

    // Stub router max-metric configuration.
    MaxMetric Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetFilter() yfilter.YFilter { return stubRouter.YFilter }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) SetFilter(yf yfilter.YFilter) { stubRouter.YFilter = yf }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetGoName(yname string) string {
    if yname == "rbit" { return "Rbit" }
    if yname == "v6bit" { return "V6Bit" }
    if yname == "max-metric" { return "MaxMetric" }
    return ""
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetSegmentPath() string {
    return "stub-router"
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rbit" {
        return &stubRouter.Rbit
    }
    if childYangName == "v6bit" {
        return &stubRouter.V6Bit
    }
    if childYangName == "max-metric" {
        return &stubRouter.MaxMetric
    }
    return nil
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rbit"] = &stubRouter.Rbit
    children["v6bit"] = &stubRouter.V6Bit
    children["max-metric"] = &stubRouter.MaxMetric
    return children
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetBundleName() string { return "cisco_ios_xr" }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetYangName() string { return "stub-router" }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) SetParent(parent types.Entity) { stubRouter.parent = parent }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetParent() types.Entity { return stubRouter.parent }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit
// Stub router R-bit configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetFilter() yfilter.YFilter { return rbit.YFilter }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) SetFilter(yf yfilter.YFilter) { rbit.YFilter = yf }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetSegmentPath() string {
    return "rbit"
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &rbit.OnStartup
    }
    return nil
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &rbit.OnStartup
    return children
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = rbit.OnSwitchover
    leafs["always"] = rbit.Always
    leafs["external-lsa"] = rbit.ExternalLsa
    leafs["include-stub"] = rbit.IncludeStub
    leafs["enable"] = rbit.Enable
    leafs["on-proc-migration"] = rbit.OnProcMigration
    leafs["on-proc-restart"] = rbit.OnProcRestart
    leafs["summary-lsa"] = rbit.SummaryLsa
    return leafs
}

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetBundleName() string { return "cisco_ios_xr" }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetYangName() string { return "rbit" }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) SetParent(parent types.Entity) { rbit.parent = parent }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetParent() types.Entity { return rbit.parent }

func (rbit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_Rbit_OnStartup) GetParentYangName() string { return "rbit" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit
// Stub router V6-bit configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetFilter() yfilter.YFilter { return v6Bit.YFilter }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) SetFilter(yf yfilter.YFilter) { v6Bit.YFilter = yf }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetSegmentPath() string {
    return "v6bit"
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &v6Bit.OnStartup
    }
    return nil
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &v6Bit.OnStartup
    return children
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = v6Bit.OnSwitchover
    leafs["always"] = v6Bit.Always
    leafs["external-lsa"] = v6Bit.ExternalLsa
    leafs["include-stub"] = v6Bit.IncludeStub
    leafs["enable"] = v6Bit.Enable
    leafs["on-proc-migration"] = v6Bit.OnProcMigration
    leafs["on-proc-restart"] = v6Bit.OnProcRestart
    leafs["summary-lsa"] = v6Bit.SummaryLsa
    return leafs
}

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetBundleName() string { return "cisco_ios_xr" }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetYangName() string { return "v6bit" }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) SetParent(parent types.Entity) { v6Bit.parent = parent }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetParent() types.Entity { return v6Bit.parent }

func (v6Bit *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_V6Bit_OnStartup) GetParentYangName() string { return "v6bit" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric
// Stub router max-metric configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnSwitchover interface{}

    // Unconditionally enter stub router operational state. The type is
    // interface{}.
    Always interface{}

    // Advertise external LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    ExternalLsa interface{}

    // Advertise stub links with maximum metric in stub router mode. The type is
    // interface{}.
    IncludeStub interface{}

    // Enabled stub router configuration mode. The type is interface{}.
    Enable interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcMigration interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    OnProcRestart interface{}

    // Advertise summary LSAs with modified metric in stub router mode. The type
    // is interface{} with range: 1..16777214. The default value is 16711680.
    SummaryLsa interface{}

    // Enter stub router operational state on startup.
    OnStartup Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetFilter() yfilter.YFilter { return maxMetric.YFilter }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) SetFilter(yf yfilter.YFilter) { maxMetric.YFilter = yf }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetGoName(yname string) string {
    if yname == "on-switchover" { return "OnSwitchover" }
    if yname == "always" { return "Always" }
    if yname == "external-lsa" { return "ExternalLsa" }
    if yname == "include-stub" { return "IncludeStub" }
    if yname == "enable" { return "Enable" }
    if yname == "on-proc-migration" { return "OnProcMigration" }
    if yname == "on-proc-restart" { return "OnProcRestart" }
    if yname == "summary-lsa" { return "SummaryLsa" }
    if yname == "on-startup" { return "OnStartup" }
    return ""
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetSegmentPath() string {
    return "max-metric"
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "on-startup" {
        return &maxMetric.OnStartup
    }
    return nil
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["on-startup"] = &maxMetric.OnStartup
    return children
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["on-switchover"] = maxMetric.OnSwitchover
    leafs["always"] = maxMetric.Always
    leafs["external-lsa"] = maxMetric.ExternalLsa
    leafs["include-stub"] = maxMetric.IncludeStub
    leafs["enable"] = maxMetric.Enable
    leafs["on-proc-migration"] = maxMetric.OnProcMigration
    leafs["on-proc-restart"] = maxMetric.OnProcRestart
    leafs["summary-lsa"] = maxMetric.SummaryLsa
    return leafs
}

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetBundleName() string { return "cisco_ios_xr" }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetYangName() string { return "max-metric" }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) SetParent(parent types.Entity) { maxMetric.parent = parent }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetParent() types.Entity { return maxMetric.parent }

func (maxMetric *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup
// Enter stub router operational state on startup
type Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait until BGP converges (only applicable to default VRF). The type is
    // bool. The default value is false.
    WaitForBgp interface{}

    // Time (in seconds) to stay in stub router operational state. The type is
    // interface{} with range: 5..86400. Units are second.
    WaitTime interface{}
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetFilter() yfilter.YFilter { return onStartup.YFilter }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) SetFilter(yf yfilter.YFilter) { onStartup.YFilter = yf }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetGoName(yname string) string {
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "wait-time" { return "WaitTime" }
    return ""
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetSegmentPath() string {
    return "on-startup"
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-for-bgp"] = onStartup.WaitForBgp
    leafs["wait-time"] = onStartup.WaitTime
    return leafs
}

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetBundleName() string { return "cisco_ios_xr" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetYangName() string { return "on-startup" }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) SetParent(parent types.Entity) { onStartup.parent = parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetParent() types.Entity { return onStartup.parent }

func (onStartup *Ospfv3_Processes_Process_Vrfs_Vrf_StubRouter_MaxMetric_OnStartup) GetParentYangName() string { return "max-metric" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Bfd
// Configure BFD parameters
type Ospfv3_Processes_Process_Vrfs_Vrf_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Hello interval in milli-seconds. The type is interface{} with range:
    // 3..30000. Units are millisecond.
    Interval interface{}

    // Detect multiplier. The type is interface{} with range: 2..50.
    DetectionMultiplier interface{}

    // Enable or disable BFD fast detection. The type is Ospfv3bfdEnableMode.
    FastDetectMode interface{}
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "fast-detect-mode" { return "FastDetectMode" }
    return ""
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = bfd.Interval
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["fast-detect-mode"] = bfd.FastDetectMode
    return leafs
}

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetYangName() string { return "bfd" }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Ospfv3_Processes_Process_Vrfs_Vrf_Bfd) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter
// Database filter
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All.
    All Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetFilter() yfilter.YFilter { return databaseFilter.YFilter }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) SetFilter(yf yfilter.YFilter) { databaseFilter.YFilter = yf }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    return ""
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetSegmentPath() string {
    return "database-filter"
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "all" {
        return &databaseFilter.All
    }
    return nil
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["all"] = &databaseFilter.All
    return children
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetBundleName() string { return "cisco_ios_xr" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetYangName() string { return "database-filter" }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) SetParent(parent types.Entity) { databaseFilter.parent = parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetParent() types.Entity { return databaseFilter.parent }

func (databaseFilter *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All
// All
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable out. The type is interface{}.
    Out interface{}
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetFilter() yfilter.YFilter { return all.YFilter }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) SetFilter(yf yfilter.YFilter) { all.YFilter = yf }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetGoName(yname string) string {
    if yname == "out" { return "Out" }
    return ""
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetSegmentPath() string {
    return "all"
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out"] = all.Out
    return leafs
}

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetBundleName() string { return "cisco_ios_xr" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetYangName() string { return "all" }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) SetParent(parent types.Entity) { all.parent = parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetParent() types.Entity { return all.parent }

func (all *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseFilter_All) GetParentYangName() string { return "database-filter" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Authentication
// Authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_Authentication struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec AH authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Use the MD5 or SHA1 algorithm. The type is Ospfv3Authentication.
    Algorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    Password interface{}
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetFilter() yfilter.YFilter { return authentication.YFilter }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) SetFilter(yf yfilter.YFilter) { authentication.YFilter = yf }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "algorithm" { return "Algorithm" }
    if yname == "password" { return "Password" }
    return ""
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetSegmentPath() string {
    return "authentication"
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = authentication.Enable
    leafs["spi"] = authentication.Spi
    leafs["algorithm"] = authentication.Algorithm
    leafs["password"] = authentication.Password
    return leafs
}

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetBundleName() string { return "cisco_ios_xr" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetYangName() string { return "authentication" }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) SetParent(parent types.Entity) { authentication.parent = parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetParent() types.Entity { return authentication.parent }

func (authentication *Ospfv3_Processes_Process_Vrfs_Vrf_Authentication) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart
// Graceful restart configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum interval between graceful restarts (seconds). The type is
    // interface{} with range: 90..3600. Units are second.
    Interval interface{}

    // Terminate graceful restart helper mode if LSA changed. The type is
    // interface{}.
    StrictLsaChecking interface{}

    // Disable router's helper support. The type is interface{}.
    Helper interface{}

    // Enable graceful restart. The type is interface{}.
    Enable interface{}

    // Maximum route lifetime following restart (seconds). The type is interface{}
    // with range: 90..1800. Units are second.
    Lifetime interface{}
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetFilter() yfilter.YFilter { return gracefulRestart.YFilter }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) SetFilter(yf yfilter.YFilter) { gracefulRestart.YFilter = yf }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "strict-lsa-checking" { return "StrictLsaChecking" }
    if yname == "helper" { return "Helper" }
    if yname == "enable" { return "Enable" }
    if yname == "lifetime" { return "Lifetime" }
    return ""
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetSegmentPath() string {
    return "graceful-restart"
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = gracefulRestart.Interval
    leafs["strict-lsa-checking"] = gracefulRestart.StrictLsaChecking
    leafs["helper"] = gracefulRestart.Helper
    leafs["enable"] = gracefulRestart.Enable
    leafs["lifetime"] = gracefulRestart.Lifetime
    return leafs
}

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetYangName() string { return "graceful-restart" }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) SetParent(parent types.Entity) { gracefulRestart.parent = parent }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetParent() types.Entity { return gracefulRestart.parent }

func (gracefulRestart *Ospfv3_Processes_Process_Vrfs_Vrf_GracefulRestart) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation
// Control distribution of default information
type Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distribute a default route.
    Originate Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetFilter() yfilter.YFilter { return defaultInformation.YFilter }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) SetFilter(yf yfilter.YFilter) { defaultInformation.YFilter = yf }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetGoName(yname string) string {
    if yname == "originate" { return "Originate" }
    return ""
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetSegmentPath() string {
    return "default-information"
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "originate" {
        return &defaultInformation.Originate
    }
    return nil
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["originate"] = &defaultInformation.Originate
    return children
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetBundleName() string { return "cisco_ios_xr" }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetYangName() string { return "default-information" }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) SetParent(parent types.Entity) { defaultInformation.parent = parent }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetParent() types.Entity { return defaultInformation.parent }

func (defaultInformation *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate
// Distribute a default route
// This type is a presence type.
type Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Always advertise default route. The type is bool. This attribute is
    // mandatory.
    Always interface{}

    // OSPFv3 default metric. The type is interface{} with range: 0..16777214.
    Metric interface{}

    // OSPFv3 metric type for default routes. The type is interface{} with range:
    // 1..2.
    MetricType interface{}

    // Tag for default route. The type is interface{} with range: 0..4294967295.
    Tag interface{}

    // Route policy to default-information origination. The type is string.
    RoutePolicyName interface{}
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetFilter() yfilter.YFilter { return originate.YFilter }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) SetFilter(yf yfilter.YFilter) { originate.YFilter = yf }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetGoName(yname string) string {
    if yname == "always" { return "Always" }
    if yname == "metric" { return "Metric" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tag" { return "Tag" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetSegmentPath() string {
    return "originate"
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["always"] = originate.Always
    leafs["metric"] = originate.Metric
    leafs["metric-type"] = originate.MetricType
    leafs["tag"] = originate.Tag
    leafs["route-policy-name"] = originate.RoutePolicyName
    return leafs
}

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetBundleName() string { return "cisco_ios_xr" }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetYangName() string { return "originate" }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) SetParent(parent types.Entity) { originate.parent = parent }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetParent() types.Entity { return originate.parent }

func (originate *Ospfv3_Processes_Process_Vrfs_Vrf_DefaultInformation_Originate) GetParentYangName() string { return "default-information" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope
// Process scope configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Fast-reroute configuration.
    FastReroute Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetFilter() yfilter.YFilter { return processScope.YFilter }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) SetFilter(yf yfilter.YFilter) { processScope.YFilter = yf }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetSegmentPath() string {
    return "process-scope"
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        return &processScope.FastReroute
    }
    return nil
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fast-reroute"] = &processScope.FastReroute
    return children
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetBundleName() string { return "cisco_ios_xr" }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetYangName() string { return "process-scope" }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) SetParent(parent types.Entity) { processScope.parent = parent }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetParent() types.Entity { return processScope.parent }

func (processScope *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute
// Fast-reroute configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/Disable Fast-reroute per-link or per-prefix. The type is
    // Ospfv3FastReroute.
    FastRerouteEnable interface{}

    // Fast-reroute per-link configuration.
    PerLink Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink

    // Fast-reroute per-link configuration.
    PerPrefix Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetGoName(yname string) string {
    if yname == "fast-reroute-enable" { return "FastRerouteEnable" }
    if yname == "per-link" { return "PerLink" }
    if yname == "per-prefix" { return "PerPrefix" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "per-link" {
        return &fastReroute.PerLink
    }
    if childYangName == "per-prefix" {
        return &fastReroute.PerPrefix
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["per-link"] = &fastReroute.PerLink
    children["per-prefix"] = &fastReroute.PerPrefix
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-enable"] = fastReroute.FastRerouteEnable
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute) GetParentYangName() string { return "process-scope" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetFilter() yfilter.YFilter { return perLink.YFilter }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) SetFilter(yf yfilter.YFilter) { perLink.YFilter = yf }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetSegmentPath() string {
    return "per-link"
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perLink.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perLink.ExcludeInterfaces
    }
    return nil
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perLink.CandidateInterfaces
    children["exclude-interfaces"] = &perLink.ExcludeInterfaces
    return children
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perLink.FastRerouteUseCandidateOnly
    return leafs
}

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetBundleName() string { return "cisco_ios_xr" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetYangName() string { return "per-link" }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) SetParent(parent types.Entity) { perLink.parent = parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetParent() types.Entity { return perLink.parent }

func (perLink *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces) GetParentYangName() string { return "per-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerLink_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix
// Fast-reroute per-link configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Use only interfaces on the candidate list as a backup path. The type is
    // bool. The default value is false.
    FastRerouteUseCandidateOnly interface{}

    // Fast-reroute per-link/per-prefix candidate interface configuration.
    CandidateInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces

    // Fast-reroute per-link/per-prefix exclude interface configuration.
    ExcludeInterfaces Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetFilter() yfilter.YFilter { return perPrefix.YFilter }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) SetFilter(yf yfilter.YFilter) { perPrefix.YFilter = yf }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetGoName(yname string) string {
    if yname == "fast-reroute-use-candidate-only" { return "FastRerouteUseCandidateOnly" }
    if yname == "candidate-interfaces" { return "CandidateInterfaces" }
    if yname == "exclude-interfaces" { return "ExcludeInterfaces" }
    return ""
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetSegmentPath() string {
    return "per-prefix"
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interfaces" {
        return &perPrefix.CandidateInterfaces
    }
    if childYangName == "exclude-interfaces" {
        return &perPrefix.ExcludeInterfaces
    }
    return nil
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["candidate-interfaces"] = &perPrefix.CandidateInterfaces
    children["exclude-interfaces"] = &perPrefix.ExcludeInterfaces
    return children
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fast-reroute-use-candidate-only"] = perPrefix.FastRerouteUseCandidateOnly
    return leafs
}

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetYangName() string { return "per-prefix" }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) SetParent(parent types.Entity) { perPrefix.parent = parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetParent() types.Entity { return perPrefix.parent }

func (perPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces
// Fast-reroute per-link/per-prefix candidate
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Candidate backup interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface.
    CandidateInterface []Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetFilter() yfilter.YFilter { return candidateInterfaces.YFilter }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetFilter(yf yfilter.YFilter) { candidateInterfaces.YFilter = yf }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetGoName(yname string) string {
    if yname == "candidate-interface" { return "CandidateInterface" }
    return ""
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetSegmentPath() string {
    return "candidate-interfaces"
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "candidate-interface" {
        for _, c := range candidateInterfaces.CandidateInterface {
            if candidateInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface{}
        candidateInterfaces.CandidateInterface = append(candidateInterfaces.CandidateInterface, child)
        return &candidateInterfaces.CandidateInterface[len(candidateInterfaces.CandidateInterface)-1]
    }
    return nil
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range candidateInterfaces.CandidateInterface {
        children[candidateInterfaces.CandidateInterface[i].GetSegmentPath()] = &candidateInterfaces.CandidateInterface[i]
    }
    return children
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetYangName() string { return "candidate-interfaces" }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) SetParent(parent types.Entity) { candidateInterfaces.parent = parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParent() types.Entity { return candidateInterfaces.parent }

func (candidateInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface
// Candidate backup interface
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetFilter() yfilter.YFilter { return candidateInterface.YFilter }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetFilter(yf yfilter.YFilter) { candidateInterface.YFilter = yf }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetSegmentPath() string {
    return "candidate-interface" + "[interface-name='" + fmt.Sprintf("%v", candidateInterface.InterfaceName) + "']"
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = candidateInterface.InterfaceName
    return leafs
}

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleName() string { return "cisco_ios_xr" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetYangName() string { return "candidate-interface" }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) SetParent(parent types.Entity) { candidateInterface.parent = parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParent() types.Entity { return candidateInterface.parent }

func (candidateInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_CandidateInterfaces_CandidateInterface) GetParentYangName() string { return "candidate-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces
// Fast-reroute per-link/per-prefix exclude
// interface configuration
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Exclude an interface from becoming a backup. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface.
    ExcludeInterface []Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetFilter() yfilter.YFilter { return excludeInterfaces.YFilter }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetFilter(yf yfilter.YFilter) { excludeInterfaces.YFilter = yf }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetGoName(yname string) string {
    if yname == "exclude-interface" { return "ExcludeInterface" }
    return ""
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetSegmentPath() string {
    return "exclude-interfaces"
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "exclude-interface" {
        for _, c := range excludeInterfaces.ExcludeInterface {
            if excludeInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface{}
        excludeInterfaces.ExcludeInterface = append(excludeInterfaces.ExcludeInterface, child)
        return &excludeInterfaces.ExcludeInterface[len(excludeInterfaces.ExcludeInterface)-1]
    }
    return nil
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range excludeInterfaces.ExcludeInterface {
        children[excludeInterfaces.ExcludeInterface[i].GetSegmentPath()] = &excludeInterfaces.ExcludeInterface[i]
    }
    return children
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetYangName() string { return "exclude-interfaces" }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) SetParent(parent types.Entity) { excludeInterfaces.parent = parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParent() types.Entity { return excludeInterfaces.parent }

func (excludeInterfaces *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces) GetParentYangName() string { return "per-prefix" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface
// Exclude an interface from becoming a backup
type Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetFilter() yfilter.YFilter { return excludeInterface.YFilter }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetFilter(yf yfilter.YFilter) { excludeInterface.YFilter = yf }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetSegmentPath() string {
    return "exclude-interface" + "[interface-name='" + fmt.Sprintf("%v", excludeInterface.InterfaceName) + "']"
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = excludeInterface.InterfaceName
    return leafs
}

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleName() string { return "cisco_ios_xr" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetYangName() string { return "exclude-interface" }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) SetParent(parent types.Entity) { excludeInterface.parent = parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParent() types.Entity { return excludeInterface.parent }

func (excludeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProcessScope_FastReroute_PerPrefix_ExcludeInterfaces_ExcludeInterface) GetParentYangName() string { return "exclude-interfaces" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Encryption
// Encrypt and authenticate OSPFv3 packets
type Ospfv3_Processes_Process_Vrfs_Vrf_Encryption struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Authenticate packets. The type is bool.
    Enable interface{}

    // Use IPSec ESP authentication. Specify the Security Parameter Index (SPI)
    // value. The type is interface{} with range: 256..4294967295.
    Spi interface{}

    // Specify the encryption algorithm. The type is Ospfv3EncryptionAlgorithm.
    EncryptionAlgorithm interface{}

    // Encryption password. The type is string with pattern: (!.+)|([^!].+).
    EncryptionPassword interface{}

    // Use the NULL, MD5 or SHA1 algorithm. The type is Ospfv3AuthenticationType2.
    AuthenticationAlgorithm interface{}

    // Specify MD5 or SHA1 password. The type is string with pattern:
    // (!.+)|([^!].+).
    AuthenticationPassword interface{}
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetFilter() yfilter.YFilter { return encryption.YFilter }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) SetFilter(yf yfilter.YFilter) { encryption.YFilter = yf }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "spi" { return "Spi" }
    if yname == "encryption-algorithm" { return "EncryptionAlgorithm" }
    if yname == "encryption-password" { return "EncryptionPassword" }
    if yname == "authentication-algorithm" { return "AuthenticationAlgorithm" }
    if yname == "authentication-password" { return "AuthenticationPassword" }
    return ""
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetSegmentPath() string {
    return "encryption"
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = encryption.Enable
    leafs["spi"] = encryption.Spi
    leafs["encryption-algorithm"] = encryption.EncryptionAlgorithm
    leafs["encryption-password"] = encryption.EncryptionPassword
    leafs["authentication-algorithm"] = encryption.AuthenticationAlgorithm
    leafs["authentication-password"] = encryption.AuthenticationPassword
    return leafs
}

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetBundleName() string { return "cisco_ios_xr" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetYangName() string { return "encryption" }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) SetParent(parent types.Entity) { encryption.parent = parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetParent() types.Entity { return encryption.parent }

func (encryption *Ospfv3_Processes_Process_Vrfs_Vrf_Encryption) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost
// Calculate interface cost according to bandwidth
// This type is a presence type.
type Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify 'true' to assign cost based on interface type. The type is
    // interface{}.
    Disable interface{}

    // Specify reference bandwidth for cost computations in terms of Mbits per
    // second. The type is interface{} with range: 1..4294967. Units are Mbit/s.
    ReferenceBandwidth interface{}
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetFilter() yfilter.YFilter { return autoCost.YFilter }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) SetFilter(yf yfilter.YFilter) { autoCost.YFilter = yf }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetGoName(yname string) string {
    if yname == "disable" { return "Disable" }
    if yname == "reference-bandwidth" { return "ReferenceBandwidth" }
    return ""
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetSegmentPath() string {
    return "auto-cost"
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["disable"] = autoCost.Disable
    leafs["reference-bandwidth"] = autoCost.ReferenceBandwidth
    return leafs
}

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetBundleName() string { return "cisco_ios_xr" }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetYangName() string { return "auto-cost" }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) SetParent(parent types.Entity) { autoCost.parent = parent }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetParent() types.Entity { return autoCost.parent }

func (autoCost *Ospfv3_Processes_Process_Vrfs_Vrf_AutoCost) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Af
// Address Family (AF)
// This type is a presence type.
type Ospfv3_Processes_Process_Af struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address Family (AF) identifier. The type is Ospfv3AddressFamily. This
    // attribute is mandatory.
    AfName interface{}

    // Subsequent Address Family (SAF) identifier. The type is
    // Ospfv3SubsequentAddressFamily.
    SafName interface{}
}

func (af *Ospfv3_Processes_Process_Af) GetFilter() yfilter.YFilter { return af.YFilter }

func (af *Ospfv3_Processes_Process_Af) SetFilter(yf yfilter.YFilter) { af.YFilter = yf }

func (af *Ospfv3_Processes_Process_Af) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "saf-name" { return "SafName" }
    return ""
}

func (af *Ospfv3_Processes_Process_Af) GetSegmentPath() string {
    return "af"
}

func (af *Ospfv3_Processes_Process_Af) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (af *Ospfv3_Processes_Process_Af) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (af *Ospfv3_Processes_Process_Af) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = af.AfName
    leafs["saf-name"] = af.SafName
    return leafs
}

func (af *Ospfv3_Processes_Process_Af) GetBundleName() string { return "cisco_ios_xr" }

func (af *Ospfv3_Processes_Process_Af) GetYangName() string { return "af" }

func (af *Ospfv3_Processes_Process_Af) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (af *Ospfv3_Processes_Process_Af) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (af *Ospfv3_Processes_Process_Af) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (af *Ospfv3_Processes_Process_Af) SetParent(parent types.Entity) { af.parent = parent }

func (af *Ospfv3_Processes_Process_Af) GetParent() types.Entity { return af.parent }

func (af *Ospfv3_Processes_Process_Af) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_TraceBufs
// Configuration to change size of trace buffer
type Ospfv3_Processes_Process_TraceBufs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Changes the size of the specified trace buffer. The type is slice of
    // Ospfv3_Processes_Process_TraceBufs_TraceBuf.
    TraceBuf []Ospfv3_Processes_Process_TraceBufs_TraceBuf
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetFilter() yfilter.YFilter { return traceBufs.YFilter }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) SetFilter(yf yfilter.YFilter) { traceBufs.YFilter = yf }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetGoName(yname string) string {
    if yname == "trace-buf" { return "TraceBuf" }
    return ""
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetSegmentPath() string {
    return "trace-bufs"
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trace-buf" {
        for _, c := range traceBufs.TraceBuf {
            if traceBufs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_TraceBufs_TraceBuf{}
        traceBufs.TraceBuf = append(traceBufs.TraceBuf, child)
        return &traceBufs.TraceBuf[len(traceBufs.TraceBuf)-1]
    }
    return nil
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range traceBufs.TraceBuf {
        children[traceBufs.TraceBuf[i].GetSegmentPath()] = &traceBufs.TraceBuf[i]
    }
    return children
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetBundleName() string { return "cisco_ios_xr" }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetYangName() string { return "trace-bufs" }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) SetParent(parent types.Entity) { traceBufs.parent = parent }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetParent() types.Entity { return traceBufs.parent }

func (traceBufs *Ospfv3_Processes_Process_TraceBufs) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_TraceBufs_TraceBuf
// Changes the size of the specified trace
// buffer
type Ospfv3_Processes_Process_TraceBufs_TraceBuf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Name for this trace buffer. The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    TraceBufName interface{}

    // Buffer size. The type is Ospfv3TraceBufSize. This attribute is mandatory.
    Bufsize interface{}
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetFilter() yfilter.YFilter { return traceBuf.YFilter }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) SetFilter(yf yfilter.YFilter) { traceBuf.YFilter = yf }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetGoName(yname string) string {
    if yname == "trace-buf-name" { return "TraceBufName" }
    if yname == "bufsize" { return "Bufsize" }
    return ""
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetSegmentPath() string {
    return "trace-buf" + "[trace-buf-name='" + fmt.Sprintf("%v", traceBuf.TraceBufName) + "']"
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trace-buf-name"] = traceBuf.TraceBufName
    leafs["bufsize"] = traceBuf.Bufsize
    return leafs
}

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetBundleName() string { return "cisco_ios_xr" }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetYangName() string { return "trace-buf" }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) SetParent(parent types.Entity) { traceBuf.parent = parent }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetParent() types.Entity { return traceBuf.parent }

func (traceBuf *Ospfv3_Processes_Process_TraceBufs_TraceBuf) GetParentYangName() string { return "trace-bufs" }

