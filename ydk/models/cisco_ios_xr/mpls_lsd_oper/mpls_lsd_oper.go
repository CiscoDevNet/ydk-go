// This module contains a collection of YANG definitions
// for Cisco IOS-XR mpls-lsd package operational data.
// 
// This module contains definitions
// for the following management objects:
//   mpls-lsd-nodes: Location MPLS LSD operational data
//   mpls-lsd: mpls lsd
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package mpls_lsd_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package mpls_lsd_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-oper mpls-lsd-nodes}", reflect.TypeOf(MplsLsdNodes{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes", reflect.TypeOf(MplsLsdNodes{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-oper mpls-lsd}", reflect.TypeOf(MplsLsd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd", reflect.TypeOf(MplsLsd{}))
}

// MgmtLsdClient represents Mgmt lsd client
type MgmtLsdClient string

const (
    // Application
    MgmtLsdClient_mgmt_lsd_client_type_app MgmtLsdClient = "mgmt-lsd-client-type-app"

    // BCDL Agent
    MgmtLsdClient_mgmt_lsd_client_type_ba MgmtLsdClient = "mgmt-lsd-client-type-ba"
)

// MgmtLsdFrrState represents Mgmt lsd frr state
type MgmtLsdFrrState string

const (
    // Partial
    MgmtLsdFrrState_mgmt_lsd_frr_state_partial MgmtLsdFrrState = "mgmt-lsd-frr-state-partial"

    // Active
    MgmtLsdFrrState_mgmt_lsd_frr_state_active MgmtLsdFrrState = "mgmt-lsd-frr-state-active"

    // Ready
    MgmtLsdFrrState_mgmt_lsd_frr_state_ready MgmtLsdFrrState = "mgmt-lsd-frr-state-ready"

    // Complete
    MgmtLsdFrrState_mgmt_lsd_frr_state_complete MgmtLsdFrrState = "mgmt-lsd-frr-state-complete"

    // Any
    MgmtLsdFrrState_mgmt_lsd_frr_state_any MgmtLsdFrrState = "mgmt-lsd-frr-state-any"

    // IGP
    MgmtLsdFrrState_mgmt_lsd_frr_state_igp MgmtLsdFrrState = "mgmt-lsd-frr-state-igp"
)

// MgmtLsdMoi represents Mgmt lsd moi
type MgmtLsdMoi string

const (
    // Pop-and-lookup IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_ipv4 MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-ipv4"

    // IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv4 MgmtLsdMoi = "mgmt-lsd-moi-type-ipv4"

    // IPv6
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv6 MgmtLsdMoi = "mgmt-lsd-moi-type-ipv6"

    // TE IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_tev4 MgmtLsdMoi = "mgmt-lsd-moi-type-tev4"

    // PW
    MgmtLsdMoi_mgmt_lsd_moi_type_pw MgmtLsdMoi = "mgmt-lsd-moi-type-pw"

    // Pop-and-lookup IPv6
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_ipv6 MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-ipv6"

    // IP Subscriber
    MgmtLsdMoi_mgmt_lsd_moi_type_ip_sub MgmtLsdMoi = "mgmt-lsd-moi-type-ip-sub"

    // PW HE
    MgmtLsdMoi_mgmt_lsd_moi_type_pwhe MgmtLsdMoi = "mgmt-lsd-moi-type-pwhe"

    // PW List
    MgmtLsdMoi_mgmt_lsd_moi_type_pw_list MgmtLsdMoi = "mgmt-lsd-moi-type-pw-list"

    // IPv4 Multi-Label
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv4_stack MgmtLsdMoi = "mgmt-lsd-moi-type-ipv4-stack"

    // Pop-and-lookup TP
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_tp MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-tp"

    // IPv6 Multi-Label
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv6_stack MgmtLsdMoi = "mgmt-lsd-moi-type-ipv6-stack"

    // TE Head
    MgmtLsdMoi_mgmt_lsd_moi_type_te_head MgmtLsdMoi = "mgmt-lsd-moi-type-te-head"

    // Demand Matrix Traffic-Collector
    MgmtLsdMoi_mgmt_lsd_moi_type_dmtc_ext_intf MgmtLsdMoi = "mgmt-lsd-moi-type-dmtc-ext-intf"

    // IPv4 Next-Next-Hop
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv4_nnh_stack MgmtLsdMoi = "mgmt-lsd-moi-type-ipv4-nnh-stack"
)

// MgmtLsdFpi represents Mgmt lsd fpi
type MgmtLsdFpi string

const (
    // Label
    MgmtLsdFpi_mgmt_lsd_fpi_type_label MgmtLsdFpi = "mgmt-lsd-fpi-type-label"

    // TE
    MgmtLsdFpi_mgmt_lsd_fpi_type_te MgmtLsdFpi = "mgmt-lsd-fpi-type-te"

    // IPv4
    MgmtLsdFpi_mgmt_lsd_fpi_type_ipv4 MgmtLsdFpi = "mgmt-lsd-fpi-type-ipv4"

    // IPv6
    MgmtLsdFpi_mgmt_lsd_fpi_type_ipv6 MgmtLsdFpi = "mgmt-lsd-fpi-type-ipv6"

    // PW List
    MgmtLsdFpi_mgmt_lsd_fpi_type_pw_list MgmtLsdFpi = "mgmt-lsd-fpi-type-pw-list"

    // TE v2
    MgmtLsdFpi_mgmt_lsd_fpi_type_te_v2 MgmtLsdFpi = "mgmt-lsd-fpi-type-te-v2"

    // DMTC External Interface
    MgmtLsdFpi_mgmt_lsd_fpi_type_dmtc_ext_intf MgmtLsdFpi = "mgmt-lsd-fpi-type-dmtc-ext-intf"
)

// MgmtLsdLblCtx represents Mgmt lsd lbl ctx
type MgmtLsdLblCtx string

const (
    // None
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_none MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-none"

    // IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ipv4"

    // IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ipv6"

    // TE IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tev4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tev4"

    // L3VPN IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-ipv4"

    // L3VPN IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-ipv6"

    // L3VPN Per-VRF
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_vrf MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-vrf"

    // L3VPN IPv4 Per-CE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_cev4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-cev4"

    // L3VPN IPv6 Per-CE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_cev6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-cev6"

    // PW
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pw MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pw"

    // LBL BLK
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk"

    // IP SUB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ip_sub MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ip-sub"

    // TE IPv4 P2MP
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tev4_p2mp MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tev4-p2mp"

    // MLDP IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_mldpv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-mldpv4"

    // PW HE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pwhe MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pwhe"

    // MPLS TP
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tp MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tp"

    // GRE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_gre MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-gre"

    // EVPN
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_evpn MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-evpn"

    // BLB IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_blb_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-blb-ipv4"

    // BLB IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_blb_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-blb-ipv6"

    // PIM I-PMSI
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pim_i_pmsi MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pim-i-pmsi"

    // PIM S-PMSI
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pim_s_pmsi MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pim-s-pmsi"

    // L3VPN NH SET
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_nh_set MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-nh-set"

    // SR Prefix Segment
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_pfx_seg MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-pfx-seg"

    // SR Adj Segment IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv4"

    // SR Adj Segment IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv6"

    // LBL BLK SRGB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk_srgb MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk-srgb"

    // TE Binding
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_te_binding MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-te-binding"

    // GRE IPV6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_gre_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-gre-ipv6"

    // Any
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_any MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-any"

    // LBL BLK SRLB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk_srlb MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk-srlb"
)

// MgmtLsdLspRole represents Mgmt lsd lsp role
type MgmtLsdLspRole string

const (
    // Head
    MgmtLsdLspRole_mgmt_lsd_lsp_role_head MgmtLsdLspRole = "mgmt-lsd-lsp-role-head"

    // Midpoint
    MgmtLsdLspRole_mgmt_lsd_lsp_role_mid MgmtLsdLspRole = "mgmt-lsd-lsp-role-mid"
)

// MgmtLsdAppRsrcState represents Mgmt lsd app rsrc state
type MgmtLsdAppRsrcState string

const (
    // Active
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_active MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-active"

    // Pending
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_pnd MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-pnd"

    // Pending Server
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_pnd_svr MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-pnd-svr"
)

// MplsLsdNnh represents Mpls lsd nnh
type MplsLsdNnh string

const (
    // None - Invalid
    MplsLsdNnh_none MplsLsdNnh = "none"

    // IPv4 Address
    MplsLsdNnh_ipv4_address MplsLsdNnh = "ipv4-address"

    // Interface
    MplsLsdNnh_interface_name MplsLsdNnh = "interface-name"
)

// MgmtLsdApp represents Mgmt lsd app
type MgmtLsdApp string

const (
    // None
    MgmtLsdApp_mgmt_lsd_app_type_none MgmtLsdApp = "mgmt-lsd-app-type-none"

    // LSD
    MgmtLsdApp_mgmt_lsd_app_type_int MgmtLsdApp = "mgmt-lsd-app-type-int"

    // Test
    MgmtLsdApp_mgmt_lsd_app_type_test MgmtLsdApp = "mgmt-lsd-app-type-test"

    // Static
    MgmtLsdApp_mgmt_lsd_app_type_static MgmtLsdApp = "mgmt-lsd-app-type-static"

    // LDP
    MgmtLsdApp_mgmt_lsd_app_type_ldp MgmtLsdApp = "mgmt-lsd-app-type-ldp"

    // TE Control
    MgmtLsdApp_mgmt_lsd_app_type_te MgmtLsdApp = "mgmt-lsd-app-type-te"

    // App Controller
    MgmtLsdApp_mgmt_lsd_app_type_app_controller MgmtLsdApp = "mgmt-lsd-app-type-app-controller"

    // BGP v4
    MgmtLsdApp_mgmt_lsd_app_type_bgp_ipv4 MgmtLsdApp = "mgmt-lsd-app-type-bgp-ipv4"

    // BGP VPNv4
    MgmtLsdApp_mgmt_lsd_app_type_bgp_vpn_ipv4 MgmtLsdApp = "mgmt-lsd-app-type-bgp-vpn-ipv4"

    // L2VPN
    MgmtLsdApp_mgmt_lsd_app_type_l2vpn MgmtLsdApp = "mgmt-lsd-app-type-l2vpn"

    // BGP Spkr
    MgmtLsdApp_mgmt_lsd_app_type_bgp_spkr MgmtLsdApp = "mgmt-lsd-app-type-bgp-spkr"

    // BFD
    MgmtLsdApp_mgmt_lsd_app_type_bfd MgmtLsdApp = "mgmt-lsd-app-type-bfd"

    // PIM
    MgmtLsdApp_mgmt_lsd_app_type_pim MgmtLsdApp = "mgmt-lsd-app-type-pim"

    // V2 LSD
    MgmtLsdApp_mgmt_lsd_app_type_v2_lsd MgmtLsdApp = "mgmt-lsd-app-type-v2-lsd"

    // PIM6
    MgmtLsdApp_mgmt_lsd_app_type_pim6 MgmtLsdApp = "mgmt-lsd-app-type-pim6"

    // ISIS
    MgmtLsdApp_mgmt_lsd_app_type_isis MgmtLsdApp = "mgmt-lsd-app-type-isis"

    // OSPF
    MgmtLsdApp_mgmt_lsd_app_type_ospf MgmtLsdApp = "mgmt-lsd-app-type-ospf"

    // CGN
    MgmtLsdApp_mgmt_lsd_app_type_cgn MgmtLsdApp = "mgmt-lsd-app-type-cgn"

    // Traffic Collector
    MgmtLsdApp_mgmt_lsd_app_type_dmtc MgmtLsdApp = "mgmt-lsd-app-type-dmtc"

    // Any
    MgmtLsdApp_mgmt_lsd_app_type_any MgmtLsdApp = "mgmt-lsd-app-type-any"
)

// MgmtLsdTeBinding represents Mgmt lsd te binding
type MgmtLsdTeBinding string

const (
    // mgmt lsd ident p2p tun id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2p_tun_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2p-tun-id"

    // mgmt lsd ident p2p grp id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2p_grp_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2p-grp-id"

    // mgmt lsd ident p2mp tun id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2mp_tun_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2mp-tun-id"

    // mgmt lsd ident p2mp grp id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2mp_grp_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2mp-grp-id"
)

// MgmtLsdAppState represents Mgmt lsd app state
type MgmtLsdAppState string

const (
    // Active
    MgmtLsdAppState_mgmt_lsd_app_state_active MgmtLsdAppState = "mgmt-lsd-app-state-active"

    // Zombie
    MgmtLsdAppState_mgmt_lsd_app_state_zombie MgmtLsdAppState = "mgmt-lsd-app-state-zombie"

    // Recover
    MgmtLsdAppState_mgmt_lsd_app_state_recover MgmtLsdAppState = "mgmt-lsd-app-state-recover"
)

// MgmtLsdIntfState represents Mgmt lsd intf state
type MgmtLsdIntfState string

const (
    // unknown
    MgmtLsdIntfState_mgmt_lsd_intf_state_unknown MgmtLsdIntfState = "mgmt-lsd-intf-state-unknown"

    // up
    MgmtLsdIntfState_mgmt_lsd_intf_state_up MgmtLsdIntfState = "mgmt-lsd-intf-state-up"

    // down
    MgmtLsdIntfState_mgmt_lsd_intf_state_down MgmtLsdIntfState = "mgmt-lsd-intf-state-down"
)

// MgmtLsdRwId represents Mgmt lsd rw id
type MgmtLsdRwId string

const (
    // None
    MgmtLsdRwId_mgmt_lsd_rw_id_type_none MgmtLsdRwId = "mgmt-lsd-rw-id-type-none"

    // Label Context
    MgmtLsdRwId_mgmt_lsd_rw_id_type_lbl_ctx MgmtLsdRwId = "mgmt-lsd-rw-id-type-lbl-ctx"

    // Local Label
    MgmtLsdRwId_mgmt_lsd_rw_id_type_loc_lbl MgmtLsdRwId = "mgmt-lsd-rw-id-type-loc-lbl"
)

// MplsLsdNodes
// Location MPLS LSD operational data
type MplsLsdNodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The MPLS LSD operational data for a particular node. The type is slice of
    // MplsLsdNodes_MplsLsdNode.
    MplsLsdNode []*MplsLsdNodes_MplsLsdNode
}

func (mplsLsdNodes *MplsLsdNodes) GetEntityData() *types.CommonEntityData {
    mplsLsdNodes.EntityData.YFilter = mplsLsdNodes.YFilter
    mplsLsdNodes.EntityData.YangName = "mpls-lsd-nodes"
    mplsLsdNodes.EntityData.BundleName = "cisco_ios_xr"
    mplsLsdNodes.EntityData.ParentYangName = "Cisco-IOS-XR-mpls-lsd-oper"
    mplsLsdNodes.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes"
    mplsLsdNodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsLsdNodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsLsdNodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsLsdNodes.EntityData.Children = types.NewOrderedMap()
    mplsLsdNodes.EntityData.Children.Append("mpls-lsd-node", types.YChild{"MplsLsdNode", nil})
    for i := range mplsLsdNodes.MplsLsdNode {
        mplsLsdNodes.EntityData.Children.Append(types.GetSegmentPath(mplsLsdNodes.MplsLsdNode[i]), types.YChild{"MplsLsdNode", mplsLsdNodes.MplsLsdNode[i]})
    }
    mplsLsdNodes.EntityData.Leafs = types.NewOrderedMap()

    mplsLsdNodes.EntityData.YListKeys = []string {}

    return &(mplsLsdNodes.EntityData)
}

// MplsLsdNodes_MplsLsdNode
// The MPLS LSD operational data for a particular
// node
type MplsLsdNodes_MplsLsdNode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The identifier for the node. The type is string
    // with pattern: ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Table of MPLS clients using LSD.
    Clients MplsLsdNodes_MplsLsdNode_Clients

    // Dynamic label range.
    LabelSummary MplsLsdNodes_MplsLsdNode_LabelSummary

    // Table of labels.
    Labels MplsLsdNodes_MplsLsdNode_Labels

    // FRR database.
    FrrDatabase MplsLsdNodes_MplsLsdNode_FrrDatabase

    // Table of rewrites.
    Rewrite MplsLsdNodes_MplsLsdNode_Rewrite

    // Rewrite Summary .
    RewriteSummary MplsLsdNodes_MplsLsdNode_RewriteSummary

    // Table of MPLS applications using LSD.
    Applications MplsLsdNodes_MplsLsdNode_Applications

    // Dynamic label range summary by VRF.
    LabelSummaryVrfs MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs

    // Label range.
    LabelRange MplsLsdNodes_MplsLsdNode_LabelRange

    // Rewrite Summary by VRF.
    RewriteSummaryVrfs MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs

    // Table of MPLS interfaces.
    Interfaces MplsLsdNodes_MplsLsdNode_Interfaces
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetEntityData() *types.CommonEntityData {
    mplsLsdNode.EntityData.YFilter = mplsLsdNode.YFilter
    mplsLsdNode.EntityData.YangName = "mpls-lsd-node"
    mplsLsdNode.EntityData.BundleName = "cisco_ios_xr"
    mplsLsdNode.EntityData.ParentYangName = "mpls-lsd-nodes"
    mplsLsdNode.EntityData.SegmentPath = "mpls-lsd-node" + types.AddKeyToken(mplsLsdNode.NodeName, "node-name")
    mplsLsdNode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsLsdNode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsLsdNode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsLsdNode.EntityData.Children = types.NewOrderedMap()
    mplsLsdNode.EntityData.Children.Append("clients", types.YChild{"Clients", &mplsLsdNode.Clients})
    mplsLsdNode.EntityData.Children.Append("label-summary", types.YChild{"LabelSummary", &mplsLsdNode.LabelSummary})
    mplsLsdNode.EntityData.Children.Append("labels", types.YChild{"Labels", &mplsLsdNode.Labels})
    mplsLsdNode.EntityData.Children.Append("frr-database", types.YChild{"FrrDatabase", &mplsLsdNode.FrrDatabase})
    mplsLsdNode.EntityData.Children.Append("rewrite", types.YChild{"Rewrite", &mplsLsdNode.Rewrite})
    mplsLsdNode.EntityData.Children.Append("rewrite-summary", types.YChild{"RewriteSummary", &mplsLsdNode.RewriteSummary})
    mplsLsdNode.EntityData.Children.Append("applications", types.YChild{"Applications", &mplsLsdNode.Applications})
    mplsLsdNode.EntityData.Children.Append("label-summary-vrfs", types.YChild{"LabelSummaryVrfs", &mplsLsdNode.LabelSummaryVrfs})
    mplsLsdNode.EntityData.Children.Append("label-range", types.YChild{"LabelRange", &mplsLsdNode.LabelRange})
    mplsLsdNode.EntityData.Children.Append("rewrite-summary-vrfs", types.YChild{"RewriteSummaryVrfs", &mplsLsdNode.RewriteSummaryVrfs})
    mplsLsdNode.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &mplsLsdNode.Interfaces})
    mplsLsdNode.EntityData.Leafs = types.NewOrderedMap()
    mplsLsdNode.EntityData.Leafs.Append("node-name", types.YLeaf{"NodeName", mplsLsdNode.NodeName})

    mplsLsdNode.EntityData.YListKeys = []string {"NodeName"}

    return &(mplsLsdNode.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Clients
// Table of MPLS clients using LSD
type MplsLsdNodes_MplsLsdNode_Clients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS client using LSD. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Clients_Client.
    Client []*MplsLsdNodes_MplsLsdNode_Clients_Client
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetEntityData() *types.CommonEntityData {
    clients.EntityData.YFilter = clients.YFilter
    clients.EntityData.YangName = "clients"
    clients.EntityData.BundleName = "cisco_ios_xr"
    clients.EntityData.ParentYangName = "mpls-lsd-node"
    clients.EntityData.SegmentPath = "clients"
    clients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clients.EntityData.Children = types.NewOrderedMap()
    clients.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range clients.Client {
        clients.EntityData.Children.Append(types.GetSegmentPath(clients.Client[i]), types.YChild{"Client", clients.Client[i]})
    }
    clients.EntityData.Leafs = types.NewOrderedMap()

    clients.EntityData.YListKeys = []string {}

    return &(clients.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Clients_Client
// Data for MPLS client using LSD
type MplsLsdNodes_MplsLsdNode_Clients_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Client Instance name in the form of    
    // 'Application-<client_name>' or      'BCDL_Agent-<index:parent_index>'. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ClientName interface{}

    // Client Index Value. The type is interface{} with range: 0..4294967295.
    ClientIndex interface{}

    // Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Client union.
    ClientUnion MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "clients"
    client.EntityData.SegmentPath = "client" + types.AddKeyToken(client.ClientName, "client-name")
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Children.Append("client-union", types.YChild{"ClientUnion", &client.ClientUnion})
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("client-name", types.YLeaf{"ClientName", client.ClientName})
    client.EntityData.Leafs.Append("client-index", types.YLeaf{"ClientIndex", client.ClientIndex})
    client.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", client.NodeId})

    client.EntityData.YListKeys = []string {"ClientName"}

    return &(client.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion
// Client union
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSDClientType. The type is MgmtLsdClient.
    LsdClientType interface{}

    // Application client.
    Application MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application

    // BCDL agent client.
    BcdlAgent MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetEntityData() *types.CommonEntityData {
    clientUnion.EntityData.YFilter = clientUnion.YFilter
    clientUnion.EntityData.YangName = "client-union"
    clientUnion.EntityData.BundleName = "cisco_ios_xr"
    clientUnion.EntityData.ParentYangName = "client"
    clientUnion.EntityData.SegmentPath = "client-union"
    clientUnion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clientUnion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clientUnion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clientUnion.EntityData.Children = types.NewOrderedMap()
    clientUnion.EntityData.Children.Append("application", types.YChild{"Application", &clientUnion.Application})
    clientUnion.EntityData.Children.Append("bcdl-agent", types.YChild{"BcdlAgent", &clientUnion.BcdlAgent})
    clientUnion.EntityData.Leafs = types.NewOrderedMap()
    clientUnion.EntityData.Leafs.Append("lsd-client-type", types.YLeaf{"LsdClientType", clientUnion.LsdClientType})

    clientUnion.EntityData.YListKeys = []string {}

    return &(clientUnion.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application
// Application client
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "client-union"
    application.EntityData.SegmentPath = "application"
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", application.ApplicationName})
    application.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", application.ApplicationType})
    application.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", application.ApplicationInstance})
    application.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", application.ApplicationRolePrimary})

    application.EntityData.YListKeys = []string {}

    return &(application.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent
// BCDL agent client
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BCDL Agent client connection index. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientConnIndex interface{}

    // BCDL Agent parent client connection index. The type is interface{} with
    // range: -2147483648..2147483647.
    ParentClientConnIndex interface{}
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetEntityData() *types.CommonEntityData {
    bcdlAgent.EntityData.YFilter = bcdlAgent.YFilter
    bcdlAgent.EntityData.YangName = "bcdl-agent"
    bcdlAgent.EntityData.BundleName = "cisco_ios_xr"
    bcdlAgent.EntityData.ParentYangName = "client-union"
    bcdlAgent.EntityData.SegmentPath = "bcdl-agent"
    bcdlAgent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bcdlAgent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bcdlAgent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bcdlAgent.EntityData.Children = types.NewOrderedMap()
    bcdlAgent.EntityData.Leafs = types.NewOrderedMap()
    bcdlAgent.EntityData.Leafs.Append("client-conn-index", types.YLeaf{"ClientConnIndex", bcdlAgent.ClientConnIndex})
    bcdlAgent.EntityData.Leafs.Append("parent-client-conn-index", types.YLeaf{"ParentClientConnIndex", bcdlAgent.ParentClientConnIndex})

    bcdlAgent.EntityData.YListKeys = []string {}

    return &(bcdlAgent.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelSummary
// Dynamic label range
type MplsLsdNodes_MplsLsdNode_LabelSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount.
    OwnerCount []*MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetEntityData() *types.CommonEntityData {
    labelSummary.EntityData.YFilter = labelSummary.YFilter
    labelSummary.EntityData.YangName = "label-summary"
    labelSummary.EntityData.BundleName = "cisco_ios_xr"
    labelSummary.EntityData.ParentYangName = "mpls-lsd-node"
    labelSummary.EntityData.SegmentPath = "label-summary"
    labelSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummary.EntityData.Children = types.NewOrderedMap()
    labelSummary.EntityData.Children.Append("owner-count", types.YChild{"OwnerCount", nil})
    for i := range labelSummary.OwnerCount {
        labelSummary.EntityData.Children.Append(types.GetSegmentPath(labelSummary.OwnerCount[i]), types.YChild{"OwnerCount", labelSummary.OwnerCount[i]})
    }
    labelSummary.EntityData.Leafs = types.NewOrderedMap()
    labelSummary.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", labelSummary.VrfNameXr})
    labelSummary.EntityData.Leafs.Append("total-labels", types.YLeaf{"TotalLabels", labelSummary.TotalLabels})
    labelSummary.EntityData.Leafs.Append("rsi-connected", types.YLeaf{"RsiConnected", labelSummary.RsiConnected})

    labelSummary.EntityData.YListKeys = []string {}

    return &(labelSummary.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount
// Owner counts
type MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetEntityData() *types.CommonEntityData {
    ownerCount.EntityData.YFilter = ownerCount.YFilter
    ownerCount.EntityData.YangName = "owner-count"
    ownerCount.EntityData.BundleName = "cisco_ios_xr"
    ownerCount.EntityData.ParentYangName = "label-summary"
    ownerCount.EntityData.SegmentPath = "owner-count"
    ownerCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ownerCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ownerCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ownerCount.EntityData.Children = types.NewOrderedMap()
    ownerCount.EntityData.Leafs = types.NewOrderedMap()
    ownerCount.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", ownerCount.ApplicationType})
    ownerCount.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", ownerCount.ApplicationName})
    ownerCount.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", ownerCount.ApplicationRolePrimary})
    ownerCount.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", ownerCount.ApplicationInstance})
    ownerCount.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", ownerCount.NumberOfLabels})

    ownerCount.EntityData.YListKeys = []string {}

    return &(ownerCount.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels
// Table of labels
type MplsLsdNodes_MplsLsdNode_Labels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for label. The type is slice of MplsLsdNodes_MplsLsdNode_Labels_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Labels_Label
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetEntityData() *types.CommonEntityData {
    labels.EntityData.YFilter = labels.YFilter
    labels.EntityData.YangName = "labels"
    labels.EntityData.BundleName = "cisco_ios_xr"
    labels.EntityData.ParentYangName = "mpls-lsd-node"
    labels.EntityData.SegmentPath = "labels"
    labels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labels.EntityData.Children = types.NewOrderedMap()
    labels.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range labels.Label {
        labels.EntityData.Children.Append(types.GetSegmentPath(labels.Label[i]), types.YChild{"Label", labels.Label[i]})
    }
    labels.EntityData.Leafs = types.NewOrderedMap()

    labels.EntityData.YListKeys = []string {}

    return &(labels.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label
// Data for label
type MplsLsdNodes_MplsLsdNode_Labels_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    LabelId interface{}

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Rewrite bound to label. The type is interface{} with range:
    // -2147483648..2147483647.
    RewriteIsBound interface{}

    // Rewrite owner. The type is interface{} with range: 0..4294967295.
    RewriteOwners interface{}

    // RSI connected. The type is interface{} with range: -2147483648..2147483647.
    RsIconnected interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext

    // Application owner. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "labels"
    label.EntityData.SegmentPath = "label" + types.AddKeyToken(label.LabelId, "label-id")
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &label.LabelContext})
    label.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range label.ApplicationOwner {
        label.EntityData.Children.Append(types.GetSegmentPath(label.ApplicationOwner[i]), types.YChild{"ApplicationOwner", label.ApplicationOwner[i]})
    }
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("label-id", types.YLeaf{"LabelId", label.LabelId})
    label.EntityData.Leafs.Append("label", types.YLeaf{"Label", label.Label})
    label.EntityData.Leafs.Append("rewrite-is-bound", types.YLeaf{"RewriteIsBound", label.RewriteIsBound})
    label.EntityData.Leafs.Append("rewrite-owners", types.YLeaf{"RewriteOwners", label.RewriteOwners})
    label.EntityData.Leafs.Append("rs-iconnected", types.YLeaf{"RsIconnected", label.RsIconnected})
    label.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", label.VrfName})

    label.EntityData.YListKeys = []string {"LabelId"}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application opaque data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ApplicationData interface{}

    // Label Key.
    Key MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "label"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("key", types.YChild{"Key", &labelContext.Key})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("application-data", types.YLeaf{"ApplicationData", labelContext.ApplicationData})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key
// Label Key
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "label-context"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &key.Ipv4Data})
    key.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &key.Ipv6Data})
    key.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &key.Tev4Data})
    key.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &key.Ipv4l3vpnData})
    key.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &key.Ipv6l3vpnData})
    key.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &key.VrfL3vpnData})
    key.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &key.Cev4l3vpnData})
    key.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &key.Cev6l3vpnData})
    key.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &key.PseudowireData})
    key.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &key.LabelBlockData})
    key.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &key.IpSubData})
    key.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &key.Tev4p2mpData})
    key.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &key.MldPv4Data})
    key.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &key.PseudowireHeadEndData})
    key.EntityData.Children.Append("tp-data", types.YChild{"TpData", &key.TpData})
    key.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &key.GenericRoutingEncapsulation})
    key.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &key.Ipv6GenericRoutingEncapsulation})
    key.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &key.EvpnData})
    key.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &key.Ipv4blbData})
    key.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &key.Ipv6blbData})
    key.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &key.PiMiPmsiData})
    key.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &key.PiMsPmsiData})
    key.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &key.NextHopSetL3vpn})
    key.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &key.SrPrefixSegment})
    key.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &key.SrAdjSegmentIpv4})
    key.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &key.SrAdjSegmentIpv6})
    key.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &key.LabelBlockSrgbData})
    key.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &key.TeBinding})
    key.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &key.LabelBlockSrlbData})
    key.EntityData.Leafs = types.NewOrderedMap()
    key.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", key.LabelContextType})

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "key"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "key"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "key"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "key"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "key"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3vpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "key"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "key"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "key"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "key"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "key"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "key"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4p2mpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "key"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "key"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "key"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "key"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "key"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "key"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "key"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "key"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "key"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "key"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "key"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "key"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "key"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "key"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "key"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "key"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "key"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "key"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner
// Application owner
type MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "label"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase
// FRR database
type MplsLsdNodes_MplsLsdNode_FrrDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of FRR database entries - Tunnel midpoints.
    TunnelMidpoints MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints

    // Table of FRR database entries - Tunnel heads.
    TunnelHeads MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads

    // Summary data for FRR database entry - Tunnel head.
    TunnelHeadSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary

    // Sumary table of Protected Interfaces.
    SummaryProtectedInterfaces MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces

    // Summary data for FRR database entry.
    TunnelSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary

    // Summary data for FRR database entry - Tunnel midpoint.
    TunnelMidpointSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetEntityData() *types.CommonEntityData {
    frrDatabase.EntityData.YFilter = frrDatabase.YFilter
    frrDatabase.EntityData.YangName = "frr-database"
    frrDatabase.EntityData.BundleName = "cisco_ios_xr"
    frrDatabase.EntityData.ParentYangName = "mpls-lsd-node"
    frrDatabase.EntityData.SegmentPath = "frr-database"
    frrDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrDatabase.EntityData.Children = types.NewOrderedMap()
    frrDatabase.EntityData.Children.Append("tunnel-midpoints", types.YChild{"TunnelMidpoints", &frrDatabase.TunnelMidpoints})
    frrDatabase.EntityData.Children.Append("tunnel-heads", types.YChild{"TunnelHeads", &frrDatabase.TunnelHeads})
    frrDatabase.EntityData.Children.Append("tunnel-head-summary", types.YChild{"TunnelHeadSummary", &frrDatabase.TunnelHeadSummary})
    frrDatabase.EntityData.Children.Append("summary-protected-interfaces", types.YChild{"SummaryProtectedInterfaces", &frrDatabase.SummaryProtectedInterfaces})
    frrDatabase.EntityData.Children.Append("tunnel-summary", types.YChild{"TunnelSummary", &frrDatabase.TunnelSummary})
    frrDatabase.EntityData.Children.Append("tunnel-midpoint-summary", types.YChild{"TunnelMidpointSummary", &frrDatabase.TunnelMidpointSummary})
    frrDatabase.EntityData.Leafs = types.NewOrderedMap()

    frrDatabase.EntityData.YListKeys = []string {}

    return &(frrDatabase.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints
// Table of FRR database entries - Tunnel
// midpoints
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel midpoint. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint.
    TunnelMidpoint []*MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetEntityData() *types.CommonEntityData {
    tunnelMidpoints.EntityData.YFilter = tunnelMidpoints.YFilter
    tunnelMidpoints.EntityData.YangName = "tunnel-midpoints"
    tunnelMidpoints.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpoints.EntityData.ParentYangName = "frr-database"
    tunnelMidpoints.EntityData.SegmentPath = "tunnel-midpoints"
    tunnelMidpoints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpoints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpoints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpoints.EntityData.Children = types.NewOrderedMap()
    tunnelMidpoints.EntityData.Children.Append("tunnel-midpoint", types.YChild{"TunnelMidpoint", nil})
    for i := range tunnelMidpoints.TunnelMidpoint {
        tunnelMidpoints.EntityData.Children.Append(types.GetSegmentPath(tunnelMidpoints.TunnelMidpoint[i]), types.YChild{"TunnelMidpoint", tunnelMidpoints.TunnelMidpoint[i]})
    }
    tunnelMidpoints.EntityData.Leafs = types.NewOrderedMap()

    tunnelMidpoints.EntityData.YListKeys = []string {}

    return &(tunnelMidpoints.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint
// Data for FRR database entry - Tunnel midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath.
    OutPath []*MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetEntityData() *types.CommonEntityData {
    tunnelMidpoint.EntityData.YFilter = tunnelMidpoint.YFilter
    tunnelMidpoint.EntityData.YangName = "tunnel-midpoint"
    tunnelMidpoint.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpoint.EntityData.ParentYangName = "tunnel-midpoints"
    tunnelMidpoint.EntityData.SegmentPath = "tunnel-midpoint" + types.AddKeyToken(tunnelMidpoint.Label, "label")
    tunnelMidpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpoint.EntityData.Children = types.NewOrderedMap()
    tunnelMidpoint.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &tunnelMidpoint.FrrEntryId})
    tunnelMidpoint.EntityData.Children.Append("out-path", types.YChild{"OutPath", nil})
    for i := range tunnelMidpoint.OutPath {
        tunnelMidpoint.EntityData.Children.Append(types.GetSegmentPath(tunnelMidpoint.OutPath[i]), types.YChild{"OutPath", tunnelMidpoint.OutPath[i]})
    }
    tunnelMidpoint.EntityData.Leafs = types.NewOrderedMap()
    tunnelMidpoint.EntityData.Leafs.Append("label", types.YLeaf{"Label", tunnelMidpoint.Label})
    tunnelMidpoint.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tunnelMidpoint.TunnelInterface})
    tunnelMidpoint.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", tunnelMidpoint.InputLabel})
    tunnelMidpoint.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", tunnelMidpoint.EntryFrrState})

    tunnelMidpoint.EntityData.YListKeys = []string {"Label"}

    return &(tunnelMidpoint.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId
// FRR entry ID
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "tunnel-midpoint"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
// Out Path List
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetEntityData() *types.CommonEntityData {
    outPath.EntityData.YFilter = outPath.YFilter
    outPath.EntityData.YangName = "out-path"
    outPath.EntityData.BundleName = "cisco_ios_xr"
    outPath.EntityData.ParentYangName = "tunnel-midpoint"
    outPath.EntityData.SegmentPath = "out-path"
    outPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outPath.EntityData.Children = types.NewOrderedMap()
    outPath.EntityData.Leafs = types.NewOrderedMap()
    outPath.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", outPath.OutInterface})
    outPath.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", outPath.OutLabel})
    outPath.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", outPath.Ipv4NextHop})
    outPath.EntityData.Leafs.Append("frr-interface", types.YLeaf{"FrrInterface", outPath.FrrInterface})
    outPath.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", outPath.FrrLabel})

    outPath.EntityData.YListKeys = []string {}

    return &(outPath.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads
// Table of FRR database entries - Tunnel heads
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel head. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead.
    TunnelHead []*MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetEntityData() *types.CommonEntityData {
    tunnelHeads.EntityData.YFilter = tunnelHeads.YFilter
    tunnelHeads.EntityData.YangName = "tunnel-heads"
    tunnelHeads.EntityData.BundleName = "cisco_ios_xr"
    tunnelHeads.EntityData.ParentYangName = "frr-database"
    tunnelHeads.EntityData.SegmentPath = "tunnel-heads"
    tunnelHeads.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHeads.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHeads.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHeads.EntityData.Children = types.NewOrderedMap()
    tunnelHeads.EntityData.Children.Append("tunnel-head", types.YChild{"TunnelHead", nil})
    for i := range tunnelHeads.TunnelHead {
        tunnelHeads.EntityData.Children.Append(types.GetSegmentPath(tunnelHeads.TunnelHead[i]), types.YChild{"TunnelHead", tunnelHeads.TunnelHead[i]})
    }
    tunnelHeads.EntityData.Leafs = types.NewOrderedMap()

    tunnelHeads.EntityData.YListKeys = []string {}

    return &(tunnelHeads.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead
// Data for FRR database entry - Tunnel head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath.
    OutPath []*MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetEntityData() *types.CommonEntityData {
    tunnelHead.EntityData.YFilter = tunnelHead.YFilter
    tunnelHead.EntityData.YangName = "tunnel-head"
    tunnelHead.EntityData.BundleName = "cisco_ios_xr"
    tunnelHead.EntityData.ParentYangName = "tunnel-heads"
    tunnelHead.EntityData.SegmentPath = "tunnel-head" + types.AddKeyToken(tunnelHead.InterfaceName, "interface-name")
    tunnelHead.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHead.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHead.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHead.EntityData.Children = types.NewOrderedMap()
    tunnelHead.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &tunnelHead.FrrEntryId})
    tunnelHead.EntityData.Children.Append("out-path", types.YChild{"OutPath", nil})
    for i := range tunnelHead.OutPath {
        tunnelHead.EntityData.Children.Append(types.GetSegmentPath(tunnelHead.OutPath[i]), types.YChild{"OutPath", tunnelHead.OutPath[i]})
    }
    tunnelHead.EntityData.Leafs = types.NewOrderedMap()
    tunnelHead.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", tunnelHead.InterfaceName})
    tunnelHead.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tunnelHead.TunnelInterface})
    tunnelHead.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", tunnelHead.InputLabel})
    tunnelHead.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", tunnelHead.EntryFrrState})

    tunnelHead.EntityData.YListKeys = []string {"InterfaceName"}

    return &(tunnelHead.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId
// FRR entry ID
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "tunnel-head"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath
// Out Path List
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetEntityData() *types.CommonEntityData {
    outPath.EntityData.YFilter = outPath.YFilter
    outPath.EntityData.YangName = "out-path"
    outPath.EntityData.BundleName = "cisco_ios_xr"
    outPath.EntityData.ParentYangName = "tunnel-head"
    outPath.EntityData.SegmentPath = "out-path"
    outPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outPath.EntityData.Children = types.NewOrderedMap()
    outPath.EntityData.Leafs = types.NewOrderedMap()
    outPath.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", outPath.OutInterface})
    outPath.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", outPath.OutLabel})
    outPath.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", outPath.Ipv4NextHop})
    outPath.EntityData.Leafs.Append("frr-interface", types.YLeaf{"FrrInterface", outPath.FrrInterface})
    outPath.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", outPath.FrrLabel})

    outPath.EntityData.YListKeys = []string {}

    return &(outPath.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary
// Summary data for FRR database entry - Tunnel
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetEntityData() *types.CommonEntityData {
    tunnelHeadSummary.EntityData.YFilter = tunnelHeadSummary.YFilter
    tunnelHeadSummary.EntityData.YangName = "tunnel-head-summary"
    tunnelHeadSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelHeadSummary.EntityData.ParentYangName = "frr-database"
    tunnelHeadSummary.EntityData.SegmentPath = "tunnel-head-summary"
    tunnelHeadSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHeadSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHeadSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHeadSummary.EntityData.Children = types.NewOrderedMap()
    tunnelHeadSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelHeadSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelHeadSummary.Active})
    tunnelHeadSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelHeadSummary.Ready})
    tunnelHeadSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelHeadSummary.Partial})
    tunnelHeadSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelHeadSummary.Igp})

    tunnelHeadSummary.EntityData.YListKeys = []string {}

    return &(tunnelHeadSummary.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces
// Sumary table of Protected Interfaces
type MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface.
    SummaryProtectedInterface []*MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetEntityData() *types.CommonEntityData {
    summaryProtectedInterfaces.EntityData.YFilter = summaryProtectedInterfaces.YFilter
    summaryProtectedInterfaces.EntityData.YangName = "summary-protected-interfaces"
    summaryProtectedInterfaces.EntityData.BundleName = "cisco_ios_xr"
    summaryProtectedInterfaces.EntityData.ParentYangName = "frr-database"
    summaryProtectedInterfaces.EntityData.SegmentPath = "summary-protected-interfaces"
    summaryProtectedInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtectedInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtectedInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtectedInterfaces.EntityData.Children = types.NewOrderedMap()
    summaryProtectedInterfaces.EntityData.Children.Append("summary-protected-interface", types.YChild{"SummaryProtectedInterface", nil})
    for i := range summaryProtectedInterfaces.SummaryProtectedInterface {
        summaryProtectedInterfaces.EntityData.Children.Append(types.GetSegmentPath(summaryProtectedInterfaces.SummaryProtectedInterface[i]), types.YChild{"SummaryProtectedInterface", summaryProtectedInterfaces.SummaryProtectedInterface[i]})
    }
    summaryProtectedInterfaces.EntityData.Leafs = types.NewOrderedMap()

    summaryProtectedInterfaces.EntityData.YListKeys = []string {}

    return &(summaryProtectedInterfaces.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
// Data for MPLS interface
type MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetEntityData() *types.CommonEntityData {
    summaryProtectedInterface.EntityData.YFilter = summaryProtectedInterface.YFilter
    summaryProtectedInterface.EntityData.YangName = "summary-protected-interface"
    summaryProtectedInterface.EntityData.BundleName = "cisco_ios_xr"
    summaryProtectedInterface.EntityData.ParentYangName = "summary-protected-interfaces"
    summaryProtectedInterface.EntityData.SegmentPath = "summary-protected-interface" + types.AddKeyToken(summaryProtectedInterface.InterfaceName, "interface-name")
    summaryProtectedInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtectedInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtectedInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtectedInterface.EntityData.Children = types.NewOrderedMap()
    summaryProtectedInterface.EntityData.Leafs = types.NewOrderedMap()
    summaryProtectedInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", summaryProtectedInterface.InterfaceName})
    summaryProtectedInterface.EntityData.Leafs.Append("active", types.YLeaf{"Active", summaryProtectedInterface.Active})
    summaryProtectedInterface.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", summaryProtectedInterface.Ready})
    summaryProtectedInterface.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", summaryProtectedInterface.Partial})
    summaryProtectedInterface.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", summaryProtectedInterface.Igp})

    summaryProtectedInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(summaryProtectedInterface.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary
// Summary data for FRR database entry
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetEntityData() *types.CommonEntityData {
    tunnelSummary.EntityData.YFilter = tunnelSummary.YFilter
    tunnelSummary.EntityData.YangName = "tunnel-summary"
    tunnelSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelSummary.EntityData.ParentYangName = "frr-database"
    tunnelSummary.EntityData.SegmentPath = "tunnel-summary"
    tunnelSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelSummary.EntityData.Children = types.NewOrderedMap()
    tunnelSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelSummary.Active})
    tunnelSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelSummary.Ready})
    tunnelSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelSummary.Partial})
    tunnelSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelSummary.Igp})

    tunnelSummary.EntityData.YListKeys = []string {}

    return &(tunnelSummary.EntityData)
}

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary
// Summary data for FRR database entry - Tunnel
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetEntityData() *types.CommonEntityData {
    tunnelMidpointSummary.EntityData.YFilter = tunnelMidpointSummary.YFilter
    tunnelMidpointSummary.EntityData.YangName = "tunnel-midpoint-summary"
    tunnelMidpointSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpointSummary.EntityData.ParentYangName = "frr-database"
    tunnelMidpointSummary.EntityData.SegmentPath = "tunnel-midpoint-summary"
    tunnelMidpointSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpointSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpointSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpointSummary.EntityData.Children = types.NewOrderedMap()
    tunnelMidpointSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelMidpointSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelMidpointSummary.Active})
    tunnelMidpointSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelMidpointSummary.Ready})
    tunnelMidpointSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelMidpointSummary.Partial})
    tunnelMidpointSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelMidpointSummary.Igp})

    tunnelMidpointSummary.EntityData.YListKeys = []string {}

    return &(tunnelMidpointSummary.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite
// Table of rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of Rewrites.
    RewritePws MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws

    // Table of Rewrites.
    RewriteIpv4s MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s

    // Table of Traffic Engineering Rewrites.
    RewriteTes MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes

    // Table of Rewrites.
    RewriteLabels MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetEntityData() *types.CommonEntityData {
    rewrite.EntityData.YFilter = rewrite.YFilter
    rewrite.EntityData.YangName = "rewrite"
    rewrite.EntityData.BundleName = "cisco_ios_xr"
    rewrite.EntityData.ParentYangName = "mpls-lsd-node"
    rewrite.EntityData.SegmentPath = "rewrite"
    rewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewrite.EntityData.Children = types.NewOrderedMap()
    rewrite.EntityData.Children.Append("rewrite-pws", types.YChild{"RewritePws", &rewrite.RewritePws})
    rewrite.EntityData.Children.Append("rewrite-ipv4s", types.YChild{"RewriteIpv4s", &rewrite.RewriteIpv4s})
    rewrite.EntityData.Children.Append("rewrite-tes", types.YChild{"RewriteTes", &rewrite.RewriteTes})
    rewrite.EntityData.Children.Append("rewrite-labels", types.YChild{"RewriteLabels", &rewrite.RewriteLabels})
    rewrite.EntityData.Leafs = types.NewOrderedMap()

    rewrite.EntityData.YListKeys = []string {}

    return &(rewrite.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for PW List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw.
    RewritePw []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetEntityData() *types.CommonEntityData {
    rewritePws.EntityData.YFilter = rewritePws.YFilter
    rewritePws.EntityData.YangName = "rewrite-pws"
    rewritePws.EntityData.BundleName = "cisco_ios_xr"
    rewritePws.EntityData.ParentYangName = "rewrite"
    rewritePws.EntityData.SegmentPath = "rewrite-pws"
    rewritePws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewritePws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewritePws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewritePws.EntityData.Children = types.NewOrderedMap()
    rewritePws.EntityData.Children.Append("rewrite-pw", types.YChild{"RewritePw", nil})
    for i := range rewritePws.RewritePw {
        rewritePws.EntityData.Children.Append(types.GetSegmentPath(rewritePws.RewritePw[i]), types.YChild{"RewritePw", rewritePws.RewritePw[i]})
    }
    rewritePws.EntityData.Leafs = types.NewOrderedMap()

    rewritePws.EntityData.YListKeys = []string {}

    return &(rewritePws.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw
// FPI rewrite for PW List
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. PW List ID. The type is interface{} with range:
    // 0..4294967295.
    PwListId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi.
    AssociatedFpi []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf.
    V4Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf.
    V6Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois.
    Mois []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetEntityData() *types.CommonEntityData {
    rewritePw.EntityData.YFilter = rewritePw.YFilter
    rewritePw.EntityData.YangName = "rewrite-pw"
    rewritePw.EntityData.BundleName = "cisco_ios_xr"
    rewritePw.EntityData.ParentYangName = "rewrite-pws"
    rewritePw.EntityData.SegmentPath = "rewrite-pw" + types.AddKeyToken(rewritePw.PwListId, "pw-list-id")
    rewritePw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewritePw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewritePw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewritePw.EntityData.Children = types.NewOrderedMap()
    rewritePw.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewritePw.FpiKey})
    rewritePw.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewritePw.RewriteId})
    rewritePw.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewritePw.AssociatedFpi {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewritePw.AssociatedFpi[i]})
    }
    rewritePw.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewritePw.V4Rpf {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.V4Rpf[i]), types.YChild{"V4Rpf", rewritePw.V4Rpf[i]})
    }
    rewritePw.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewritePw.V6Rpf {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.V6Rpf[i]), types.YChild{"V6Rpf", rewritePw.V6Rpf[i]})
    }
    rewritePw.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewritePw.Mois {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.Mois[i]), types.YChild{"Mois", rewritePw.Mois[i]})
    }
    rewritePw.EntityData.Leafs = types.NewOrderedMap()
    rewritePw.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", rewritePw.PwListId})
    rewritePw.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewritePw.RewriteVersion})
    rewritePw.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewritePw.BcdlPriority})
    rewritePw.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewritePw.LsdQueue})
    rewritePw.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewritePw.RwInstallTime})
    rewritePw.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewritePw.RwInstallAge})
    rewritePw.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewritePw.RwUpdated})
    rewritePw.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewritePw.PriorityUpdated})

    rewritePw.EntityData.YListKeys = []string {"PwListId"}

    return &(rewritePw.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-pw"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-pw"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-pw"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-pw"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-pw"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray.
    MoiArray []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-pw"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4.
    RewriteIpv4 []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4
}

func (rewriteIpv4s *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s) GetEntityData() *types.CommonEntityData {
    rewriteIpv4s.EntityData.YFilter = rewriteIpv4s.YFilter
    rewriteIpv4s.EntityData.YangName = "rewrite-ipv4s"
    rewriteIpv4s.EntityData.BundleName = "cisco_ios_xr"
    rewriteIpv4s.EntityData.ParentYangName = "rewrite"
    rewriteIpv4s.EntityData.SegmentPath = "rewrite-ipv4s"
    rewriteIpv4s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteIpv4s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteIpv4s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteIpv4s.EntityData.Children = types.NewOrderedMap()
    rewriteIpv4s.EntityData.Children.Append("rewrite-ipv4", types.YChild{"RewriteIpv4", nil})
    for i := range rewriteIpv4s.RewriteIpv4 {
        rewriteIpv4s.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4s.RewriteIpv4[i]), types.YChild{"RewriteIpv4", rewriteIpv4s.RewriteIpv4[i]})
    }
    rewriteIpv4s.EntityData.Leafs = types.NewOrderedMap()

    rewriteIpv4s.EntityData.YListKeys = []string {}

    return &(rewriteIpv4s.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4
// FPI rewrite for label
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSI table name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RsiTableName interface{}

    // RSI table ID. The type is string with pattern: [0-9a-fA-F]{1,8}.
    RsiTableId interface{}

    // IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi.
    AssociatedFpi []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf.
    V4Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf.
    V6Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois.
    Mois []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4) GetEntityData() *types.CommonEntityData {
    rewriteIpv4.EntityData.YFilter = rewriteIpv4.YFilter
    rewriteIpv4.EntityData.YangName = "rewrite-ipv4"
    rewriteIpv4.EntityData.BundleName = "cisco_ios_xr"
    rewriteIpv4.EntityData.ParentYangName = "rewrite-ipv4s"
    rewriteIpv4.EntityData.SegmentPath = "rewrite-ipv4"
    rewriteIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteIpv4.EntityData.Children = types.NewOrderedMap()
    rewriteIpv4.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteIpv4.FpiKey})
    rewriteIpv4.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteIpv4.RewriteId})
    rewriteIpv4.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteIpv4.AssociatedFpi {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteIpv4.AssociatedFpi[i]})
    }
    rewriteIpv4.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteIpv4.V4Rpf {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.V4Rpf[i]), types.YChild{"V4Rpf", rewriteIpv4.V4Rpf[i]})
    }
    rewriteIpv4.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteIpv4.V6Rpf {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.V6Rpf[i]), types.YChild{"V6Rpf", rewriteIpv4.V6Rpf[i]})
    }
    rewriteIpv4.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteIpv4.Mois {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.Mois[i]), types.YChild{"Mois", rewriteIpv4.Mois[i]})
    }
    rewriteIpv4.EntityData.Leafs = types.NewOrderedMap()
    rewriteIpv4.EntityData.Leafs.Append("rsi-table-name", types.YLeaf{"RsiTableName", rewriteIpv4.RsiTableName})
    rewriteIpv4.EntityData.Leafs.Append("rsi-table-id", types.YLeaf{"RsiTableId", rewriteIpv4.RsiTableId})
    rewriteIpv4.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", rewriteIpv4.Prefix})
    rewriteIpv4.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", rewriteIpv4.PrefixLength})
    rewriteIpv4.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteIpv4.RewriteVersion})
    rewriteIpv4.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteIpv4.BcdlPriority})
    rewriteIpv4.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteIpv4.LsdQueue})
    rewriteIpv4.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteIpv4.RwInstallTime})
    rewriteIpv4.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteIpv4.RwInstallAge})
    rewriteIpv4.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteIpv4.RwUpdated})
    rewriteIpv4.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteIpv4.PriorityUpdated})

    rewriteIpv4.EntityData.YListKeys = []string {}

    return &(rewriteIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-ipv4"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-ipv4"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-ipv4"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-ipv4"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-ipv4"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray.
    MoiArray []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-ipv4"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes
// Table of Traffic Engineering Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for TE. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe.
    RewriteTe []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetEntityData() *types.CommonEntityData {
    rewriteTes.EntityData.YFilter = rewriteTes.YFilter
    rewriteTes.EntityData.YangName = "rewrite-tes"
    rewriteTes.EntityData.BundleName = "cisco_ios_xr"
    rewriteTes.EntityData.ParentYangName = "rewrite"
    rewriteTes.EntityData.SegmentPath = "rewrite-tes"
    rewriteTes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteTes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteTes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteTes.EntityData.Children = types.NewOrderedMap()
    rewriteTes.EntityData.Children.Append("rewrite-te", types.YChild{"RewriteTe", nil})
    for i := range rewriteTes.RewriteTe {
        rewriteTes.EntityData.Children.Append(types.GetSegmentPath(rewriteTes.RewriteTe[i]), types.YChild{"RewriteTe", rewriteTes.RewriteTe[i]})
    }
    rewriteTes.EntityData.Leafs = types.NewOrderedMap()

    rewriteTes.EntityData.YListKeys = []string {}

    return &(rewriteTes.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe
// FPI rewrite for TE
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi.
    AssociatedFpi []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf.
    V4Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf.
    V6Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois.
    Mois []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetEntityData() *types.CommonEntityData {
    rewriteTe.EntityData.YFilter = rewriteTe.YFilter
    rewriteTe.EntityData.YangName = "rewrite-te"
    rewriteTe.EntityData.BundleName = "cisco_ios_xr"
    rewriteTe.EntityData.ParentYangName = "rewrite-tes"
    rewriteTe.EntityData.SegmentPath = "rewrite-te" + types.AddKeyToken(rewriteTe.InterfaceName, "interface-name")
    rewriteTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteTe.EntityData.Children = types.NewOrderedMap()
    rewriteTe.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteTe.FpiKey})
    rewriteTe.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteTe.RewriteId})
    rewriteTe.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteTe.AssociatedFpi {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteTe.AssociatedFpi[i]})
    }
    rewriteTe.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteTe.V4Rpf {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.V4Rpf[i]), types.YChild{"V4Rpf", rewriteTe.V4Rpf[i]})
    }
    rewriteTe.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteTe.V6Rpf {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.V6Rpf[i]), types.YChild{"V6Rpf", rewriteTe.V6Rpf[i]})
    }
    rewriteTe.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteTe.Mois {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.Mois[i]), types.YChild{"Mois", rewriteTe.Mois[i]})
    }
    rewriteTe.EntityData.Leafs = types.NewOrderedMap()
    rewriteTe.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rewriteTe.InterfaceName})
    rewriteTe.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteTe.RewriteVersion})
    rewriteTe.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteTe.BcdlPriority})
    rewriteTe.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteTe.LsdQueue})
    rewriteTe.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteTe.RwInstallTime})
    rewriteTe.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteTe.RwInstallAge})
    rewriteTe.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteTe.RwUpdated})
    rewriteTe.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteTe.PriorityUpdated})

    rewriteTe.EntityData.YListKeys = []string {"InterfaceName"}

    return &(rewriteTe.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-te"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-te"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-te"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-te"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-te"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray.
    MoiArray []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-te"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel.
    RewriteLabel []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetEntityData() *types.CommonEntityData {
    rewriteLabels.EntityData.YFilter = rewriteLabels.YFilter
    rewriteLabels.EntityData.YangName = "rewrite-labels"
    rewriteLabels.EntityData.BundleName = "cisco_ios_xr"
    rewriteLabels.EntityData.ParentYangName = "rewrite"
    rewriteLabels.EntityData.SegmentPath = "rewrite-labels"
    rewriteLabels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteLabels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteLabels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteLabels.EntityData.Children = types.NewOrderedMap()
    rewriteLabels.EntityData.Children.Append("rewrite-label", types.YChild{"RewriteLabel", nil})
    for i := range rewriteLabels.RewriteLabel {
        rewriteLabels.EntityData.Children.Append(types.GetSegmentPath(rewriteLabels.RewriteLabel[i]), types.YChild{"RewriteLabel", rewriteLabels.RewriteLabel[i]})
    }
    rewriteLabels.EntityData.Leafs = types.NewOrderedMap()

    rewriteLabels.EntityData.YListKeys = []string {}

    return &(rewriteLabels.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel
// FPI rewrite for label
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    LabelId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi.
    AssociatedFpi []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf.
    V4Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf.
    V6Rpf []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois.
    Mois []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetEntityData() *types.CommonEntityData {
    rewriteLabel.EntityData.YFilter = rewriteLabel.YFilter
    rewriteLabel.EntityData.YangName = "rewrite-label"
    rewriteLabel.EntityData.BundleName = "cisco_ios_xr"
    rewriteLabel.EntityData.ParentYangName = "rewrite-labels"
    rewriteLabel.EntityData.SegmentPath = "rewrite-label" + types.AddKeyToken(rewriteLabel.LabelId, "label-id")
    rewriteLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteLabel.EntityData.Children = types.NewOrderedMap()
    rewriteLabel.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteLabel.FpiKey})
    rewriteLabel.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteLabel.RewriteId})
    rewriteLabel.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteLabel.AssociatedFpi {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteLabel.AssociatedFpi[i]})
    }
    rewriteLabel.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteLabel.V4Rpf {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.V4Rpf[i]), types.YChild{"V4Rpf", rewriteLabel.V4Rpf[i]})
    }
    rewriteLabel.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteLabel.V6Rpf {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.V6Rpf[i]), types.YChild{"V6Rpf", rewriteLabel.V6Rpf[i]})
    }
    rewriteLabel.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteLabel.Mois {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.Mois[i]), types.YChild{"Mois", rewriteLabel.Mois[i]})
    }
    rewriteLabel.EntityData.Leafs = types.NewOrderedMap()
    rewriteLabel.EntityData.Leafs.Append("label-id", types.YLeaf{"LabelId", rewriteLabel.LabelId})
    rewriteLabel.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteLabel.RewriteVersion})
    rewriteLabel.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteLabel.BcdlPriority})
    rewriteLabel.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteLabel.LsdQueue})
    rewriteLabel.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteLabel.RwInstallTime})
    rewriteLabel.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteLabel.RwInstallAge})
    rewriteLabel.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteLabel.RwUpdated})
    rewriteLabel.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteLabel.PriorityUpdated})

    rewriteLabel.EntityData.YListKeys = []string {"LabelId"}

    return &(rewriteLabel.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-label"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-label"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-label"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-label"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-label"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray.
    MoiArray []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-label"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummary
// Rewrite Summary 
type MplsLsdNodes_MplsLsdNode_RewriteSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4rpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6rpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetEntityData() *types.CommonEntityData {
    rewriteSummary.EntityData.YFilter = rewriteSummary.YFilter
    rewriteSummary.EntityData.YangName = "rewrite-summary"
    rewriteSummary.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummary.EntityData.ParentYangName = "mpls-lsd-node"
    rewriteSummary.EntityData.SegmentPath = "rewrite-summary"
    rewriteSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummary.EntityData.Children = types.NewOrderedMap()
    rewriteSummary.EntityData.Children.Append("ipv4-paths", types.YChild{"Ipv4Paths", &rewriteSummary.Ipv4Paths})
    rewriteSummary.EntityData.Children.Append("ipv6-paths", types.YChild{"Ipv6Paths", &rewriteSummary.Ipv6Paths})
    rewriteSummary.EntityData.Leafs = types.NewOrderedMap()
    rewriteSummary.EntityData.Leafs.Append("num-label-fpi", types.YLeaf{"NumLabelFpi", rewriteSummary.NumLabelFpi})
    rewriteSummary.EntityData.Leafs.Append("num-tefpi", types.YLeaf{"NumTefpi", rewriteSummary.NumTefpi})
    rewriteSummary.EntityData.Leafs.Append("num-ipv4fpi", types.YLeaf{"NumIpv4fpi", rewriteSummary.NumIpv4fpi})
    rewriteSummary.EntityData.Leafs.Append("num-ipv6fpi", types.YLeaf{"NumIpv6fpi", rewriteSummary.NumIpv6fpi})
    rewriteSummary.EntityData.Leafs.Append("num-pw-list-tefpi", types.YLeaf{"NumPwListTefpi", rewriteSummary.NumPwListTefpi})
    rewriteSummary.EntityData.Leafs.Append("num-dmtctefpi", types.YLeaf{"NumDmtctefpi", rewriteSummary.NumDmtctefpi})
    rewriteSummary.EntityData.Leafs.Append("num-rewrite", types.YLeaf{"NumRewrite", rewriteSummary.NumRewrite})
    rewriteSummary.EntityData.Leafs.Append("total-forward-update", types.YLeaf{"TotalForwardUpdate", rewriteSummary.TotalForwardUpdate})
    rewriteSummary.EntityData.Leafs.Append("total-forwad-update-message", types.YLeaf{"TotalForwadUpdateMessage", rewriteSummary.TotalForwadUpdateMessage})
    rewriteSummary.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", rewriteSummary.TotalPaths})
    rewriteSummary.EntityData.Leafs.Append("total-t-ev4-paths", types.YLeaf{"TotalTEv4Paths", rewriteSummary.TotalTEv4Paths})
    rewriteSummary.EntityData.Leafs.Append("total-te-head-paths", types.YLeaf{"TotalTeHeadPaths", rewriteSummary.TotalTeHeadPaths})
    rewriteSummary.EntityData.Leafs.Append("total-pw-paths", types.YLeaf{"TotalPwPaths", rewriteSummary.TotalPwPaths})
    rewriteSummary.EntityData.Leafs.Append("total-ip-sub-paths", types.YLeaf{"TotalIpSubPaths", rewriteSummary.TotalIpSubPaths})
    rewriteSummary.EntityData.Leafs.Append("total-ipv4rpf-neighbors", types.YLeaf{"TotalIpv4rpfNeighbors", rewriteSummary.TotalIpv4rpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("total-ipv6rpf-neighbors", types.YLeaf{"TotalIpv6rpfNeighbors", rewriteSummary.TotalIpv6rpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("num-rewrite-rpf-neighbors", types.YLeaf{"NumRewriteRpfNeighbors", rewriteSummary.NumRewriteRpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("total-dmtc-intf", types.YLeaf{"TotalDmtcIntf", rewriteSummary.TotalDmtcIntf})
    rewriteSummary.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", rewriteSummary.VrfNameXr})

    rewriteSummary.EntityData.YListKeys = []string {}

    return &(rewriteSummary.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths
// Count for IPv4 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetEntityData() *types.CommonEntityData {
    ipv4Paths.EntityData.YFilter = ipv4Paths.YFilter
    ipv4Paths.EntityData.YangName = "ipv4-paths"
    ipv4Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv4Paths.EntityData.ParentYangName = "rewrite-summary"
    ipv4Paths.EntityData.SegmentPath = "ipv4-paths"
    ipv4Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Paths.EntityData.Children = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv4Paths.TotalPaths})
    ipv4Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv4Paths.TotalBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv4Paths.TotalRemoteBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv4Paths.TotalProtectedPaths})
    ipv4Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv4Paths.TotalPopLkupPaths})

    ipv4Paths.EntityData.YListKeys = []string {}

    return &(ipv4Paths.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths
// Count for IPv6 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetEntityData() *types.CommonEntityData {
    ipv6Paths.EntityData.YFilter = ipv6Paths.YFilter
    ipv6Paths.EntityData.YangName = "ipv6-paths"
    ipv6Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv6Paths.EntityData.ParentYangName = "rewrite-summary"
    ipv6Paths.EntityData.SegmentPath = "ipv6-paths"
    ipv6Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Paths.EntityData.Children = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv6Paths.TotalPaths})
    ipv6Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv6Paths.TotalBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv6Paths.TotalRemoteBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv6Paths.TotalProtectedPaths})
    ipv6Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv6Paths.TotalPopLkupPaths})

    ipv6Paths.EntityData.YListKeys = []string {}

    return &(ipv6Paths.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications
// Table of MPLS applications using LSD
type MplsLsdNodes_MplsLsdNode_Applications struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS application using LSD. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Applications_Application.
    Application []*MplsLsdNodes_MplsLsdNode_Applications_Application
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetEntityData() *types.CommonEntityData {
    applications.EntityData.YFilter = applications.YFilter
    applications.EntityData.YangName = "applications"
    applications.EntityData.BundleName = "cisco_ios_xr"
    applications.EntityData.ParentYangName = "mpls-lsd-node"
    applications.EntityData.SegmentPath = "applications"
    applications.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applications.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applications.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applications.EntityData.Children = types.NewOrderedMap()
    applications.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range applications.Application {
        applications.EntityData.Children.Append(types.GetSegmentPath(applications.Application[i]), types.YChild{"Application", applications.Application[i]})
    }
    applications.EntityData.Leafs = types.NewOrderedMap()

    applications.EntityData.YListKeys = []string {}

    return &(applications.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications_Application
// Data for MPLS application using LSD
type MplsLsdNodes_MplsLsdNode_Applications_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Application Instance name in the form of
    // '<app_type_name>[:<instance>]'. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ApplicationName interface{}

    // Application name. The type is string.
    ApplicationNameXr interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // App reg ts. The type is interface{} with range: 0..18446744073709551615.
    AppRegTime interface{}

    // App disconnect ts. The type is interface{} with range:
    // 0..18446744073709551615.
    AppDisconnectTime interface{}

    // App flow control status. The type is interface{} with range:
    // -2147483648..2147483647.
    AppFlowControlled interface{}

    // Flow Ctrl ts. The type is interface{} with range: 0..18446744073709551615.
    FlowCtrlTime interface{}

    // Flow Ctrl Clr ts. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowCtrlClrTime interface{}

    // App go active timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    GoActTs interface{}

    // Application state. The type is MgmtLsdAppState.
    ApplicationState interface{}

    // Recovery time [secs] remaining if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRemainingSeconds interface{}

    // Recovery time [secs] elapsed if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeElapsedSeconds interface{}

    // Recovery time [secs] specified at registration or set explicitly. The type
    // is interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRegisterSeconds interface{}

    // Node ID where application is/was running. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Application Statistics.
    ApplicationStatistics MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "applications"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.ApplicationName, "application-name")
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Children.Append("application-statistics", types.YChild{"ApplicationStatistics", &application.ApplicationStatistics})
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", application.ApplicationName})
    application.EntityData.Leafs.Append("application-name-xr", types.YLeaf{"ApplicationNameXr", application.ApplicationNameXr})
    application.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", application.ApplicationType})
    application.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", application.ApplicationRolePrimary})
    application.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", application.ApplicationInstance})
    application.EntityData.Leafs.Append("app-reg-time", types.YLeaf{"AppRegTime", application.AppRegTime})
    application.EntityData.Leafs.Append("app-disconnect-time", types.YLeaf{"AppDisconnectTime", application.AppDisconnectTime})
    application.EntityData.Leafs.Append("app-flow-controlled", types.YLeaf{"AppFlowControlled", application.AppFlowControlled})
    application.EntityData.Leafs.Append("flow-ctrl-time", types.YLeaf{"FlowCtrlTime", application.FlowCtrlTime})
    application.EntityData.Leafs.Append("flow-ctrl-clr-time", types.YLeaf{"FlowCtrlClrTime", application.FlowCtrlClrTime})
    application.EntityData.Leafs.Append("go-act-ts", types.YLeaf{"GoActTs", application.GoActTs})
    application.EntityData.Leafs.Append("application-state", types.YLeaf{"ApplicationState", application.ApplicationState})
    application.EntityData.Leafs.Append("recovery-time-remaining-seconds", types.YLeaf{"RecoveryTimeRemainingSeconds", application.RecoveryTimeRemainingSeconds})
    application.EntityData.Leafs.Append("recovery-time-elapsed-seconds", types.YLeaf{"RecoveryTimeElapsedSeconds", application.RecoveryTimeElapsedSeconds})
    application.EntityData.Leafs.Append("recovery-time-register-seconds", types.YLeaf{"RecoveryTimeRegisterSeconds", application.RecoveryTimeRegisterSeconds})
    application.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", application.NodeId})

    application.EntityData.YListKeys = []string {"ApplicationName"}

    return &(application.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics
// Application Statistics
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of interface enabled. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnable interface{}

    // Number of interface enable pending. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnablePending interface{}

    // Connect count. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Connected statistics.
    Connected MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected

    // Label context count. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextCount.
    LabelContextCount []*MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextCount

    // Label context pending count. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextPendingCount.
    LabelContextPendingCount []*MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextPendingCount
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetEntityData() *types.CommonEntityData {
    applicationStatistics.EntityData.YFilter = applicationStatistics.YFilter
    applicationStatistics.EntityData.YangName = "application-statistics"
    applicationStatistics.EntityData.BundleName = "cisco_ios_xr"
    applicationStatistics.EntityData.ParentYangName = "application"
    applicationStatistics.EntityData.SegmentPath = "application-statistics"
    applicationStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationStatistics.EntityData.Children = types.NewOrderedMap()
    applicationStatistics.EntityData.Children.Append("connected", types.YChild{"Connected", &applicationStatistics.Connected})
    applicationStatistics.EntityData.Children.Append("label-context-count", types.YChild{"LabelContextCount", nil})
    for i := range applicationStatistics.LabelContextCount {
        applicationStatistics.EntityData.Children.Append(types.GetSegmentPath(applicationStatistics.LabelContextCount[i]), types.YChild{"LabelContextCount", applicationStatistics.LabelContextCount[i]})
    }
    applicationStatistics.EntityData.Children.Append("label-context-pending-count", types.YChild{"LabelContextPendingCount", nil})
    for i := range applicationStatistics.LabelContextPendingCount {
        applicationStatistics.EntityData.Children.Append(types.GetSegmentPath(applicationStatistics.LabelContextPendingCount[i]), types.YChild{"LabelContextPendingCount", applicationStatistics.LabelContextPendingCount[i]})
    }
    applicationStatistics.EntityData.Leafs = types.NewOrderedMap()
    applicationStatistics.EntityData.Leafs.Append("interface-enable", types.YLeaf{"InterfaceEnable", applicationStatistics.InterfaceEnable})
    applicationStatistics.EntityData.Leafs.Append("interface-enable-pending", types.YLeaf{"InterfaceEnablePending", applicationStatistics.InterfaceEnablePending})
    applicationStatistics.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", applicationStatistics.ConnectCount})

    applicationStatistics.EntityData.YListKeys = []string {}

    return &(applicationStatistics.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected
// Connected statistics
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RT set count. The type is interface{} with range: 0..4294967295.
    RtSetMsgCount interface{}

    // Operation count. The type is interface{} with range: 0..4294967295.
    OperationMsgCount interface{}

    // Label OOR count. The type is interface{} with range: 0..4294967295.
    OorLabelCount interface{}

    // Error count. The type is interface{} with range: 0..4294967295.
    ErrorMsgCount interface{}
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetEntityData() *types.CommonEntityData {
    connected.EntityData.YFilter = connected.YFilter
    connected.EntityData.YangName = "connected"
    connected.EntityData.BundleName = "cisco_ios_xr"
    connected.EntityData.ParentYangName = "application-statistics"
    connected.EntityData.SegmentPath = "connected"
    connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connected.EntityData.Children = types.NewOrderedMap()
    connected.EntityData.Leafs = types.NewOrderedMap()
    connected.EntityData.Leafs.Append("rt-set-msg-count", types.YLeaf{"RtSetMsgCount", connected.RtSetMsgCount})
    connected.EntityData.Leafs.Append("operation-msg-count", types.YLeaf{"OperationMsgCount", connected.OperationMsgCount})
    connected.EntityData.Leafs.Append("oor-label-count", types.YLeaf{"OorLabelCount", connected.OorLabelCount})
    connected.EntityData.Leafs.Append("error-msg-count", types.YLeaf{"ErrorMsgCount", connected.ErrorMsgCount})

    connected.EntityData.YListKeys = []string {}

    return &(connected.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextCount
// Label context count
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelContextCount *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextCount) GetEntityData() *types.CommonEntityData {
    labelContextCount.EntityData.YFilter = labelContextCount.YFilter
    labelContextCount.EntityData.YangName = "label-context-count"
    labelContextCount.EntityData.BundleName = "cisco_ios_xr"
    labelContextCount.EntityData.ParentYangName = "application-statistics"
    labelContextCount.EntityData.SegmentPath = "label-context-count"
    labelContextCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContextCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContextCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContextCount.EntityData.Children = types.NewOrderedMap()
    labelContextCount.EntityData.Leafs = types.NewOrderedMap()
    labelContextCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelContextCount.Entry})

    labelContextCount.EntityData.YListKeys = []string {}

    return &(labelContextCount.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextPendingCount
// Label context pending count
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextPendingCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelContextPendingCount *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_LabelContextPendingCount) GetEntityData() *types.CommonEntityData {
    labelContextPendingCount.EntityData.YFilter = labelContextPendingCount.YFilter
    labelContextPendingCount.EntityData.YangName = "label-context-pending-count"
    labelContextPendingCount.EntityData.BundleName = "cisco_ios_xr"
    labelContextPendingCount.EntityData.ParentYangName = "application-statistics"
    labelContextPendingCount.EntityData.SegmentPath = "label-context-pending-count"
    labelContextPendingCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContextPendingCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContextPendingCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContextPendingCount.EntityData.Children = types.NewOrderedMap()
    labelContextPendingCount.EntityData.Leafs = types.NewOrderedMap()
    labelContextPendingCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelContextPendingCount.Entry})

    labelContextPendingCount.EntityData.YListKeys = []string {}

    return &(labelContextPendingCount.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs
// Dynamic label range summary by VRF
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dynamic label range summary by VRF. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf.
    LabelSummaryVrf []*MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetEntityData() *types.CommonEntityData {
    labelSummaryVrfs.EntityData.YFilter = labelSummaryVrfs.YFilter
    labelSummaryVrfs.EntityData.YangName = "label-summary-vrfs"
    labelSummaryVrfs.EntityData.BundleName = "cisco_ios_xr"
    labelSummaryVrfs.EntityData.ParentYangName = "mpls-lsd-node"
    labelSummaryVrfs.EntityData.SegmentPath = "label-summary-vrfs"
    labelSummaryVrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummaryVrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummaryVrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummaryVrfs.EntityData.Children = types.NewOrderedMap()
    labelSummaryVrfs.EntityData.Children.Append("label-summary-vrf", types.YChild{"LabelSummaryVrf", nil})
    for i := range labelSummaryVrfs.LabelSummaryVrf {
        labelSummaryVrfs.EntityData.Children.Append(types.GetSegmentPath(labelSummaryVrfs.LabelSummaryVrf[i]), types.YChild{"LabelSummaryVrf", labelSummaryVrfs.LabelSummaryVrf[i]})
    }
    labelSummaryVrfs.EntityData.Leafs = types.NewOrderedMap()

    labelSummaryVrfs.EntityData.YListKeys = []string {}

    return &(labelSummaryVrfs.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf
// Dynamic label range summary by VRF
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount.
    OwnerCount []*MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetEntityData() *types.CommonEntityData {
    labelSummaryVrf.EntityData.YFilter = labelSummaryVrf.YFilter
    labelSummaryVrf.EntityData.YangName = "label-summary-vrf"
    labelSummaryVrf.EntityData.BundleName = "cisco_ios_xr"
    labelSummaryVrf.EntityData.ParentYangName = "label-summary-vrfs"
    labelSummaryVrf.EntityData.SegmentPath = "label-summary-vrf" + types.AddKeyToken(labelSummaryVrf.VrfName, "vrf-name")
    labelSummaryVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummaryVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummaryVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummaryVrf.EntityData.Children = types.NewOrderedMap()
    labelSummaryVrf.EntityData.Children.Append("owner-count", types.YChild{"OwnerCount", nil})
    for i := range labelSummaryVrf.OwnerCount {
        labelSummaryVrf.EntityData.Children.Append(types.GetSegmentPath(labelSummaryVrf.OwnerCount[i]), types.YChild{"OwnerCount", labelSummaryVrf.OwnerCount[i]})
    }
    labelSummaryVrf.EntityData.Leafs = types.NewOrderedMap()
    labelSummaryVrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", labelSummaryVrf.VrfName})
    labelSummaryVrf.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", labelSummaryVrf.VrfNameXr})
    labelSummaryVrf.EntityData.Leafs.Append("total-labels", types.YLeaf{"TotalLabels", labelSummaryVrf.TotalLabels})
    labelSummaryVrf.EntityData.Leafs.Append("rsi-connected", types.YLeaf{"RsiConnected", labelSummaryVrf.RsiConnected})

    labelSummaryVrf.EntityData.YListKeys = []string {"VrfName"}

    return &(labelSummaryVrf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
// Owner counts
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetEntityData() *types.CommonEntityData {
    ownerCount.EntityData.YFilter = ownerCount.YFilter
    ownerCount.EntityData.YangName = "owner-count"
    ownerCount.EntityData.BundleName = "cisco_ios_xr"
    ownerCount.EntityData.ParentYangName = "label-summary-vrf"
    ownerCount.EntityData.SegmentPath = "owner-count"
    ownerCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ownerCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ownerCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ownerCount.EntityData.Children = types.NewOrderedMap()
    ownerCount.EntityData.Leafs = types.NewOrderedMap()
    ownerCount.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", ownerCount.ApplicationType})
    ownerCount.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", ownerCount.ApplicationName})
    ownerCount.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", ownerCount.ApplicationRolePrimary})
    ownerCount.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", ownerCount.ApplicationInstance})
    ownerCount.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", ownerCount.NumberOfLabels})

    ownerCount.EntityData.YListKeys = []string {}

    return &(ownerCount.EntityData)
}

// MplsLsdNodes_MplsLsdNode_LabelRange
// Label range
type MplsLsdNodes_MplsLsdNode_LabelRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minimum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MinDynamicLabelValue interface{}

    // Maximum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MaxDynamicLabelValue interface{}

    // Minimum static label value. The type is interface{} with range:
    // 0..4294967295.
    MinStaticLabelValue interface{}

    // Maximum static label value. The type is interface{} with range:
    // 0..4294967295.
    MaxStaticLabelValue interface{}
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetEntityData() *types.CommonEntityData {
    labelRange.EntityData.YFilter = labelRange.YFilter
    labelRange.EntityData.YangName = "label-range"
    labelRange.EntityData.BundleName = "cisco_ios_xr"
    labelRange.EntityData.ParentYangName = "mpls-lsd-node"
    labelRange.EntityData.SegmentPath = "label-range"
    labelRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRange.EntityData.Children = types.NewOrderedMap()
    labelRange.EntityData.Leafs = types.NewOrderedMap()
    labelRange.EntityData.Leafs.Append("min-dynamic-label-value", types.YLeaf{"MinDynamicLabelValue", labelRange.MinDynamicLabelValue})
    labelRange.EntityData.Leafs.Append("max-dynamic-label-value", types.YLeaf{"MaxDynamicLabelValue", labelRange.MaxDynamicLabelValue})
    labelRange.EntityData.Leafs.Append("min-static-label-value", types.YLeaf{"MinStaticLabelValue", labelRange.MinStaticLabelValue})
    labelRange.EntityData.Leafs.Append("max-static-label-value", types.YLeaf{"MaxStaticLabelValue", labelRange.MaxStaticLabelValue})

    labelRange.EntityData.YListKeys = []string {}

    return &(labelRange.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs
// Rewrite Summary by VRF
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite summary by VRF VRF-name. The type is slice of
    // MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf.
    RewriteSummaryVrf []*MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetEntityData() *types.CommonEntityData {
    rewriteSummaryVrfs.EntityData.YFilter = rewriteSummaryVrfs.YFilter
    rewriteSummaryVrfs.EntityData.YangName = "rewrite-summary-vrfs"
    rewriteSummaryVrfs.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummaryVrfs.EntityData.ParentYangName = "mpls-lsd-node"
    rewriteSummaryVrfs.EntityData.SegmentPath = "rewrite-summary-vrfs"
    rewriteSummaryVrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummaryVrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummaryVrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummaryVrfs.EntityData.Children = types.NewOrderedMap()
    rewriteSummaryVrfs.EntityData.Children.Append("rewrite-summary-vrf", types.YChild{"RewriteSummaryVrf", nil})
    for i := range rewriteSummaryVrfs.RewriteSummaryVrf {
        rewriteSummaryVrfs.EntityData.Children.Append(types.GetSegmentPath(rewriteSummaryVrfs.RewriteSummaryVrf[i]), types.YChild{"RewriteSummaryVrf", rewriteSummaryVrfs.RewriteSummaryVrf[i]})
    }
    rewriteSummaryVrfs.EntityData.Leafs = types.NewOrderedMap()

    rewriteSummaryVrfs.EntityData.YListKeys = []string {}

    return &(rewriteSummaryVrfs.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf
// Rewrite summary by VRF VRF-name
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4rpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6rpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetEntityData() *types.CommonEntityData {
    rewriteSummaryVrf.EntityData.YFilter = rewriteSummaryVrf.YFilter
    rewriteSummaryVrf.EntityData.YangName = "rewrite-summary-vrf"
    rewriteSummaryVrf.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummaryVrf.EntityData.ParentYangName = "rewrite-summary-vrfs"
    rewriteSummaryVrf.EntityData.SegmentPath = "rewrite-summary-vrf" + types.AddKeyToken(rewriteSummaryVrf.VrfName, "vrf-name")
    rewriteSummaryVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummaryVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummaryVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummaryVrf.EntityData.Children = types.NewOrderedMap()
    rewriteSummaryVrf.EntityData.Children.Append("ipv4-paths", types.YChild{"Ipv4Paths", &rewriteSummaryVrf.Ipv4Paths})
    rewriteSummaryVrf.EntityData.Children.Append("ipv6-paths", types.YChild{"Ipv6Paths", &rewriteSummaryVrf.Ipv6Paths})
    rewriteSummaryVrf.EntityData.Leafs = types.NewOrderedMap()
    rewriteSummaryVrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rewriteSummaryVrf.VrfName})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-label-fpi", types.YLeaf{"NumLabelFpi", rewriteSummaryVrf.NumLabelFpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-tefpi", types.YLeaf{"NumTefpi", rewriteSummaryVrf.NumTefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-ipv4fpi", types.YLeaf{"NumIpv4fpi", rewriteSummaryVrf.NumIpv4fpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-ipv6fpi", types.YLeaf{"NumIpv6fpi", rewriteSummaryVrf.NumIpv6fpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-pw-list-tefpi", types.YLeaf{"NumPwListTefpi", rewriteSummaryVrf.NumPwListTefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-dmtctefpi", types.YLeaf{"NumDmtctefpi", rewriteSummaryVrf.NumDmtctefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-rewrite", types.YLeaf{"NumRewrite", rewriteSummaryVrf.NumRewrite})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-forward-update", types.YLeaf{"TotalForwardUpdate", rewriteSummaryVrf.TotalForwardUpdate})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-forwad-update-message", types.YLeaf{"TotalForwadUpdateMessage", rewriteSummaryVrf.TotalForwadUpdateMessage})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", rewriteSummaryVrf.TotalPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-t-ev4-paths", types.YLeaf{"TotalTEv4Paths", rewriteSummaryVrf.TotalTEv4Paths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-te-head-paths", types.YLeaf{"TotalTeHeadPaths", rewriteSummaryVrf.TotalTeHeadPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-pw-paths", types.YLeaf{"TotalPwPaths", rewriteSummaryVrf.TotalPwPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ip-sub-paths", types.YLeaf{"TotalIpSubPaths", rewriteSummaryVrf.TotalIpSubPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ipv4rpf-neighbors", types.YLeaf{"TotalIpv4rpfNeighbors", rewriteSummaryVrf.TotalIpv4rpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ipv6rpf-neighbors", types.YLeaf{"TotalIpv6rpfNeighbors", rewriteSummaryVrf.TotalIpv6rpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-rewrite-rpf-neighbors", types.YLeaf{"NumRewriteRpfNeighbors", rewriteSummaryVrf.NumRewriteRpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-dmtc-intf", types.YLeaf{"TotalDmtcIntf", rewriteSummaryVrf.TotalDmtcIntf})
    rewriteSummaryVrf.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", rewriteSummaryVrf.VrfNameXr})

    rewriteSummaryVrf.EntityData.YListKeys = []string {"VrfName"}

    return &(rewriteSummaryVrf.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths
// Count for IPv4 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetEntityData() *types.CommonEntityData {
    ipv4Paths.EntityData.YFilter = ipv4Paths.YFilter
    ipv4Paths.EntityData.YangName = "ipv4-paths"
    ipv4Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv4Paths.EntityData.ParentYangName = "rewrite-summary-vrf"
    ipv4Paths.EntityData.SegmentPath = "ipv4-paths"
    ipv4Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Paths.EntityData.Children = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv4Paths.TotalPaths})
    ipv4Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv4Paths.TotalBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv4Paths.TotalRemoteBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv4Paths.TotalProtectedPaths})
    ipv4Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv4Paths.TotalPopLkupPaths})

    ipv4Paths.EntityData.YListKeys = []string {}

    return &(ipv4Paths.EntityData)
}

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
// Count for IPv6 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetEntityData() *types.CommonEntityData {
    ipv6Paths.EntityData.YFilter = ipv6Paths.YFilter
    ipv6Paths.EntityData.YangName = "ipv6-paths"
    ipv6Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv6Paths.EntityData.ParentYangName = "rewrite-summary-vrf"
    ipv6Paths.EntityData.SegmentPath = "ipv6-paths"
    ipv6Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Paths.EntityData.Children = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv6Paths.TotalPaths})
    ipv6Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv6Paths.TotalBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv6Paths.TotalRemoteBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv6Paths.TotalProtectedPaths})
    ipv6Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv6Paths.TotalPopLkupPaths})

    ipv6Paths.EntityData.YListKeys = []string {}

    return &(ipv6Paths.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Interfaces
// Table of MPLS interfaces
type MplsLsdNodes_MplsLsdNode_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Interfaces_Interface.
    Interface []*MplsLsdNodes_MplsLsdNode_Interfaces_Interface
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "mpls-lsd-node"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Interfaces_Interface
// Data for MPLS interface
type MplsLsdNodes_MplsLsdNode_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Interface interface{}

    // Interface state. The type is MgmtLsdIntfState.
    InterfaceState interface{}

    // Application Owner. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner.
    ApplicationOwner []*MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range self.ApplicationOwner {
        self.EntityData.Children.Append(types.GetSegmentPath(self.ApplicationOwner[i]), types.YChild{"ApplicationOwner", self.ApplicationOwner[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner
// Application Owner
type MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "interface"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd
// mpls lsd
type MplsLsd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of MPLS clients using LSD.
    Clients MplsLsd_Clients

    // Dynamic label range.
    LabelSummary MplsLsd_LabelSummary

    // Table of labels.
    Labels MplsLsd_Labels

    // FRR database.
    FrrDatabase MplsLsd_FrrDatabase

    // Table of rewrites.
    Rewrite MplsLsd_Rewrite

    // Rewrite Summary .
    RewriteSummary MplsLsd_RewriteSummary

    // Table of MPLS applications using LSD.
    Applications MplsLsd_Applications

    // Dynamic label range summary by VRF.
    LabelSummaryVrfs MplsLsd_LabelSummaryVrfs

    // Label range.
    LabelRange MplsLsd_LabelRange

    // Rewrite Summary by VRF.
    RewriteSummaryVrfs MplsLsd_RewriteSummaryVrfs

    // Table of MPLS interfaces.
    Interfaces MplsLsd_Interfaces
}

func (mplsLsd *MplsLsd) GetEntityData() *types.CommonEntityData {
    mplsLsd.EntityData.YFilter = mplsLsd.YFilter
    mplsLsd.EntityData.YangName = "mpls-lsd"
    mplsLsd.EntityData.BundleName = "cisco_ios_xr"
    mplsLsd.EntityData.ParentYangName = "Cisco-IOS-XR-mpls-lsd-oper"
    mplsLsd.EntityData.SegmentPath = "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd"
    mplsLsd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsLsd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsLsd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsLsd.EntityData.Children = types.NewOrderedMap()
    mplsLsd.EntityData.Children.Append("clients", types.YChild{"Clients", &mplsLsd.Clients})
    mplsLsd.EntityData.Children.Append("label-summary", types.YChild{"LabelSummary", &mplsLsd.LabelSummary})
    mplsLsd.EntityData.Children.Append("labels", types.YChild{"Labels", &mplsLsd.Labels})
    mplsLsd.EntityData.Children.Append("frr-database", types.YChild{"FrrDatabase", &mplsLsd.FrrDatabase})
    mplsLsd.EntityData.Children.Append("rewrite", types.YChild{"Rewrite", &mplsLsd.Rewrite})
    mplsLsd.EntityData.Children.Append("rewrite-summary", types.YChild{"RewriteSummary", &mplsLsd.RewriteSummary})
    mplsLsd.EntityData.Children.Append("applications", types.YChild{"Applications", &mplsLsd.Applications})
    mplsLsd.EntityData.Children.Append("label-summary-vrfs", types.YChild{"LabelSummaryVrfs", &mplsLsd.LabelSummaryVrfs})
    mplsLsd.EntityData.Children.Append("label-range", types.YChild{"LabelRange", &mplsLsd.LabelRange})
    mplsLsd.EntityData.Children.Append("rewrite-summary-vrfs", types.YChild{"RewriteSummaryVrfs", &mplsLsd.RewriteSummaryVrfs})
    mplsLsd.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &mplsLsd.Interfaces})
    mplsLsd.EntityData.Leafs = types.NewOrderedMap()

    mplsLsd.EntityData.YListKeys = []string {}

    return &(mplsLsd.EntityData)
}

// MplsLsd_Clients
// Table of MPLS clients using LSD
type MplsLsd_Clients struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS client using LSD. The type is slice of
    // MplsLsd_Clients_Client.
    Client []*MplsLsd_Clients_Client
}

func (clients *MplsLsd_Clients) GetEntityData() *types.CommonEntityData {
    clients.EntityData.YFilter = clients.YFilter
    clients.EntityData.YangName = "clients"
    clients.EntityData.BundleName = "cisco_ios_xr"
    clients.EntityData.ParentYangName = "mpls-lsd"
    clients.EntityData.SegmentPath = "clients"
    clients.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clients.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clients.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clients.EntityData.Children = types.NewOrderedMap()
    clients.EntityData.Children.Append("client", types.YChild{"Client", nil})
    for i := range clients.Client {
        clients.EntityData.Children.Append(types.GetSegmentPath(clients.Client[i]), types.YChild{"Client", clients.Client[i]})
    }
    clients.EntityData.Leafs = types.NewOrderedMap()

    clients.EntityData.YListKeys = []string {}

    return &(clients.EntityData)
}

// MplsLsd_Clients_Client
// Data for MPLS client using LSD
type MplsLsd_Clients_Client struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Client Instance name in the form of    
    // 'Application-<client_name>' or      'BCDL_Agent-<index:parent_index>'. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ClientName interface{}

    // Client Index Value. The type is interface{} with range: 0..4294967295.
    ClientIndex interface{}

    // Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Client union.
    ClientUnion MplsLsd_Clients_Client_ClientUnion
}

func (client *MplsLsd_Clients_Client) GetEntityData() *types.CommonEntityData {
    client.EntityData.YFilter = client.YFilter
    client.EntityData.YangName = "client"
    client.EntityData.BundleName = "cisco_ios_xr"
    client.EntityData.ParentYangName = "clients"
    client.EntityData.SegmentPath = "client" + types.AddKeyToken(client.ClientName, "client-name")
    client.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    client.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    client.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    client.EntityData.Children = types.NewOrderedMap()
    client.EntityData.Children.Append("client-union", types.YChild{"ClientUnion", &client.ClientUnion})
    client.EntityData.Leafs = types.NewOrderedMap()
    client.EntityData.Leafs.Append("client-name", types.YLeaf{"ClientName", client.ClientName})
    client.EntityData.Leafs.Append("client-index", types.YLeaf{"ClientIndex", client.ClientIndex})
    client.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", client.NodeId})

    client.EntityData.YListKeys = []string {"ClientName"}

    return &(client.EntityData)
}

// MplsLsd_Clients_Client_ClientUnion
// Client union
type MplsLsd_Clients_Client_ClientUnion struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LSDClientType. The type is MgmtLsdClient.
    LsdClientType interface{}

    // Application client.
    Application MplsLsd_Clients_Client_ClientUnion_Application

    // BCDL agent client.
    BcdlAgent MplsLsd_Clients_Client_ClientUnion_BcdlAgent
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetEntityData() *types.CommonEntityData {
    clientUnion.EntityData.YFilter = clientUnion.YFilter
    clientUnion.EntityData.YangName = "client-union"
    clientUnion.EntityData.BundleName = "cisco_ios_xr"
    clientUnion.EntityData.ParentYangName = "client"
    clientUnion.EntityData.SegmentPath = "client-union"
    clientUnion.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clientUnion.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clientUnion.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clientUnion.EntityData.Children = types.NewOrderedMap()
    clientUnion.EntityData.Children.Append("application", types.YChild{"Application", &clientUnion.Application})
    clientUnion.EntityData.Children.Append("bcdl-agent", types.YChild{"BcdlAgent", &clientUnion.BcdlAgent})
    clientUnion.EntityData.Leafs = types.NewOrderedMap()
    clientUnion.EntityData.Leafs.Append("lsd-client-type", types.YLeaf{"LsdClientType", clientUnion.LsdClientType})

    clientUnion.EntityData.YListKeys = []string {}

    return &(clientUnion.EntityData)
}

// MplsLsd_Clients_Client_ClientUnion_Application
// Application client
type MplsLsd_Clients_Client_ClientUnion_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "client-union"
    application.EntityData.SegmentPath = "application"
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", application.ApplicationName})
    application.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", application.ApplicationType})
    application.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", application.ApplicationInstance})
    application.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", application.ApplicationRolePrimary})

    application.EntityData.YListKeys = []string {}

    return &(application.EntityData)
}

// MplsLsd_Clients_Client_ClientUnion_BcdlAgent
// BCDL agent client
type MplsLsd_Clients_Client_ClientUnion_BcdlAgent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BCDL Agent client connection index. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientConnIndex interface{}

    // BCDL Agent parent client connection index. The type is interface{} with
    // range: -2147483648..2147483647.
    ParentClientConnIndex interface{}
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetEntityData() *types.CommonEntityData {
    bcdlAgent.EntityData.YFilter = bcdlAgent.YFilter
    bcdlAgent.EntityData.YangName = "bcdl-agent"
    bcdlAgent.EntityData.BundleName = "cisco_ios_xr"
    bcdlAgent.EntityData.ParentYangName = "client-union"
    bcdlAgent.EntityData.SegmentPath = "bcdl-agent"
    bcdlAgent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bcdlAgent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bcdlAgent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bcdlAgent.EntityData.Children = types.NewOrderedMap()
    bcdlAgent.EntityData.Leafs = types.NewOrderedMap()
    bcdlAgent.EntityData.Leafs.Append("client-conn-index", types.YLeaf{"ClientConnIndex", bcdlAgent.ClientConnIndex})
    bcdlAgent.EntityData.Leafs.Append("parent-client-conn-index", types.YLeaf{"ParentClientConnIndex", bcdlAgent.ParentClientConnIndex})

    bcdlAgent.EntityData.YListKeys = []string {}

    return &(bcdlAgent.EntityData)
}

// MplsLsd_LabelSummary
// Dynamic label range
type MplsLsd_LabelSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of MplsLsd_LabelSummary_OwnerCount.
    OwnerCount []*MplsLsd_LabelSummary_OwnerCount
}

func (labelSummary *MplsLsd_LabelSummary) GetEntityData() *types.CommonEntityData {
    labelSummary.EntityData.YFilter = labelSummary.YFilter
    labelSummary.EntityData.YangName = "label-summary"
    labelSummary.EntityData.BundleName = "cisco_ios_xr"
    labelSummary.EntityData.ParentYangName = "mpls-lsd"
    labelSummary.EntityData.SegmentPath = "label-summary"
    labelSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummary.EntityData.Children = types.NewOrderedMap()
    labelSummary.EntityData.Children.Append("owner-count", types.YChild{"OwnerCount", nil})
    for i := range labelSummary.OwnerCount {
        labelSummary.EntityData.Children.Append(types.GetSegmentPath(labelSummary.OwnerCount[i]), types.YChild{"OwnerCount", labelSummary.OwnerCount[i]})
    }
    labelSummary.EntityData.Leafs = types.NewOrderedMap()
    labelSummary.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", labelSummary.VrfNameXr})
    labelSummary.EntityData.Leafs.Append("total-labels", types.YLeaf{"TotalLabels", labelSummary.TotalLabels})
    labelSummary.EntityData.Leafs.Append("rsi-connected", types.YLeaf{"RsiConnected", labelSummary.RsiConnected})

    labelSummary.EntityData.YListKeys = []string {}

    return &(labelSummary.EntityData)
}

// MplsLsd_LabelSummary_OwnerCount
// Owner counts
type MplsLsd_LabelSummary_OwnerCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetEntityData() *types.CommonEntityData {
    ownerCount.EntityData.YFilter = ownerCount.YFilter
    ownerCount.EntityData.YangName = "owner-count"
    ownerCount.EntityData.BundleName = "cisco_ios_xr"
    ownerCount.EntityData.ParentYangName = "label-summary"
    ownerCount.EntityData.SegmentPath = "owner-count"
    ownerCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ownerCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ownerCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ownerCount.EntityData.Children = types.NewOrderedMap()
    ownerCount.EntityData.Leafs = types.NewOrderedMap()
    ownerCount.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", ownerCount.ApplicationType})
    ownerCount.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", ownerCount.ApplicationName})
    ownerCount.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", ownerCount.ApplicationRolePrimary})
    ownerCount.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", ownerCount.ApplicationInstance})
    ownerCount.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", ownerCount.NumberOfLabels})

    ownerCount.EntityData.YListKeys = []string {}

    return &(ownerCount.EntityData)
}

// MplsLsd_Labels
// Table of labels
type MplsLsd_Labels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for label. The type is slice of MplsLsd_Labels_Label.
    Label []*MplsLsd_Labels_Label
}

func (labels *MplsLsd_Labels) GetEntityData() *types.CommonEntityData {
    labels.EntityData.YFilter = labels.YFilter
    labels.EntityData.YangName = "labels"
    labels.EntityData.BundleName = "cisco_ios_xr"
    labels.EntityData.ParentYangName = "mpls-lsd"
    labels.EntityData.SegmentPath = "labels"
    labels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labels.EntityData.Children = types.NewOrderedMap()
    labels.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range labels.Label {
        labels.EntityData.Children.Append(types.GetSegmentPath(labels.Label[i]), types.YChild{"Label", labels.Label[i]})
    }
    labels.EntityData.Leafs = types.NewOrderedMap()

    labels.EntityData.YListKeys = []string {}

    return &(labels.EntityData)
}

// MplsLsd_Labels_Label
// Data for label
type MplsLsd_Labels_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    LabelId interface{}

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Rewrite bound to label. The type is interface{} with range:
    // -2147483648..2147483647.
    RewriteIsBound interface{}

    // Rewrite owner. The type is interface{} with range: 0..4294967295.
    RewriteOwners interface{}

    // RSI connected. The type is interface{} with range: -2147483648..2147483647.
    RsIconnected interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Label context.
    LabelContext MplsLsd_Labels_Label_LabelContext

    // Application owner. The type is slice of
    // MplsLsd_Labels_Label_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Labels_Label_ApplicationOwner
}

func (label *MplsLsd_Labels_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "labels"
    label.EntityData.SegmentPath = "label" + types.AddKeyToken(label.LabelId, "label-id")
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &label.LabelContext})
    label.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range label.ApplicationOwner {
        label.EntityData.Children.Append(types.GetSegmentPath(label.ApplicationOwner[i]), types.YChild{"ApplicationOwner", label.ApplicationOwner[i]})
    }
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("label-id", types.YLeaf{"LabelId", label.LabelId})
    label.EntityData.Leafs.Append("label", types.YLeaf{"Label", label.Label})
    label.EntityData.Leafs.Append("rewrite-is-bound", types.YLeaf{"RewriteIsBound", label.RewriteIsBound})
    label.EntityData.Leafs.Append("rewrite-owners", types.YLeaf{"RewriteOwners", label.RewriteOwners})
    label.EntityData.Leafs.Append("rs-iconnected", types.YLeaf{"RsIconnected", label.RsIconnected})
    label.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", label.VrfName})

    label.EntityData.YListKeys = []string {"LabelId"}

    return &(label.EntityData)
}

// MplsLsd_Labels_Label_LabelContext
// Label context
type MplsLsd_Labels_Label_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application opaque data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ApplicationData interface{}

    // Label Key.
    Key MplsLsd_Labels_Label_LabelContext_Key
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "label"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("key", types.YChild{"Key", &labelContext.Key})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("application-data", types.YLeaf{"ApplicationData", labelContext.ApplicationData})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key
// Label Key
type MplsLsd_Labels_Label_LabelContext_Key struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Labels_Label_LabelContext_Key_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsd_Labels_Label_LabelContext_Key_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsd_Labels_Label_LabelContext_Key_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsd_Labels_Label_LabelContext_Key_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsd_Labels_Label_LabelContext_Key_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsd_Labels_Label_LabelContext_Key_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Labels_Label_LabelContext_Key_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Labels_Label_LabelContext_Key_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsd_Labels_Label_LabelContext_Key_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Labels_Label_LabelContext_Key_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Labels_Label_LabelContext_Key_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsd_Labels_Label_LabelContext_Key_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsd_Labels_Label_LabelContext_Key_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Labels_Label_LabelContext_Key_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetEntityData() *types.CommonEntityData {
    key.EntityData.YFilter = key.YFilter
    key.EntityData.YangName = "key"
    key.EntityData.BundleName = "cisco_ios_xr"
    key.EntityData.ParentYangName = "label-context"
    key.EntityData.SegmentPath = "key"
    key.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    key.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    key.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    key.EntityData.Children = types.NewOrderedMap()
    key.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &key.Ipv4Data})
    key.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &key.Ipv6Data})
    key.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &key.Tev4Data})
    key.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &key.Ipv4l3vpnData})
    key.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &key.Ipv6l3vpnData})
    key.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &key.VrfL3vpnData})
    key.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &key.Cev4l3vpnData})
    key.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &key.Cev6l3vpnData})
    key.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &key.PseudowireData})
    key.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &key.LabelBlockData})
    key.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &key.IpSubData})
    key.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &key.Tev4p2mpData})
    key.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &key.MldPv4Data})
    key.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &key.PseudowireHeadEndData})
    key.EntityData.Children.Append("tp-data", types.YChild{"TpData", &key.TpData})
    key.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &key.GenericRoutingEncapsulation})
    key.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &key.Ipv6GenericRoutingEncapsulation})
    key.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &key.EvpnData})
    key.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &key.Ipv4blbData})
    key.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &key.Ipv6blbData})
    key.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &key.PiMiPmsiData})
    key.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &key.PiMsPmsiData})
    key.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &key.NextHopSetL3vpn})
    key.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &key.SrPrefixSegment})
    key.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &key.SrAdjSegmentIpv4})
    key.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &key.SrAdjSegmentIpv6})
    key.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &key.LabelBlockSrgbData})
    key.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &key.TeBinding})
    key.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &key.LabelBlockSrlbData})
    key.EntityData.Leafs = types.NewOrderedMap()
    key.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", key.LabelContextType})

    key.EntityData.YListKeys = []string {}

    return &(key.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data
// IPv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "key"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data
// IPv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "key"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Tev4Data
// TEv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "key"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "key"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "key"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_VrfL3vpnData
// L3VPN VRF label context
type MplsLsd_Labels_Label_LabelContext_Key_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "key"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "key"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "key"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_PseudowireData
// Pseudowire label context
type MplsLsd_Labels_Label_LabelContext_Key_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "key"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData
// Label block context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "key"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_IpSubData
// IP Subscriber context
type MplsLsd_Labels_Label_LabelContext_Key_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "key"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Tev4p2mpData
// TEv4 P2MP context
type MplsLsd_Labels_Label_LabelContext_Key_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "key"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "key"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "key"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_TpData
// TP context
type MplsLsd_Labels_Label_LabelContext_Key_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "key"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "key"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "key"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_EvpnData
// EVPN context
type MplsLsd_Labels_Label_LabelContext_Key_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "key"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4blbData
// BFD BLB label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "key"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6blbData
// BFD BLB label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "key"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "key"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "key"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "key"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "key"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "key"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "key"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "key"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Labels_Label_LabelContext_Key_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "key"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "key"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsd_Labels_Label_ApplicationOwner
// Application owner
type MplsLsd_Labels_Label_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "label"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_FrrDatabase
// FRR database
type MplsLsd_FrrDatabase struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of FRR database entries - Tunnel midpoints.
    TunnelMidpoints MplsLsd_FrrDatabase_TunnelMidpoints

    // Table of FRR database entries - Tunnel heads.
    TunnelHeads MplsLsd_FrrDatabase_TunnelHeads

    // Summary data for FRR database entry - Tunnel head.
    TunnelHeadSummary MplsLsd_FrrDatabase_TunnelHeadSummary

    // Sumary table of Protected Interfaces.
    SummaryProtectedInterfaces MplsLsd_FrrDatabase_SummaryProtectedInterfaces

    // Summary data for FRR database entry.
    TunnelSummary MplsLsd_FrrDatabase_TunnelSummary

    // Summary data for FRR database entry - Tunnel midpoint.
    TunnelMidpointSummary MplsLsd_FrrDatabase_TunnelMidpointSummary
}

func (frrDatabase *MplsLsd_FrrDatabase) GetEntityData() *types.CommonEntityData {
    frrDatabase.EntityData.YFilter = frrDatabase.YFilter
    frrDatabase.EntityData.YangName = "frr-database"
    frrDatabase.EntityData.BundleName = "cisco_ios_xr"
    frrDatabase.EntityData.ParentYangName = "mpls-lsd"
    frrDatabase.EntityData.SegmentPath = "frr-database"
    frrDatabase.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrDatabase.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrDatabase.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrDatabase.EntityData.Children = types.NewOrderedMap()
    frrDatabase.EntityData.Children.Append("tunnel-midpoints", types.YChild{"TunnelMidpoints", &frrDatabase.TunnelMidpoints})
    frrDatabase.EntityData.Children.Append("tunnel-heads", types.YChild{"TunnelHeads", &frrDatabase.TunnelHeads})
    frrDatabase.EntityData.Children.Append("tunnel-head-summary", types.YChild{"TunnelHeadSummary", &frrDatabase.TunnelHeadSummary})
    frrDatabase.EntityData.Children.Append("summary-protected-interfaces", types.YChild{"SummaryProtectedInterfaces", &frrDatabase.SummaryProtectedInterfaces})
    frrDatabase.EntityData.Children.Append("tunnel-summary", types.YChild{"TunnelSummary", &frrDatabase.TunnelSummary})
    frrDatabase.EntityData.Children.Append("tunnel-midpoint-summary", types.YChild{"TunnelMidpointSummary", &frrDatabase.TunnelMidpointSummary})
    frrDatabase.EntityData.Leafs = types.NewOrderedMap()

    frrDatabase.EntityData.YListKeys = []string {}

    return &(frrDatabase.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints
// Table of FRR database entries - Tunnel
// midpoints
type MplsLsd_FrrDatabase_TunnelMidpoints struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel midpoint. The type is slice of
    // MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint.
    TunnelMidpoint []*MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetEntityData() *types.CommonEntityData {
    tunnelMidpoints.EntityData.YFilter = tunnelMidpoints.YFilter
    tunnelMidpoints.EntityData.YangName = "tunnel-midpoints"
    tunnelMidpoints.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpoints.EntityData.ParentYangName = "frr-database"
    tunnelMidpoints.EntityData.SegmentPath = "tunnel-midpoints"
    tunnelMidpoints.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpoints.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpoints.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpoints.EntityData.Children = types.NewOrderedMap()
    tunnelMidpoints.EntityData.Children.Append("tunnel-midpoint", types.YChild{"TunnelMidpoint", nil})
    for i := range tunnelMidpoints.TunnelMidpoint {
        tunnelMidpoints.EntityData.Children.Append(types.GetSegmentPath(tunnelMidpoints.TunnelMidpoint[i]), types.YChild{"TunnelMidpoint", tunnelMidpoints.TunnelMidpoint[i]})
    }
    tunnelMidpoints.EntityData.Leafs = types.NewOrderedMap()

    tunnelMidpoints.EntityData.YListKeys = []string {}

    return &(tunnelMidpoints.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint
// Data for FRR database entry - Tunnel midpoint
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath.
    OutPath []*MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetEntityData() *types.CommonEntityData {
    tunnelMidpoint.EntityData.YFilter = tunnelMidpoint.YFilter
    tunnelMidpoint.EntityData.YangName = "tunnel-midpoint"
    tunnelMidpoint.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpoint.EntityData.ParentYangName = "tunnel-midpoints"
    tunnelMidpoint.EntityData.SegmentPath = "tunnel-midpoint" + types.AddKeyToken(tunnelMidpoint.Label, "label")
    tunnelMidpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpoint.EntityData.Children = types.NewOrderedMap()
    tunnelMidpoint.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &tunnelMidpoint.FrrEntryId})
    tunnelMidpoint.EntityData.Children.Append("out-path", types.YChild{"OutPath", nil})
    for i := range tunnelMidpoint.OutPath {
        tunnelMidpoint.EntityData.Children.Append(types.GetSegmentPath(tunnelMidpoint.OutPath[i]), types.YChild{"OutPath", tunnelMidpoint.OutPath[i]})
    }
    tunnelMidpoint.EntityData.Leafs = types.NewOrderedMap()
    tunnelMidpoint.EntityData.Leafs.Append("label", types.YLeaf{"Label", tunnelMidpoint.Label})
    tunnelMidpoint.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tunnelMidpoint.TunnelInterface})
    tunnelMidpoint.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", tunnelMidpoint.InputLabel})
    tunnelMidpoint.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", tunnelMidpoint.EntryFrrState})

    tunnelMidpoint.EntityData.YListKeys = []string {"Label"}

    return &(tunnelMidpoint.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId
// FRR entry ID
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "tunnel-midpoint"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head
// head
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
// midpoint
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
// Out Path List
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetEntityData() *types.CommonEntityData {
    outPath.EntityData.YFilter = outPath.YFilter
    outPath.EntityData.YangName = "out-path"
    outPath.EntityData.BundleName = "cisco_ios_xr"
    outPath.EntityData.ParentYangName = "tunnel-midpoint"
    outPath.EntityData.SegmentPath = "out-path"
    outPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outPath.EntityData.Children = types.NewOrderedMap()
    outPath.EntityData.Leafs = types.NewOrderedMap()
    outPath.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", outPath.OutInterface})
    outPath.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", outPath.OutLabel})
    outPath.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", outPath.Ipv4NextHop})
    outPath.EntityData.Leafs.Append("frr-interface", types.YLeaf{"FrrInterface", outPath.FrrInterface})
    outPath.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", outPath.FrrLabel})

    outPath.EntityData.YListKeys = []string {}

    return &(outPath.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads
// Table of FRR database entries - Tunnel heads
type MplsLsd_FrrDatabase_TunnelHeads struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel head. The type is slice of
    // MplsLsd_FrrDatabase_TunnelHeads_TunnelHead.
    TunnelHead []*MplsLsd_FrrDatabase_TunnelHeads_TunnelHead
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetEntityData() *types.CommonEntityData {
    tunnelHeads.EntityData.YFilter = tunnelHeads.YFilter
    tunnelHeads.EntityData.YangName = "tunnel-heads"
    tunnelHeads.EntityData.BundleName = "cisco_ios_xr"
    tunnelHeads.EntityData.ParentYangName = "frr-database"
    tunnelHeads.EntityData.SegmentPath = "tunnel-heads"
    tunnelHeads.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHeads.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHeads.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHeads.EntityData.Children = types.NewOrderedMap()
    tunnelHeads.EntityData.Children.Append("tunnel-head", types.YChild{"TunnelHead", nil})
    for i := range tunnelHeads.TunnelHead {
        tunnelHeads.EntityData.Children.Append(types.GetSegmentPath(tunnelHeads.TunnelHead[i]), types.YChild{"TunnelHead", tunnelHeads.TunnelHead[i]})
    }
    tunnelHeads.EntityData.Leafs = types.NewOrderedMap()

    tunnelHeads.EntityData.YListKeys = []string {}

    return &(tunnelHeads.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead
// Data for FRR database entry - Tunnel head
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath.
    OutPath []*MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetEntityData() *types.CommonEntityData {
    tunnelHead.EntityData.YFilter = tunnelHead.YFilter
    tunnelHead.EntityData.YangName = "tunnel-head"
    tunnelHead.EntityData.BundleName = "cisco_ios_xr"
    tunnelHead.EntityData.ParentYangName = "tunnel-heads"
    tunnelHead.EntityData.SegmentPath = "tunnel-head" + types.AddKeyToken(tunnelHead.InterfaceName, "interface-name")
    tunnelHead.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHead.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHead.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHead.EntityData.Children = types.NewOrderedMap()
    tunnelHead.EntityData.Children.Append("frr-entry-id", types.YChild{"FrrEntryId", &tunnelHead.FrrEntryId})
    tunnelHead.EntityData.Children.Append("out-path", types.YChild{"OutPath", nil})
    for i := range tunnelHead.OutPath {
        tunnelHead.EntityData.Children.Append(types.GetSegmentPath(tunnelHead.OutPath[i]), types.YChild{"OutPath", tunnelHead.OutPath[i]})
    }
    tunnelHead.EntityData.Leafs = types.NewOrderedMap()
    tunnelHead.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", tunnelHead.InterfaceName})
    tunnelHead.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tunnelHead.TunnelInterface})
    tunnelHead.EntityData.Leafs.Append("input-label", types.YLeaf{"InputLabel", tunnelHead.InputLabel})
    tunnelHead.EntityData.Leafs.Append("entry-frr-state", types.YLeaf{"EntryFrrState", tunnelHead.EntryFrrState})

    tunnelHead.EntityData.YListKeys = []string {"InterfaceName"}

    return &(tunnelHead.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId
// FRR entry ID
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetEntityData() *types.CommonEntityData {
    frrEntryId.EntityData.YFilter = frrEntryId.YFilter
    frrEntryId.EntityData.YangName = "frr-entry-id"
    frrEntryId.EntityData.BundleName = "cisco_ios_xr"
    frrEntryId.EntityData.ParentYangName = "tunnel-head"
    frrEntryId.EntityData.SegmentPath = "frr-entry-id"
    frrEntryId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrEntryId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrEntryId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrEntryId.EntityData.Children = types.NewOrderedMap()
    frrEntryId.EntityData.Children.Append("head", types.YChild{"Head", &frrEntryId.Head})
    frrEntryId.EntityData.Children.Append("midpoint", types.YChild{"Midpoint", &frrEntryId.Midpoint})
    frrEntryId.EntityData.Leafs = types.NewOrderedMap()
    frrEntryId.EntityData.Leafs.Append("role", types.YLeaf{"Role", frrEntryId.Role})

    frrEntryId.EntityData.YListKeys = []string {}

    return &(frrEntryId.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head
// head
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetEntityData() *types.CommonEntityData {
    head.EntityData.YFilter = head.YFilter
    head.EntityData.YangName = "head"
    head.EntityData.BundleName = "cisco_ios_xr"
    head.EntityData.ParentYangName = "frr-entry-id"
    head.EntityData.SegmentPath = "head"
    head.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    head.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    head.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    head.EntityData.Children = types.NewOrderedMap()
    head.EntityData.Leafs = types.NewOrderedMap()
    head.EntityData.Leafs.Append("destination-prefix", types.YLeaf{"DestinationPrefix", head.DestinationPrefix})
    head.EntityData.Leafs.Append("destination-prefix-length", types.YLeaf{"DestinationPrefixLength", head.DestinationPrefixLength})

    head.EntityData.YListKeys = []string {}

    return &(head.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
// midpoint
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetEntityData() *types.CommonEntityData {
    midpoint.EntityData.YFilter = midpoint.YFilter
    midpoint.EntityData.YangName = "midpoint"
    midpoint.EntityData.BundleName = "cisco_ios_xr"
    midpoint.EntityData.ParentYangName = "frr-entry-id"
    midpoint.EntityData.SegmentPath = "midpoint"
    midpoint.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    midpoint.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    midpoint.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    midpoint.EntityData.Children = types.NewOrderedMap()
    midpoint.EntityData.Leafs = types.NewOrderedMap()
    midpoint.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", midpoint.SourceAddress})
    midpoint.EntityData.Leafs.Append("lspid", types.YLeaf{"Lspid", midpoint.Lspid})
    midpoint.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", midpoint.TunnelId})

    midpoint.EntityData.YListKeys = []string {}

    return &(midpoint.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath
// Out Path List
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetEntityData() *types.CommonEntityData {
    outPath.EntityData.YFilter = outPath.YFilter
    outPath.EntityData.YangName = "out-path"
    outPath.EntityData.BundleName = "cisco_ios_xr"
    outPath.EntityData.ParentYangName = "tunnel-head"
    outPath.EntityData.SegmentPath = "out-path"
    outPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outPath.EntityData.Children = types.NewOrderedMap()
    outPath.EntityData.Leafs = types.NewOrderedMap()
    outPath.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", outPath.OutInterface})
    outPath.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", outPath.OutLabel})
    outPath.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", outPath.Ipv4NextHop})
    outPath.EntityData.Leafs.Append("frr-interface", types.YLeaf{"FrrInterface", outPath.FrrInterface})
    outPath.EntityData.Leafs.Append("frr-label", types.YLeaf{"FrrLabel", outPath.FrrLabel})

    outPath.EntityData.YListKeys = []string {}

    return &(outPath.EntityData)
}

// MplsLsd_FrrDatabase_TunnelHeadSummary
// Summary data for FRR database entry - Tunnel
// head
type MplsLsd_FrrDatabase_TunnelHeadSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetEntityData() *types.CommonEntityData {
    tunnelHeadSummary.EntityData.YFilter = tunnelHeadSummary.YFilter
    tunnelHeadSummary.EntityData.YangName = "tunnel-head-summary"
    tunnelHeadSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelHeadSummary.EntityData.ParentYangName = "frr-database"
    tunnelHeadSummary.EntityData.SegmentPath = "tunnel-head-summary"
    tunnelHeadSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelHeadSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelHeadSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelHeadSummary.EntityData.Children = types.NewOrderedMap()
    tunnelHeadSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelHeadSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelHeadSummary.Active})
    tunnelHeadSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelHeadSummary.Ready})
    tunnelHeadSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelHeadSummary.Partial})
    tunnelHeadSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelHeadSummary.Igp})

    tunnelHeadSummary.EntityData.YListKeys = []string {}

    return &(tunnelHeadSummary.EntityData)
}

// MplsLsd_FrrDatabase_SummaryProtectedInterfaces
// Sumary table of Protected Interfaces
type MplsLsd_FrrDatabase_SummaryProtectedInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface.
    SummaryProtectedInterface []*MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetEntityData() *types.CommonEntityData {
    summaryProtectedInterfaces.EntityData.YFilter = summaryProtectedInterfaces.YFilter
    summaryProtectedInterfaces.EntityData.YangName = "summary-protected-interfaces"
    summaryProtectedInterfaces.EntityData.BundleName = "cisco_ios_xr"
    summaryProtectedInterfaces.EntityData.ParentYangName = "frr-database"
    summaryProtectedInterfaces.EntityData.SegmentPath = "summary-protected-interfaces"
    summaryProtectedInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtectedInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtectedInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtectedInterfaces.EntityData.Children = types.NewOrderedMap()
    summaryProtectedInterfaces.EntityData.Children.Append("summary-protected-interface", types.YChild{"SummaryProtectedInterface", nil})
    for i := range summaryProtectedInterfaces.SummaryProtectedInterface {
        summaryProtectedInterfaces.EntityData.Children.Append(types.GetSegmentPath(summaryProtectedInterfaces.SummaryProtectedInterface[i]), types.YChild{"SummaryProtectedInterface", summaryProtectedInterfaces.SummaryProtectedInterface[i]})
    }
    summaryProtectedInterfaces.EntityData.Leafs = types.NewOrderedMap()

    summaryProtectedInterfaces.EntityData.YListKeys = []string {}

    return &(summaryProtectedInterfaces.EntityData)
}

// MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
// Data for MPLS interface
type MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetEntityData() *types.CommonEntityData {
    summaryProtectedInterface.EntityData.YFilter = summaryProtectedInterface.YFilter
    summaryProtectedInterface.EntityData.YangName = "summary-protected-interface"
    summaryProtectedInterface.EntityData.BundleName = "cisco_ios_xr"
    summaryProtectedInterface.EntityData.ParentYangName = "summary-protected-interfaces"
    summaryProtectedInterface.EntityData.SegmentPath = "summary-protected-interface" + types.AddKeyToken(summaryProtectedInterface.InterfaceName, "interface-name")
    summaryProtectedInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summaryProtectedInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summaryProtectedInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summaryProtectedInterface.EntityData.Children = types.NewOrderedMap()
    summaryProtectedInterface.EntityData.Leafs = types.NewOrderedMap()
    summaryProtectedInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", summaryProtectedInterface.InterfaceName})
    summaryProtectedInterface.EntityData.Leafs.Append("active", types.YLeaf{"Active", summaryProtectedInterface.Active})
    summaryProtectedInterface.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", summaryProtectedInterface.Ready})
    summaryProtectedInterface.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", summaryProtectedInterface.Partial})
    summaryProtectedInterface.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", summaryProtectedInterface.Igp})

    summaryProtectedInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(summaryProtectedInterface.EntityData)
}

// MplsLsd_FrrDatabase_TunnelSummary
// Summary data for FRR database entry
type MplsLsd_FrrDatabase_TunnelSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetEntityData() *types.CommonEntityData {
    tunnelSummary.EntityData.YFilter = tunnelSummary.YFilter
    tunnelSummary.EntityData.YangName = "tunnel-summary"
    tunnelSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelSummary.EntityData.ParentYangName = "frr-database"
    tunnelSummary.EntityData.SegmentPath = "tunnel-summary"
    tunnelSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelSummary.EntityData.Children = types.NewOrderedMap()
    tunnelSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelSummary.Active})
    tunnelSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelSummary.Ready})
    tunnelSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelSummary.Partial})
    tunnelSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelSummary.Igp})

    tunnelSummary.EntityData.YListKeys = []string {}

    return &(tunnelSummary.EntityData)
}

// MplsLsd_FrrDatabase_TunnelMidpointSummary
// Summary data for FRR database entry - Tunnel
// midpoint
type MplsLsd_FrrDatabase_TunnelMidpointSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetEntityData() *types.CommonEntityData {
    tunnelMidpointSummary.EntityData.YFilter = tunnelMidpointSummary.YFilter
    tunnelMidpointSummary.EntityData.YangName = "tunnel-midpoint-summary"
    tunnelMidpointSummary.EntityData.BundleName = "cisco_ios_xr"
    tunnelMidpointSummary.EntityData.ParentYangName = "frr-database"
    tunnelMidpointSummary.EntityData.SegmentPath = "tunnel-midpoint-summary"
    tunnelMidpointSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tunnelMidpointSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tunnelMidpointSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tunnelMidpointSummary.EntityData.Children = types.NewOrderedMap()
    tunnelMidpointSummary.EntityData.Leafs = types.NewOrderedMap()
    tunnelMidpointSummary.EntityData.Leafs.Append("active", types.YLeaf{"Active", tunnelMidpointSummary.Active})
    tunnelMidpointSummary.EntityData.Leafs.Append("ready", types.YLeaf{"Ready", tunnelMidpointSummary.Ready})
    tunnelMidpointSummary.EntityData.Leafs.Append("partial", types.YLeaf{"Partial", tunnelMidpointSummary.Partial})
    tunnelMidpointSummary.EntityData.Leafs.Append("igp", types.YLeaf{"Igp", tunnelMidpointSummary.Igp})

    tunnelMidpointSummary.EntityData.YListKeys = []string {}

    return &(tunnelMidpointSummary.EntityData)
}

// MplsLsd_Rewrite
// Table of rewrites
type MplsLsd_Rewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of Rewrites.
    RewritePws MplsLsd_Rewrite_RewritePws

    // Table of Rewrites.
    RewriteIpv4s MplsLsd_Rewrite_RewriteIpv4s

    // Table of Traffic Engineering Rewrites.
    RewriteTes MplsLsd_Rewrite_RewriteTes

    // Table of Rewrites.
    RewriteLabels MplsLsd_Rewrite_RewriteLabels
}

func (rewrite *MplsLsd_Rewrite) GetEntityData() *types.CommonEntityData {
    rewrite.EntityData.YFilter = rewrite.YFilter
    rewrite.EntityData.YangName = "rewrite"
    rewrite.EntityData.BundleName = "cisco_ios_xr"
    rewrite.EntityData.ParentYangName = "mpls-lsd"
    rewrite.EntityData.SegmentPath = "rewrite"
    rewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewrite.EntityData.Children = types.NewOrderedMap()
    rewrite.EntityData.Children.Append("rewrite-pws", types.YChild{"RewritePws", &rewrite.RewritePws})
    rewrite.EntityData.Children.Append("rewrite-ipv4s", types.YChild{"RewriteIpv4s", &rewrite.RewriteIpv4s})
    rewrite.EntityData.Children.Append("rewrite-tes", types.YChild{"RewriteTes", &rewrite.RewriteTes})
    rewrite.EntityData.Children.Append("rewrite-labels", types.YChild{"RewriteLabels", &rewrite.RewriteLabels})
    rewrite.EntityData.Leafs = types.NewOrderedMap()

    rewrite.EntityData.YListKeys = []string {}

    return &(rewrite.EntityData)
}

// MplsLsd_Rewrite_RewritePws
// Table of Rewrites
type MplsLsd_Rewrite_RewritePws struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for PW List. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw.
    RewritePw []*MplsLsd_Rewrite_RewritePws_RewritePw
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetEntityData() *types.CommonEntityData {
    rewritePws.EntityData.YFilter = rewritePws.YFilter
    rewritePws.EntityData.YangName = "rewrite-pws"
    rewritePws.EntityData.BundleName = "cisco_ios_xr"
    rewritePws.EntityData.ParentYangName = "rewrite"
    rewritePws.EntityData.SegmentPath = "rewrite-pws"
    rewritePws.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewritePws.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewritePws.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewritePws.EntityData.Children = types.NewOrderedMap()
    rewritePws.EntityData.Children.Append("rewrite-pw", types.YChild{"RewritePw", nil})
    for i := range rewritePws.RewritePw {
        rewritePws.EntityData.Children.Append(types.GetSegmentPath(rewritePws.RewritePw[i]), types.YChild{"RewritePw", rewritePws.RewritePw[i]})
    }
    rewritePws.EntityData.Leafs = types.NewOrderedMap()

    rewritePws.EntityData.YListKeys = []string {}

    return &(rewritePws.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw
// FPI rewrite for PW List
type MplsLsd_Rewrite_RewritePws_RewritePw struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. PW List ID. The type is interface{} with range:
    // 0..4294967295.
    PwListId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi.
    AssociatedFpi []*MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf.
    V4Rpf []*MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf.
    V6Rpf []*MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewritePws_RewritePw_Mois.
    Mois []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetEntityData() *types.CommonEntityData {
    rewritePw.EntityData.YFilter = rewritePw.YFilter
    rewritePw.EntityData.YangName = "rewrite-pw"
    rewritePw.EntityData.BundleName = "cisco_ios_xr"
    rewritePw.EntityData.ParentYangName = "rewrite-pws"
    rewritePw.EntityData.SegmentPath = "rewrite-pw" + types.AddKeyToken(rewritePw.PwListId, "pw-list-id")
    rewritePw.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewritePw.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewritePw.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewritePw.EntityData.Children = types.NewOrderedMap()
    rewritePw.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewritePw.FpiKey})
    rewritePw.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewritePw.RewriteId})
    rewritePw.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewritePw.AssociatedFpi {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewritePw.AssociatedFpi[i]})
    }
    rewritePw.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewritePw.V4Rpf {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.V4Rpf[i]), types.YChild{"V4Rpf", rewritePw.V4Rpf[i]})
    }
    rewritePw.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewritePw.V6Rpf {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.V6Rpf[i]), types.YChild{"V6Rpf", rewritePw.V6Rpf[i]})
    }
    rewritePw.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewritePw.Mois {
        rewritePw.EntityData.Children.Append(types.GetSegmentPath(rewritePw.Mois[i]), types.YChild{"Mois", rewritePw.Mois[i]})
    }
    rewritePw.EntityData.Leafs = types.NewOrderedMap()
    rewritePw.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", rewritePw.PwListId})
    rewritePw.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewritePw.RewriteVersion})
    rewritePw.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewritePw.BcdlPriority})
    rewritePw.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewritePw.LsdQueue})
    rewritePw.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewritePw.RwInstallTime})
    rewritePw.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewritePw.RwInstallAge})
    rewritePw.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewritePw.RwUpdated})
    rewritePw.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewritePw.PriorityUpdated})

    rewritePw.EntityData.YListKeys = []string {"PwListId"}

    return &(rewritePw.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey
// fpi key
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-pw"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-pw"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-pw"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-pw"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-pw"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois
// Mois
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray.
    MoiArray []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-pw"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s
// Table of Rewrites
type MplsLsd_Rewrite_RewriteIpv4s struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4.
    RewriteIpv4 []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4
}

func (rewriteIpv4s *MplsLsd_Rewrite_RewriteIpv4s) GetEntityData() *types.CommonEntityData {
    rewriteIpv4s.EntityData.YFilter = rewriteIpv4s.YFilter
    rewriteIpv4s.EntityData.YangName = "rewrite-ipv4s"
    rewriteIpv4s.EntityData.BundleName = "cisco_ios_xr"
    rewriteIpv4s.EntityData.ParentYangName = "rewrite"
    rewriteIpv4s.EntityData.SegmentPath = "rewrite-ipv4s"
    rewriteIpv4s.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteIpv4s.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteIpv4s.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteIpv4s.EntityData.Children = types.NewOrderedMap()
    rewriteIpv4s.EntityData.Children.Append("rewrite-ipv4", types.YChild{"RewriteIpv4", nil})
    for i := range rewriteIpv4s.RewriteIpv4 {
        rewriteIpv4s.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4s.RewriteIpv4[i]), types.YChild{"RewriteIpv4", rewriteIpv4s.RewriteIpv4[i]})
    }
    rewriteIpv4s.EntityData.Leafs = types.NewOrderedMap()

    rewriteIpv4s.EntityData.YListKeys = []string {}

    return &(rewriteIpv4s.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4
// FPI rewrite for label
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSI table name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RsiTableName interface{}

    // RSI table ID. The type is string with pattern: [0-9a-fA-F]{1,8}.
    RsiTableId interface{}

    // IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLength interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi.
    AssociatedFpi []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf.
    V4Rpf []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf.
    V6Rpf []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois.
    Mois []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4) GetEntityData() *types.CommonEntityData {
    rewriteIpv4.EntityData.YFilter = rewriteIpv4.YFilter
    rewriteIpv4.EntityData.YangName = "rewrite-ipv4"
    rewriteIpv4.EntityData.BundleName = "cisco_ios_xr"
    rewriteIpv4.EntityData.ParentYangName = "rewrite-ipv4s"
    rewriteIpv4.EntityData.SegmentPath = "rewrite-ipv4"
    rewriteIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteIpv4.EntityData.Children = types.NewOrderedMap()
    rewriteIpv4.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteIpv4.FpiKey})
    rewriteIpv4.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteIpv4.RewriteId})
    rewriteIpv4.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteIpv4.AssociatedFpi {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteIpv4.AssociatedFpi[i]})
    }
    rewriteIpv4.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteIpv4.V4Rpf {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.V4Rpf[i]), types.YChild{"V4Rpf", rewriteIpv4.V4Rpf[i]})
    }
    rewriteIpv4.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteIpv4.V6Rpf {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.V6Rpf[i]), types.YChild{"V6Rpf", rewriteIpv4.V6Rpf[i]})
    }
    rewriteIpv4.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteIpv4.Mois {
        rewriteIpv4.EntityData.Children.Append(types.GetSegmentPath(rewriteIpv4.Mois[i]), types.YChild{"Mois", rewriteIpv4.Mois[i]})
    }
    rewriteIpv4.EntityData.Leafs = types.NewOrderedMap()
    rewriteIpv4.EntityData.Leafs.Append("rsi-table-name", types.YLeaf{"RsiTableName", rewriteIpv4.RsiTableName})
    rewriteIpv4.EntityData.Leafs.Append("rsi-table-id", types.YLeaf{"RsiTableId", rewriteIpv4.RsiTableId})
    rewriteIpv4.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", rewriteIpv4.Prefix})
    rewriteIpv4.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", rewriteIpv4.PrefixLength})
    rewriteIpv4.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteIpv4.RewriteVersion})
    rewriteIpv4.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteIpv4.BcdlPriority})
    rewriteIpv4.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteIpv4.LsdQueue})
    rewriteIpv4.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteIpv4.RwInstallTime})
    rewriteIpv4.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteIpv4.RwInstallAge})
    rewriteIpv4.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteIpv4.RwUpdated})
    rewriteIpv4.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteIpv4.PriorityUpdated})

    rewriteIpv4.EntityData.YListKeys = []string {}

    return &(rewriteIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-ipv4"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-ipv4"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-ipv4"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-ipv4"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-ipv4"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois
// Mois
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray.
    MoiArray []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-ipv4"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsd_Rewrite_RewriteIpv4s_RewriteIpv4_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes
// Table of Traffic Engineering Rewrites
type MplsLsd_Rewrite_RewriteTes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for TE. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe.
    RewriteTe []*MplsLsd_Rewrite_RewriteTes_RewriteTe
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetEntityData() *types.CommonEntityData {
    rewriteTes.EntityData.YFilter = rewriteTes.YFilter
    rewriteTes.EntityData.YangName = "rewrite-tes"
    rewriteTes.EntityData.BundleName = "cisco_ios_xr"
    rewriteTes.EntityData.ParentYangName = "rewrite"
    rewriteTes.EntityData.SegmentPath = "rewrite-tes"
    rewriteTes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteTes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteTes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteTes.EntityData.Children = types.NewOrderedMap()
    rewriteTes.EntityData.Children.Append("rewrite-te", types.YChild{"RewriteTe", nil})
    for i := range rewriteTes.RewriteTe {
        rewriteTes.EntityData.Children.Append(types.GetSegmentPath(rewriteTes.RewriteTe[i]), types.YChild{"RewriteTe", rewriteTes.RewriteTe[i]})
    }
    rewriteTes.EntityData.Leafs = types.NewOrderedMap()

    rewriteTes.EntityData.YListKeys = []string {}

    return &(rewriteTes.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe
// FPI rewrite for TE
type MplsLsd_Rewrite_RewriteTes_RewriteTe struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi.
    AssociatedFpi []*MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf.
    V4Rpf []*MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf.
    V6Rpf []*MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois.
    Mois []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetEntityData() *types.CommonEntityData {
    rewriteTe.EntityData.YFilter = rewriteTe.YFilter
    rewriteTe.EntityData.YangName = "rewrite-te"
    rewriteTe.EntityData.BundleName = "cisco_ios_xr"
    rewriteTe.EntityData.ParentYangName = "rewrite-tes"
    rewriteTe.EntityData.SegmentPath = "rewrite-te" + types.AddKeyToken(rewriteTe.InterfaceName, "interface-name")
    rewriteTe.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteTe.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteTe.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteTe.EntityData.Children = types.NewOrderedMap()
    rewriteTe.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteTe.FpiKey})
    rewriteTe.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteTe.RewriteId})
    rewriteTe.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteTe.AssociatedFpi {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteTe.AssociatedFpi[i]})
    }
    rewriteTe.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteTe.V4Rpf {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.V4Rpf[i]), types.YChild{"V4Rpf", rewriteTe.V4Rpf[i]})
    }
    rewriteTe.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteTe.V6Rpf {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.V6Rpf[i]), types.YChild{"V6Rpf", rewriteTe.V6Rpf[i]})
    }
    rewriteTe.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteTe.Mois {
        rewriteTe.EntityData.Children.Append(types.GetSegmentPath(rewriteTe.Mois[i]), types.YChild{"Mois", rewriteTe.Mois[i]})
    }
    rewriteTe.EntityData.Leafs = types.NewOrderedMap()
    rewriteTe.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", rewriteTe.InterfaceName})
    rewriteTe.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteTe.RewriteVersion})
    rewriteTe.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteTe.BcdlPriority})
    rewriteTe.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteTe.LsdQueue})
    rewriteTe.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteTe.RwInstallTime})
    rewriteTe.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteTe.RwInstallAge})
    rewriteTe.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteTe.RwUpdated})
    rewriteTe.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteTe.PriorityUpdated})

    rewriteTe.EntityData.YListKeys = []string {"InterfaceName"}

    return &(rewriteTe.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-te"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-te"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-te"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-te"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-te"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois
// Mois
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray.
    MoiArray []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-te"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels
// Table of Rewrites
type MplsLsd_Rewrite_RewriteLabels struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel.
    RewriteLabel []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetEntityData() *types.CommonEntityData {
    rewriteLabels.EntityData.YFilter = rewriteLabels.YFilter
    rewriteLabels.EntityData.YangName = "rewrite-labels"
    rewriteLabels.EntityData.BundleName = "cisco_ios_xr"
    rewriteLabels.EntityData.ParentYangName = "rewrite"
    rewriteLabels.EntityData.SegmentPath = "rewrite-labels"
    rewriteLabels.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteLabels.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteLabels.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteLabels.EntityData.Children = types.NewOrderedMap()
    rewriteLabels.EntityData.Children.Append("rewrite-label", types.YChild{"RewriteLabel", nil})
    for i := range rewriteLabels.RewriteLabel {
        rewriteLabels.EntityData.Children.Append(types.GetSegmentPath(rewriteLabels.RewriteLabel[i]), types.YChild{"RewriteLabel", rewriteLabels.RewriteLabel[i]})
    }
    rewriteLabels.EntityData.Leafs = types.NewOrderedMap()

    rewriteLabels.EntityData.YListKeys = []string {}

    return &(rewriteLabels.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel
// FPI rewrite for label
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // 0..4294967295.
    LabelId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi.
    AssociatedFpi []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf.
    V4Rpf []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf.
    V6Rpf []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois.
    Mois []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetEntityData() *types.CommonEntityData {
    rewriteLabel.EntityData.YFilter = rewriteLabel.YFilter
    rewriteLabel.EntityData.YangName = "rewrite-label"
    rewriteLabel.EntityData.BundleName = "cisco_ios_xr"
    rewriteLabel.EntityData.ParentYangName = "rewrite-labels"
    rewriteLabel.EntityData.SegmentPath = "rewrite-label" + types.AddKeyToken(rewriteLabel.LabelId, "label-id")
    rewriteLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteLabel.EntityData.Children = types.NewOrderedMap()
    rewriteLabel.EntityData.Children.Append("fpi-key", types.YChild{"FpiKey", &rewriteLabel.FpiKey})
    rewriteLabel.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteLabel.RewriteId})
    rewriteLabel.EntityData.Children.Append("associated-fpi", types.YChild{"AssociatedFpi", nil})
    for i := range rewriteLabel.AssociatedFpi {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.AssociatedFpi[i]), types.YChild{"AssociatedFpi", rewriteLabel.AssociatedFpi[i]})
    }
    rewriteLabel.EntityData.Children.Append("v4-rpf", types.YChild{"V4Rpf", nil})
    for i := range rewriteLabel.V4Rpf {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.V4Rpf[i]), types.YChild{"V4Rpf", rewriteLabel.V4Rpf[i]})
    }
    rewriteLabel.EntityData.Children.Append("v6-rpf", types.YChild{"V6Rpf", nil})
    for i := range rewriteLabel.V6Rpf {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.V6Rpf[i]), types.YChild{"V6Rpf", rewriteLabel.V6Rpf[i]})
    }
    rewriteLabel.EntityData.Children.Append("mois", types.YChild{"Mois", nil})
    for i := range rewriteLabel.Mois {
        rewriteLabel.EntityData.Children.Append(types.GetSegmentPath(rewriteLabel.Mois[i]), types.YChild{"Mois", rewriteLabel.Mois[i]})
    }
    rewriteLabel.EntityData.Leafs = types.NewOrderedMap()
    rewriteLabel.EntityData.Leafs.Append("label-id", types.YLeaf{"LabelId", rewriteLabel.LabelId})
    rewriteLabel.EntityData.Leafs.Append("rewrite-version", types.YLeaf{"RewriteVersion", rewriteLabel.RewriteVersion})
    rewriteLabel.EntityData.Leafs.Append("bcdl-priority", types.YLeaf{"BcdlPriority", rewriteLabel.BcdlPriority})
    rewriteLabel.EntityData.Leafs.Append("lsd-queue", types.YLeaf{"LsdQueue", rewriteLabel.LsdQueue})
    rewriteLabel.EntityData.Leafs.Append("rw-install-time", types.YLeaf{"RwInstallTime", rewriteLabel.RwInstallTime})
    rewriteLabel.EntityData.Leafs.Append("rw-install-age", types.YLeaf{"RwInstallAge", rewriteLabel.RwInstallAge})
    rewriteLabel.EntityData.Leafs.Append("rw-updated", types.YLeaf{"RwUpdated", rewriteLabel.RwUpdated})
    rewriteLabel.EntityData.Leafs.Append("priority-updated", types.YLeaf{"PriorityUpdated", rewriteLabel.PriorityUpdated})

    rewriteLabel.EntityData.YListKeys = []string {"LabelId"}

    return &(rewriteLabel.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetEntityData() *types.CommonEntityData {
    fpiKey.EntityData.YFilter = fpiKey.YFilter
    fpiKey.EntityData.YangName = "fpi-key"
    fpiKey.EntityData.BundleName = "cisco_ios_xr"
    fpiKey.EntityData.ParentYangName = "rewrite-label"
    fpiKey.EntityData.SegmentPath = "fpi-key"
    fpiKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpiKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpiKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpiKey.EntityData.Children = types.NewOrderedMap()
    fpiKey.EntityData.Children.Append("fpi", types.YChild{"Fpi", &fpiKey.Fpi})
    fpiKey.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range fpiKey.ApplicationOwner {
        fpiKey.EntityData.Children.Append(types.GetSegmentPath(fpiKey.ApplicationOwner[i]), types.YChild{"ApplicationOwner", fpiKey.ApplicationOwner[i]})
    }
    fpiKey.EntityData.Leafs = types.NewOrderedMap()

    fpiKey.EntityData.YListKeys = []string {}

    return &(fpiKey.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "fpi-key"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "fpi-key"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-label"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("rewrite-id", types.YChild{"RewriteId", &rewriteId.RewriteId})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetEntityData() *types.CommonEntityData {
    rewriteId.EntityData.YFilter = rewriteId.YFilter
    rewriteId.EntityData.YangName = "rewrite-id"
    rewriteId.EntityData.BundleName = "cisco_ios_xr"
    rewriteId.EntityData.ParentYangName = "rewrite-id"
    rewriteId.EntityData.SegmentPath = "rewrite-id"
    rewriteId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteId.EntityData.Children = types.NewOrderedMap()
    rewriteId.EntityData.Children.Append("label-context", types.YChild{"LabelContext", &rewriteId.LabelContext})
    rewriteId.EntityData.Children.Append("local-label-rewrite", types.YChild{"LocalLabelRewrite", &rewriteId.LocalLabelRewrite})
    rewriteId.EntityData.Leafs = types.NewOrderedMap()
    rewriteId.EntityData.Leafs.Append("rewrite-id-type", types.YLeaf{"RewriteIdType", rewriteId.RewriteIdType})

    rewriteId.EntityData.YListKeys = []string {}

    return &(rewriteId.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4l3vpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData

    // L3VPN IPv6 label context.
    Ipv6l3vpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData

    // L3VPN VRF label context.
    VrfL3vpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData

    // L3VPN CEv4 label context.
    Cev4l3vpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData

    // L3VPN CEv6 label context.
    Cev6l3vpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4p2mpData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4blbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData

    // BFD BLB label context.
    Ipv6blbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3vpn MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetEntityData() *types.CommonEntityData {
    labelContext.EntityData.YFilter = labelContext.YFilter
    labelContext.EntityData.YangName = "label-context"
    labelContext.EntityData.BundleName = "cisco_ios_xr"
    labelContext.EntityData.ParentYangName = "rewrite-id"
    labelContext.EntityData.SegmentPath = "label-context"
    labelContext.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContext.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContext.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContext.EntityData.Children = types.NewOrderedMap()
    labelContext.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &labelContext.Ipv4Data})
    labelContext.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &labelContext.Ipv6Data})
    labelContext.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &labelContext.Tev4Data})
    labelContext.EntityData.Children.Append("ipv4l3vpn-data", types.YChild{"Ipv4l3vpnData", &labelContext.Ipv4l3vpnData})
    labelContext.EntityData.Children.Append("ipv6l3vpn-data", types.YChild{"Ipv6l3vpnData", &labelContext.Ipv6l3vpnData})
    labelContext.EntityData.Children.Append("vrf-l3vpn-data", types.YChild{"VrfL3vpnData", &labelContext.VrfL3vpnData})
    labelContext.EntityData.Children.Append("cev4l3vpn-data", types.YChild{"Cev4l3vpnData", &labelContext.Cev4l3vpnData})
    labelContext.EntityData.Children.Append("cev6l3vpn-data", types.YChild{"Cev6l3vpnData", &labelContext.Cev6l3vpnData})
    labelContext.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &labelContext.PseudowireData})
    labelContext.EntityData.Children.Append("label-block-data", types.YChild{"LabelBlockData", &labelContext.LabelBlockData})
    labelContext.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &labelContext.IpSubData})
    labelContext.EntityData.Children.Append("tev4p2mp-data", types.YChild{"Tev4p2mpData", &labelContext.Tev4p2mpData})
    labelContext.EntityData.Children.Append("mld-pv4-data", types.YChild{"MldPv4Data", &labelContext.MldPv4Data})
    labelContext.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &labelContext.PseudowireHeadEndData})
    labelContext.EntityData.Children.Append("tp-data", types.YChild{"TpData", &labelContext.TpData})
    labelContext.EntityData.Children.Append("generic-routing-encapsulation", types.YChild{"GenericRoutingEncapsulation", &labelContext.GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("ipv6-generic-routing-encapsulation", types.YChild{"Ipv6GenericRoutingEncapsulation", &labelContext.Ipv6GenericRoutingEncapsulation})
    labelContext.EntityData.Children.Append("evpn-data", types.YChild{"EvpnData", &labelContext.EvpnData})
    labelContext.EntityData.Children.Append("ipv4blb-data", types.YChild{"Ipv4blbData", &labelContext.Ipv4blbData})
    labelContext.EntityData.Children.Append("ipv6blb-data", types.YChild{"Ipv6blbData", &labelContext.Ipv6blbData})
    labelContext.EntityData.Children.Append("pi-mi-pmsi-data", types.YChild{"PiMiPmsiData", &labelContext.PiMiPmsiData})
    labelContext.EntityData.Children.Append("pi-ms-pmsi-data", types.YChild{"PiMsPmsiData", &labelContext.PiMsPmsiData})
    labelContext.EntityData.Children.Append("next-hop-set-l3vpn", types.YChild{"NextHopSetL3vpn", &labelContext.NextHopSetL3vpn})
    labelContext.EntityData.Children.Append("sr-prefix-segment", types.YChild{"SrPrefixSegment", &labelContext.SrPrefixSegment})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv4", types.YChild{"SrAdjSegmentIpv4", &labelContext.SrAdjSegmentIpv4})
    labelContext.EntityData.Children.Append("sr-adj-segment-ipv6", types.YChild{"SrAdjSegmentIpv6", &labelContext.SrAdjSegmentIpv6})
    labelContext.EntityData.Children.Append("label-block-srgb-data", types.YChild{"LabelBlockSrgbData", &labelContext.LabelBlockSrgbData})
    labelContext.EntityData.Children.Append("te-binding", types.YChild{"TeBinding", &labelContext.TeBinding})
    labelContext.EntityData.Children.Append("label-block-srlb-data", types.YChild{"LabelBlockSrlbData", &labelContext.LabelBlockSrlbData})
    labelContext.EntityData.Leafs = types.NewOrderedMap()
    labelContext.EntityData.Leafs.Append("label-context-type", types.YLeaf{"LabelContextType", labelContext.LabelContextType})

    labelContext.EntityData.YListKeys = []string {}

    return &(labelContext.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "label-context"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv4Data.SecurityId})
    ipv4Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv4Data.VrfName})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "label-context"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6Data.PrefixLength})
    ipv6Data.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", ipv6Data.SecurityId})
    ipv6Data.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", ipv6Data.VrfName})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "label-context"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4Data.TunnelSource})
    tev4Data.EntityData.Leafs.Append("tunnel-dest", types.YLeaf{"TunnelDest", tev4Data.TunnelDest})
    tev4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4Data.TunnelId})
    tev4Data.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4Data.TunnelIdExtension})
    tev4Data.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4Data.TunnelLspId})
    tev4Data.EntityData.Leafs.Append("is-srte", types.YLeaf{"IsSrte", tev4Data.IsSrte})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4l3vpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv4l3vpnData.EntityData.YFilter = ipv4l3vpnData.YFilter
    ipv4l3vpnData.EntityData.YangName = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv4l3vpnData.EntityData.ParentYangName = "label-context"
    ipv4l3vpnData.EntityData.SegmentPath = "ipv4l3vpn-data"
    ipv4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv4l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4l3vpnData.Prefix})
    ipv4l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4l3vpnData.PrefixLength})
    ipv4l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv4l3vpnData.RouteDistinguisher})

    ipv4l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6l3vpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6l3vpnData) GetEntityData() *types.CommonEntityData {
    ipv6l3vpnData.EntityData.YFilter = ipv6l3vpnData.YFilter
    ipv6l3vpnData.EntityData.YangName = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    ipv6l3vpnData.EntityData.ParentYangName = "label-context"
    ipv6l3vpnData.EntityData.SegmentPath = "ipv6l3vpn-data"
    ipv6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6l3vpnData.EntityData.Children = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    ipv6l3vpnData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6l3vpnData.Prefix})
    ipv6l3vpnData.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv6l3vpnData.PrefixLength})
    ipv6l3vpnData.EntityData.Leafs.Append("route-distinguisher", types.YLeaf{"RouteDistinguisher", ipv6l3vpnData.RouteDistinguisher})

    ipv6l3vpnData.EntityData.YListKeys = []string {}

    return &(ipv6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3vpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3vpnData) GetEntityData() *types.CommonEntityData {
    vrfL3vpnData.EntityData.YFilter = vrfL3vpnData.YFilter
    vrfL3vpnData.EntityData.YangName = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.BundleName = "cisco_ios_xr"
    vrfL3vpnData.EntityData.ParentYangName = "label-context"
    vrfL3vpnData.EntityData.SegmentPath = "vrf-l3vpn-data"
    vrfL3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfL3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfL3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfL3vpnData.EntityData.Children = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs = types.NewOrderedMap()
    vrfL3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", vrfL3vpnData.TableId})
    vrfL3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", vrfL3vpnData.SecurityId})

    vrfL3vpnData.EntityData.YListKeys = []string {}

    return &(vrfL3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4l3vpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4l3vpnData) GetEntityData() *types.CommonEntityData {
    cev4l3vpnData.EntityData.YFilter = cev4l3vpnData.YFilter
    cev4l3vpnData.EntityData.YangName = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev4l3vpnData.EntityData.ParentYangName = "label-context"
    cev4l3vpnData.EntityData.SegmentPath = "cev4l3vpn-data"
    cev4l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev4l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev4l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev4l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev4l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev4l3vpnData.TableId})
    cev4l3vpnData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", cev4l3vpnData.Ipv4NextHop})
    cev4l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev4l3vpnData.SecurityId})

    cev4l3vpnData.EntityData.YListKeys = []string {}

    return &(cev4l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6l3vpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6l3vpnData) GetEntityData() *types.CommonEntityData {
    cev6l3vpnData.EntityData.YFilter = cev6l3vpnData.YFilter
    cev6l3vpnData.EntityData.YangName = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.BundleName = "cisco_ios_xr"
    cev6l3vpnData.EntityData.ParentYangName = "label-context"
    cev6l3vpnData.EntityData.SegmentPath = "cev6l3vpn-data"
    cev6l3vpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    cev6l3vpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    cev6l3vpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    cev6l3vpnData.EntityData.Children = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs = types.NewOrderedMap()
    cev6l3vpnData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", cev6l3vpnData.TableId})
    cev6l3vpnData.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", cev6l3vpnData.Ipv6NextHop})
    cev6l3vpnData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", cev6l3vpnData.SecurityId})

    cev6l3vpnData.EntityData.YListKeys = []string {}

    return &(cev6l3vpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "label-context"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", pseudowireData.Prefix})
    pseudowireData.EntityData.Leafs.Append("pseudowire-id", types.YLeaf{"PseudowireId", pseudowireData.PseudowireId})
    pseudowireData.EntityData.Leafs.Append("remote-l2-router-id", types.YLeaf{"RemoteL2RouterId", pseudowireData.RemoteL2RouterId})
    pseudowireData.EntityData.Leafs.Append("subinterface", types.YLeaf{"Subinterface", pseudowireData.Subinterface})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetEntityData() *types.CommonEntityData {
    labelBlockData.EntityData.YFilter = labelBlockData.YFilter
    labelBlockData.EntityData.YangName = "label-block-data"
    labelBlockData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockData.EntityData.ParentYangName = "label-context"
    labelBlockData.EntityData.SegmentPath = "label-block-data"
    labelBlockData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockData.EntityData.Children = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockData.EntityData.Leafs.Append("service", types.YLeaf{"Service", labelBlockData.Service})
    labelBlockData.EntityData.Leafs.Append("vpn-id", types.YLeaf{"VpnId", labelBlockData.VpnId})
    labelBlockData.EntityData.Leafs.Append("edge-id", types.YLeaf{"EdgeId", labelBlockData.EdgeId})
    labelBlockData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockData.Offset})
    labelBlockData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockData.Size})

    labelBlockData.EntityData.YListKeys = []string {}

    return &(labelBlockData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "label-context"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("parent-interface", types.YLeaf{"ParentInterface", ipSubData.ParentInterface})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4p2mpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4p2mpData) GetEntityData() *types.CommonEntityData {
    tev4p2mpData.EntityData.YFilter = tev4p2mpData.YFilter
    tev4p2mpData.EntityData.YangName = "tev4p2mp-data"
    tev4p2mpData.EntityData.BundleName = "cisco_ios_xr"
    tev4p2mpData.EntityData.ParentYangName = "label-context"
    tev4p2mpData.EntityData.SegmentPath = "tev4p2mp-data"
    tev4p2mpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4p2mpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4p2mpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4p2mpData.EntityData.Children = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs = types.NewOrderedMap()
    tev4p2mpData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4p2mpData.TableId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-source", types.YLeaf{"TunnelSource", tev4p2mpData.TunnelSource})
    tev4p2mpData.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", tev4p2mpData.P2mpId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", tev4p2mpData.TunnelId})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-id-extension", types.YLeaf{"TunnelIdExtension", tev4p2mpData.TunnelIdExtension})
    tev4p2mpData.EntityData.Leafs.Append("tunnel-lsp-id", types.YLeaf{"TunnelLspId", tev4p2mpData.TunnelLspId})
    tev4p2mpData.EntityData.Leafs.Append("previous-hop", types.YLeaf{"PreviousHop", tev4p2mpData.PreviousHop})

    tev4p2mpData.EntityData.YListKeys = []string {}

    return &(tev4p2mpData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetEntityData() *types.CommonEntityData {
    mldPv4Data.EntityData.YFilter = mldPv4Data.YFilter
    mldPv4Data.EntityData.YangName = "mld-pv4-data"
    mldPv4Data.EntityData.BundleName = "cisco_ios_xr"
    mldPv4Data.EntityData.ParentYangName = "label-context"
    mldPv4Data.EntityData.SegmentPath = "mld-pv4-data"
    mldPv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mldPv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mldPv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mldPv4Data.EntityData.Children = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs = types.NewOrderedMap()
    mldPv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", mldPv4Data.TableId})
    mldPv4Data.EntityData.Leafs.Append("type", types.YLeaf{"Type", mldPv4Data.Type})
    mldPv4Data.EntityData.Leafs.Append("lsm-id", types.YLeaf{"LsmId", mldPv4Data.LsmId})
    mldPv4Data.EntityData.Leafs.Append("peer-lsrid", types.YLeaf{"PeerLsrid", mldPv4Data.PeerLsrid})
    mldPv4Data.EntityData.Leafs.Append("peer-label-space-id", types.YLeaf{"PeerLabelSpaceId", mldPv4Data.PeerLabelSpaceId})

    mldPv4Data.EntityData.YListKeys = []string {}

    return &(mldPv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "label-context"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-intf", types.YLeaf{"PwheIntf", pseudowireHeadEndData.PwheIntf})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetEntityData() *types.CommonEntityData {
    tpData.EntityData.YFilter = tpData.YFilter
    tpData.EntityData.YangName = "tp-data"
    tpData.EntityData.BundleName = "cisco_ios_xr"
    tpData.EntityData.ParentYangName = "label-context"
    tpData.EntityData.SegmentPath = "tp-data"
    tpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tpData.EntityData.Children = types.NewOrderedMap()
    tpData.EntityData.Leafs = types.NewOrderedMap()
    tpData.EntityData.Leafs.Append("source-global-id", types.YLeaf{"SourceGlobalId", tpData.SourceGlobalId})
    tpData.EntityData.Leafs.Append("source-node-id", types.YLeaf{"SourceNodeId", tpData.SourceNodeId})
    tpData.EntityData.Leafs.Append("dest-global-id", types.YLeaf{"DestGlobalId", tpData.DestGlobalId})
    tpData.EntityData.Leafs.Append("dest-node-id", types.YLeaf{"DestNodeId", tpData.DestNodeId})
    tpData.EntityData.Leafs.Append("source-tunnel-id", types.YLeaf{"SourceTunnelId", tpData.SourceTunnelId})
    tpData.EntityData.Leafs.Append("dest-tunnel-id", types.YLeaf{"DestTunnelId", tpData.DestTunnelId})
    tpData.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", tpData.LspId})

    tpData.EntityData.YListKeys = []string {}

    return &(tpData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    genericRoutingEncapsulation.EntityData.YFilter = genericRoutingEncapsulation.YFilter
    genericRoutingEncapsulation.EntityData.YangName = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    genericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    genericRoutingEncapsulation.EntityData.SegmentPath = "generic-routing-encapsulation"
    genericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    genericRoutingEncapsulation.EntityData.Leafs.Append("gre-interface", types.YLeaf{"GreInterface", genericRoutingEncapsulation.GreInterface})

    genericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(genericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetEntityData() *types.CommonEntityData {
    ipv6GenericRoutingEncapsulation.EntityData.YFilter = ipv6GenericRoutingEncapsulation.YFilter
    ipv6GenericRoutingEncapsulation.EntityData.YangName = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.BundleName = "cisco_ios_xr"
    ipv6GenericRoutingEncapsulation.EntityData.ParentYangName = "label-context"
    ipv6GenericRoutingEncapsulation.EntityData.SegmentPath = "ipv6-generic-routing-encapsulation"
    ipv6GenericRoutingEncapsulation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6GenericRoutingEncapsulation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6GenericRoutingEncapsulation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6GenericRoutingEncapsulation.EntityData.Children = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs = types.NewOrderedMap()
    ipv6GenericRoutingEncapsulation.EntityData.Leafs.Append("greipv6-interface", types.YLeaf{"Greipv6Interface", ipv6GenericRoutingEncapsulation.Greipv6Interface})

    ipv6GenericRoutingEncapsulation.EntityData.YListKeys = []string {}

    return &(ipv6GenericRoutingEncapsulation.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetEntityData() *types.CommonEntityData {
    evpnData.EntityData.YFilter = evpnData.YFilter
    evpnData.EntityData.YangName = "evpn-data"
    evpnData.EntityData.BundleName = "cisco_ios_xr"
    evpnData.EntityData.ParentYangName = "label-context"
    evpnData.EntityData.SegmentPath = "evpn-data"
    evpnData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    evpnData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    evpnData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    evpnData.EntityData.Children = types.NewOrderedMap()
    evpnData.EntityData.Leafs = types.NewOrderedMap()
    evpnData.EntityData.Leafs.Append("evpn-id", types.YLeaf{"EvpnId", evpnData.EvpnId})
    evpnData.EntityData.Leafs.Append("evpn-tag", types.YLeaf{"EvpnTag", evpnData.EvpnTag})
    evpnData.EntityData.Leafs.Append("ethernet-segment", types.YLeaf{"EthernetSegment", evpnData.EthernetSegment})

    evpnData.EntityData.YListKeys = []string {}

    return &(evpnData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4blbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4blbData) GetEntityData() *types.CommonEntityData {
    ipv4blbData.EntityData.YFilter = ipv4blbData.YFilter
    ipv4blbData.EntityData.YangName = "ipv4blb-data"
    ipv4blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv4blbData.EntityData.ParentYangName = "label-context"
    ipv4blbData.EntityData.SegmentPath = "ipv4blb-data"
    ipv4blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4blbData.EntityData.Children = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv4blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv4blbData.BlbIntf})
    ipv4blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4blbData.Prefix})

    ipv4blbData.EntityData.YListKeys = []string {}

    return &(ipv4blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6blbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6blbData) GetEntityData() *types.CommonEntityData {
    ipv6blbData.EntityData.YFilter = ipv6blbData.YFilter
    ipv6blbData.EntityData.YangName = "ipv6blb-data"
    ipv6blbData.EntityData.BundleName = "cisco_ios_xr"
    ipv6blbData.EntityData.ParentYangName = "label-context"
    ipv6blbData.EntityData.SegmentPath = "ipv6blb-data"
    ipv6blbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6blbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6blbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6blbData.EntityData.Children = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs = types.NewOrderedMap()
    ipv6blbData.EntityData.Leafs.Append("blb-intf", types.YLeaf{"BlbIntf", ipv6blbData.BlbIntf})
    ipv6blbData.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6blbData.Prefix})

    ipv6blbData.EntityData.YListKeys = []string {}

    return &(ipv6blbData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetEntityData() *types.CommonEntityData {
    piMiPmsiData.EntityData.YFilter = piMiPmsiData.YFilter
    piMiPmsiData.EntityData.YangName = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMiPmsiData.EntityData.ParentYangName = "label-context"
    piMiPmsiData.EntityData.SegmentPath = "pi-mi-pmsi-data"
    piMiPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMiPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMiPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMiPmsiData.EntityData.Children = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMiPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMiPmsiData.VrfId})
    piMiPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMiPmsiData.Head})
    piMiPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMiPmsiData.V6})

    piMiPmsiData.EntityData.YListKeys = []string {}

    return &(piMiPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetEntityData() *types.CommonEntityData {
    piMsPmsiData.EntityData.YFilter = piMsPmsiData.YFilter
    piMsPmsiData.EntityData.YangName = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.BundleName = "cisco_ios_xr"
    piMsPmsiData.EntityData.ParentYangName = "label-context"
    piMsPmsiData.EntityData.SegmentPath = "pi-ms-pmsi-data"
    piMsPmsiData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    piMsPmsiData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    piMsPmsiData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    piMsPmsiData.EntityData.Children = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs = types.NewOrderedMap()
    piMsPmsiData.EntityData.Leafs.Append("vrf-id", types.YLeaf{"VrfId", piMsPmsiData.VrfId})
    piMsPmsiData.EntityData.Leafs.Append("source", types.YLeaf{"Source", piMsPmsiData.Source})
    piMsPmsiData.EntityData.Leafs.Append("head", types.YLeaf{"Head", piMsPmsiData.Head})
    piMsPmsiData.EntityData.Leafs.Append("v6", types.YLeaf{"V6", piMsPmsiData.V6})
    piMsPmsiData.EntityData.Leafs.Append("hli", types.YLeaf{"Hli", piMsPmsiData.Hli})
    piMsPmsiData.EntityData.Leafs.Append("seg", types.YLeaf{"Seg", piMsPmsiData.Seg})

    piMsPmsiData.EntityData.YListKeys = []string {}

    return &(piMsPmsiData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3vpn) GetEntityData() *types.CommonEntityData {
    nextHopSetL3vpn.EntityData.YFilter = nextHopSetL3vpn.YFilter
    nextHopSetL3vpn.EntityData.YangName = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.BundleName = "cisco_ios_xr"
    nextHopSetL3vpn.EntityData.ParentYangName = "label-context"
    nextHopSetL3vpn.EntityData.SegmentPath = "next-hop-set-l3vpn"
    nextHopSetL3vpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextHopSetL3vpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextHopSetL3vpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextHopSetL3vpn.EntityData.Children = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs = types.NewOrderedMap()
    nextHopSetL3vpn.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nextHopSetL3vpn.TableId})
    nextHopSetL3vpn.EntityData.Leafs.Append("next-hop-set-id", types.YLeaf{"NextHopSetId", nextHopSetL3vpn.NextHopSetId})

    nextHopSetL3vpn.EntityData.YListKeys = []string {}

    return &(nextHopSetL3vpn.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetEntityData() *types.CommonEntityData {
    srPrefixSegment.EntityData.YFilter = srPrefixSegment.YFilter
    srPrefixSegment.EntityData.YangName = "sr-prefix-segment"
    srPrefixSegment.EntityData.BundleName = "cisco_ios_xr"
    srPrefixSegment.EntityData.ParentYangName = "label-context"
    srPrefixSegment.EntityData.SegmentPath = "sr-prefix-segment"
    srPrefixSegment.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srPrefixSegment.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srPrefixSegment.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srPrefixSegment.EntityData.Children = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs = types.NewOrderedMap()
    srPrefixSegment.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", srPrefixSegment.TableId})
    srPrefixSegment.EntityData.Leafs.Append("segment-id", types.YLeaf{"SegmentId", srPrefixSegment.SegmentId})

    srPrefixSegment.EntityData.YListKeys = []string {}

    return &(srPrefixSegment.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv4.EntityData.YFilter = srAdjSegmentIpv4.YFilter
    srAdjSegmentIpv4.EntityData.YangName = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv4.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv4.EntityData.SegmentPath = "sr-adj-segment-ipv4"
    srAdjSegmentIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv4.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv4.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv4.Index})
    srAdjSegmentIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv4.Type})
    srAdjSegmentIpv4.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv4.Intf})
    srAdjSegmentIpv4.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv4.Addr})

    srAdjSegmentIpv4.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetEntityData() *types.CommonEntityData {
    srAdjSegmentIpv6.EntityData.YFilter = srAdjSegmentIpv6.YFilter
    srAdjSegmentIpv6.EntityData.YangName = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.BundleName = "cisco_ios_xr"
    srAdjSegmentIpv6.EntityData.ParentYangName = "label-context"
    srAdjSegmentIpv6.EntityData.SegmentPath = "sr-adj-segment-ipv6"
    srAdjSegmentIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srAdjSegmentIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srAdjSegmentIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srAdjSegmentIpv6.EntityData.Children = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs = types.NewOrderedMap()
    srAdjSegmentIpv6.EntityData.Leafs.Append("index", types.YLeaf{"Index", srAdjSegmentIpv6.Index})
    srAdjSegmentIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", srAdjSegmentIpv6.Type})
    srAdjSegmentIpv6.EntityData.Leafs.Append("intf", types.YLeaf{"Intf", srAdjSegmentIpv6.Intf})
    srAdjSegmentIpv6.EntityData.Leafs.Append("addr", types.YLeaf{"Addr", srAdjSegmentIpv6.Addr})

    srAdjSegmentIpv6.EntityData.YListKeys = []string {}

    return &(srAdjSegmentIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrgbData.EntityData.YFilter = labelBlockSrgbData.YFilter
    labelBlockSrgbData.EntityData.YangName = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrgbData.EntityData.ParentYangName = "label-context"
    labelBlockSrgbData.EntityData.SegmentPath = "label-block-srgb-data"
    labelBlockSrgbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrgbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrgbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrgbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrgbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrgbData.StartLabel})
    labelBlockSrgbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrgbData.Offset})
    labelBlockSrgbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrgbData.Size})

    labelBlockSrgbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrgbData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetEntityData() *types.CommonEntityData {
    teBinding.EntityData.YFilter = teBinding.YFilter
    teBinding.EntityData.YangName = "te-binding"
    teBinding.EntityData.BundleName = "cisco_ios_xr"
    teBinding.EntityData.ParentYangName = "label-context"
    teBinding.EntityData.SegmentPath = "te-binding"
    teBinding.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teBinding.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teBinding.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teBinding.EntityData.Children = types.NewOrderedMap()
    teBinding.EntityData.Leafs = types.NewOrderedMap()
    teBinding.EntityData.Leafs.Append("te-identifier", types.YLeaf{"TeIdentifier", teBinding.TeIdentifier})
    teBinding.EntityData.Leafs.Append("te-type", types.YLeaf{"TeType", teBinding.TeType})

    teBinding.EntityData.YListKeys = []string {}

    return &(teBinding.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetEntityData() *types.CommonEntityData {
    labelBlockSrlbData.EntityData.YFilter = labelBlockSrlbData.YFilter
    labelBlockSrlbData.EntityData.YangName = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.BundleName = "cisco_ios_xr"
    labelBlockSrlbData.EntityData.ParentYangName = "label-context"
    labelBlockSrlbData.EntityData.SegmentPath = "label-block-srlb-data"
    labelBlockSrlbData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelBlockSrlbData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelBlockSrlbData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelBlockSrlbData.EntityData.Children = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs = types.NewOrderedMap()
    labelBlockSrlbData.EntityData.Leafs.Append("start-label", types.YLeaf{"StartLabel", labelBlockSrlbData.StartLabel})
    labelBlockSrlbData.EntityData.Leafs.Append("offset", types.YLeaf{"Offset", labelBlockSrlbData.Offset})
    labelBlockSrlbData.EntityData.Leafs.Append("size", types.YLeaf{"Size", labelBlockSrlbData.Size})

    labelBlockSrlbData.EntityData.YListKeys = []string {}

    return &(labelBlockSrlbData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // label data. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData.
    LabelData []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetEntityData() *types.CommonEntityData {
    localLabelRewrite.EntityData.YFilter = localLabelRewrite.YFilter
    localLabelRewrite.EntityData.YangName = "local-label-rewrite"
    localLabelRewrite.EntityData.BundleName = "cisco_ios_xr"
    localLabelRewrite.EntityData.ParentYangName = "rewrite-id"
    localLabelRewrite.EntityData.SegmentPath = "local-label-rewrite"
    localLabelRewrite.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localLabelRewrite.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localLabelRewrite.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localLabelRewrite.EntityData.Children = types.NewOrderedMap()
    localLabelRewrite.EntityData.Children.Append("label-data", types.YChild{"LabelData", nil})
    for i := range localLabelRewrite.LabelData {
        localLabelRewrite.EntityData.Children.Append(types.GetSegmentPath(localLabelRewrite.LabelData[i]), types.YChild{"LabelData", localLabelRewrite.LabelData[i]})
    }
    localLabelRewrite.EntityData.Leafs = types.NewOrderedMap()

    localLabelRewrite.EntityData.YListKeys = []string {}

    return &(localLabelRewrite.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData
// label data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "local-label-rewrite"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelData.Entry})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetEntityData() *types.CommonEntityData {
    associatedFpi.EntityData.YFilter = associatedFpi.YFilter
    associatedFpi.EntityData.YangName = "associated-fpi"
    associatedFpi.EntityData.BundleName = "cisco_ios_xr"
    associatedFpi.EntityData.ParentYangName = "rewrite-label"
    associatedFpi.EntityData.SegmentPath = "associated-fpi"
    associatedFpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    associatedFpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    associatedFpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    associatedFpi.EntityData.Children = types.NewOrderedMap()
    associatedFpi.EntityData.Children.Append("fpi", types.YChild{"Fpi", &associatedFpi.Fpi})
    associatedFpi.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range associatedFpi.ApplicationOwner {
        associatedFpi.EntityData.Children.Append(types.GetSegmentPath(associatedFpi.ApplicationOwner[i]), types.YChild{"ApplicationOwner", associatedFpi.ApplicationOwner[i]})
    }
    associatedFpi.EntityData.Leafs = types.NewOrderedMap()

    associatedFpi.EntityData.YListKeys = []string {}

    return &(associatedFpi.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetEntityData() *types.CommonEntityData {
    fpi.EntityData.YFilter = fpi.YFilter
    fpi.EntityData.YangName = "fpi"
    fpi.EntityData.BundleName = "cisco_ios_xr"
    fpi.EntityData.ParentYangName = "associated-fpi"
    fpi.EntityData.SegmentPath = "fpi"
    fpi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fpi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fpi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fpi.EntityData.Children = types.NewOrderedMap()
    fpi.EntityData.Children.Append("label-data", types.YChild{"LabelData", &fpi.LabelData})
    fpi.EntityData.Children.Append("te-data", types.YChild{"TeData", &fpi.TeData})
    fpi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &fpi.Ipv4Data})
    fpi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &fpi.Ipv6Data})
    fpi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &fpi.PwListData})
    fpi.EntityData.Children.Append("dmtc-ext-intf-data", types.YChild{"DmtcExtIntfData", &fpi.DmtcExtIntfData})
    fpi.EntityData.Leafs = types.NewOrderedMap()
    fpi.EntityData.Leafs.Append("fpi-type", types.YLeaf{"FpiType", fpi.FpiType})

    fpi.EntityData.YListKeys = []string {}

    return &(fpi.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetEntityData() *types.CommonEntityData {
    labelData.EntityData.YFilter = labelData.YFilter
    labelData.EntityData.YangName = "label-data"
    labelData.EntityData.BundleName = "cisco_ios_xr"
    labelData.EntityData.ParentYangName = "fpi"
    labelData.EntityData.SegmentPath = "label-data"
    labelData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelData.EntityData.Children = types.NewOrderedMap()
    labelData.EntityData.Leafs = types.NewOrderedMap()
    labelData.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelData.Label})
    labelData.EntityData.Leafs.Append("security-id", types.YLeaf{"SecurityId", labelData.SecurityId})
    labelData.EntityData.Leafs.Append("elc", types.YLeaf{"Elc", labelData.Elc})

    labelData.EntityData.YListKeys = []string {}

    return &(labelData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetEntityData() *types.CommonEntityData {
    teData.EntityData.YFilter = teData.YFilter
    teData.EntityData.YangName = "te-data"
    teData.EntityData.BundleName = "cisco_ios_xr"
    teData.EntityData.ParentYangName = "fpi"
    teData.EntityData.SegmentPath = "te-data"
    teData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teData.EntityData.Children = types.NewOrderedMap()
    teData.EntityData.Leafs = types.NewOrderedMap()
    teData.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", teData.TunnelInterface})
    teData.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", teData.LocalLabel})

    teData.EntityData.YListKeys = []string {}

    return &(teData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "fpi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv4Data.Prefix})
    ipv4Data.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4Data.PrefixLength})
    ipv4Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv4Data.Version})
    ipv4Data.EntityData.Leafs.Append("sr-local-label", types.YLeaf{"SrLocalLabel", ipv4Data.SrLocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "fpi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("prefix", types.YLeaf{"Prefix", ipv6Data.Prefix})
    ipv6Data.EntityData.Leafs.Append("router-flags", types.YLeaf{"RouterFlags", ipv6Data.RouterFlags})
    ipv6Data.EntityData.Leafs.Append("prefix-len", types.YLeaf{"PrefixLen", ipv6Data.PrefixLen})
    ipv6Data.EntityData.Leafs.Append("version", types.YLeaf{"Version", ipv6Data.Version})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "fpi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("pwhe-list-id", types.YLeaf{"PwheListId", pwListData.PwheListId})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetEntityData() *types.CommonEntityData {
    dmtcExtIntfData.EntityData.YFilter = dmtcExtIntfData.YFilter
    dmtcExtIntfData.EntityData.YangName = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.BundleName = "cisco_ios_xr"
    dmtcExtIntfData.EntityData.ParentYangName = "fpi"
    dmtcExtIntfData.EntityData.SegmentPath = "dmtc-ext-intf-data"
    dmtcExtIntfData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcExtIntfData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcExtIntfData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcExtIntfData.EntityData.Children = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs = types.NewOrderedMap()
    dmtcExtIntfData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcExtIntfData.DmtcExtIfh})

    dmtcExtIntfData.EntityData.YListKeys = []string {}

    return &(dmtcExtIntfData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "associated-fpi"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetEntityData() *types.CommonEntityData {
    v4Rpf.EntityData.YFilter = v4Rpf.YFilter
    v4Rpf.EntityData.YangName = "v4-rpf"
    v4Rpf.EntityData.BundleName = "cisco_ios_xr"
    v4Rpf.EntityData.ParentYangName = "rewrite-label"
    v4Rpf.EntityData.SegmentPath = "v4-rpf"
    v4Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v4Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v4Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v4Rpf.EntityData.Children = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs = types.NewOrderedMap()
    v4Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v4Rpf.TableId})
    v4Rpf.EntityData.Leafs.Append("v4-rpf-neighbor", types.YLeaf{"V4RpfNeighbor", v4Rpf.V4RpfNeighbor})

    v4Rpf.EntityData.YListKeys = []string {}

    return &(v4Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetEntityData() *types.CommonEntityData {
    v6Rpf.EntityData.YFilter = v6Rpf.YFilter
    v6Rpf.EntityData.YangName = "v6-rpf"
    v6Rpf.EntityData.BundleName = "cisco_ios_xr"
    v6Rpf.EntityData.ParentYangName = "rewrite-label"
    v6Rpf.EntityData.SegmentPath = "v6-rpf"
    v6Rpf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    v6Rpf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    v6Rpf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    v6Rpf.EntityData.Children = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs = types.NewOrderedMap()
    v6Rpf.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", v6Rpf.TableId})
    v6Rpf.EntityData.Leafs.Append("v6-rpf-neighbor", types.YLeaf{"V6RpfNeighbor", v6Rpf.V6RpfNeighbor})

    v6Rpf.EntityData.YListKeys = []string {}

    return &(v6Rpf.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois
// Mois
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray.
    MoiArray []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetEntityData() *types.CommonEntityData {
    mois.EntityData.YFilter = mois.YFilter
    mois.EntityData.YangName = "mois"
    mois.EntityData.BundleName = "cisco_ios_xr"
    mois.EntityData.ParentYangName = "rewrite-label"
    mois.EntityData.SegmentPath = "mois"
    mois.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mois.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mois.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mois.EntityData.Children = types.NewOrderedMap()
    mois.EntityData.Children.Append("application-resource", types.YChild{"ApplicationResource", &mois.ApplicationResource})
    mois.EntityData.Children.Append("moi-array", types.YChild{"MoiArray", nil})
    for i := range mois.MoiArray {
        mois.EntityData.Children.Append(types.GetSegmentPath(mois.MoiArray[i]), types.YChild{"MoiArray", mois.MoiArray[i]})
    }
    mois.EntityData.Leafs = types.NewOrderedMap()

    mois.EntityData.YListKeys = []string {}

    return &(mois.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetEntityData() *types.CommonEntityData {
    applicationResource.EntityData.YFilter = applicationResource.YFilter
    applicationResource.EntityData.YangName = "application-resource"
    applicationResource.EntityData.BundleName = "cisco_ios_xr"
    applicationResource.EntityData.ParentYangName = "mois"
    applicationResource.EntityData.SegmentPath = "application-resource"
    applicationResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationResource.EntityData.Children = types.NewOrderedMap()
    applicationResource.EntityData.Leafs = types.NewOrderedMap()
    applicationResource.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationResource.ApplicationName})
    applicationResource.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationResource.ApplicationType})
    applicationResource.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationResource.ApplicationRolePrimary})
    applicationResource.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationResource.ApplicationInstance})
    applicationResource.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationResource.ResourceState})

    applicationResource.EntityData.YListKeys = []string {}

    return &(applicationResource.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetEntityData() *types.CommonEntityData {
    moiArray.EntityData.YFilter = moiArray.YFilter
    moiArray.EntityData.YangName = "moi-array"
    moiArray.EntityData.BundleName = "cisco_ios_xr"
    moiArray.EntityData.ParentYangName = "mois"
    moiArray.EntityData.SegmentPath = "moi-array"
    moiArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moiArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moiArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moiArray.EntityData.Children = types.NewOrderedMap()
    moiArray.EntityData.Children.Append("moi", types.YChild{"Moi", &moiArray.Moi})
    moiArray.EntityData.Leafs = types.NewOrderedMap()

    moiArray.EntityData.YListKeys = []string {}

    return &(moiArray.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData

    // nnh stackv4 data.
    NnhStackv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetEntityData() *types.CommonEntityData {
    moi.EntityData.YFilter = moi.YFilter
    moi.EntityData.YangName = "moi"
    moi.EntityData.BundleName = "cisco_ios_xr"
    moi.EntityData.ParentYangName = "moi-array"
    moi.EntityData.SegmentPath = "moi"
    moi.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    moi.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    moi.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    moi.EntityData.Children = types.NewOrderedMap()
    moi.EntityData.Children.Append("pop-and-lookup-ipv4", types.YChild{"PopAndLookupIpv4", &moi.PopAndLookupIpv4})
    moi.EntityData.Children.Append("pop-and-lookup-tp", types.YChild{"PopAndLookupTp", &moi.PopAndLookupTp})
    moi.EntityData.Children.Append("pop-and-lookup-ipv6", types.YChild{"PopAndLookupIpv6", &moi.PopAndLookupIpv6})
    moi.EntityData.Children.Append("ipv4-data", types.YChild{"Ipv4Data", &moi.Ipv4Data})
    moi.EntityData.Children.Append("ipv6-data", types.YChild{"Ipv6Data", &moi.Ipv6Data})
    moi.EntityData.Children.Append("tev4-data", types.YChild{"Tev4Data", &moi.Tev4Data})
    moi.EntityData.Children.Append("pseudowire-data", types.YChild{"PseudowireData", &moi.PseudowireData})
    moi.EntityData.Children.Append("ip-sub-data", types.YChild{"IpSubData", &moi.IpSubData})
    moi.EntityData.Children.Append("pseudowire-head-end-data", types.YChild{"PseudowireHeadEndData", &moi.PseudowireHeadEndData})
    moi.EntityData.Children.Append("pw-list-data", types.YChild{"PwListData", &moi.PwListData})
    moi.EntityData.Children.Append("stackv4-data", types.YChild{"Stackv4Data", &moi.Stackv4Data})
    moi.EntityData.Children.Append("stackv6-data", types.YChild{"Stackv6Data", &moi.Stackv6Data})
    moi.EntityData.Children.Append("te-head-data", types.YChild{"TeHeadData", &moi.TeHeadData})
    moi.EntityData.Children.Append("dmtc-data", types.YChild{"DmtcData", &moi.DmtcData})
    moi.EntityData.Children.Append("nnh-stackv4-data", types.YChild{"NnhStackv4Data", &moi.NnhStackv4Data})
    moi.EntityData.Leafs = types.NewOrderedMap()
    moi.EntityData.Leafs.Append("moi-type", types.YLeaf{"MoiType", moi.MoiType})

    moi.EntityData.YListKeys = []string {}

    return &(moi.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv4.EntityData.YFilter = popAndLookupIpv4.YFilter
    popAndLookupIpv4.EntityData.YangName = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv4.EntityData.ParentYangName = "moi"
    popAndLookupIpv4.EntityData.SegmentPath = "pop-and-lookup-ipv4"
    popAndLookupIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv4.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv4.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv4.TableId})
    popAndLookupIpv4.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv4.TableName})
    popAndLookupIpv4.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv4.PathFlagsDecode})

    popAndLookupIpv4.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv4.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetEntityData() *types.CommonEntityData {
    popAndLookupTp.EntityData.YFilter = popAndLookupTp.YFilter
    popAndLookupTp.EntityData.YangName = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupTp.EntityData.ParentYangName = "moi"
    popAndLookupTp.EntityData.SegmentPath = "pop-and-lookup-tp"
    popAndLookupTp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupTp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupTp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupTp.EntityData.Children = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupTp.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupTp.TableId})
    popAndLookupTp.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupTp.TableName})
    popAndLookupTp.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupTp.PathFlagsDecode})
    popAndLookupTp.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", popAndLookupTp.OutLabel})

    popAndLookupTp.EntityData.YListKeys = []string {}

    return &(popAndLookupTp.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetEntityData() *types.CommonEntityData {
    popAndLookupIpv6.EntityData.YFilter = popAndLookupIpv6.YFilter
    popAndLookupIpv6.EntityData.YangName = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.BundleName = "cisco_ios_xr"
    popAndLookupIpv6.EntityData.ParentYangName = "moi"
    popAndLookupIpv6.EntityData.SegmentPath = "pop-and-lookup-ipv6"
    popAndLookupIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    popAndLookupIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    popAndLookupIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    popAndLookupIpv6.EntityData.Children = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs = types.NewOrderedMap()
    popAndLookupIpv6.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", popAndLookupIpv6.TableId})
    popAndLookupIpv6.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", popAndLookupIpv6.TableName})
    popAndLookupIpv6.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", popAndLookupIpv6.PathFlagsDecode})

    popAndLookupIpv6.EntityData.YListKeys = []string {}

    return &(popAndLookupIpv6.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetEntityData() *types.CommonEntityData {
    ipv4Data.EntityData.YFilter = ipv4Data.YFilter
    ipv4Data.EntityData.YangName = "ipv4-data"
    ipv4Data.EntityData.BundleName = "cisco_ios_xr"
    ipv4Data.EntityData.ParentYangName = "moi"
    ipv4Data.EntityData.SegmentPath = "ipv4-data"
    ipv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Data.EntityData.Children = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs = types.NewOrderedMap()
    ipv4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv4Data.TableId})
    ipv4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv4Data.TableName})
    ipv4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv4Data.PathFlagsDecode})
    ipv4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv4Data.OutInterface})
    ipv4Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv4Data.OutInterfaceParent})
    ipv4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", ipv4Data.Ipv4NextHop})
    ipv4Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv4Data.PathId})
    ipv4Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv4Data.BackupPathId})
    ipv4Data.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", ipv4Data.LoadMetric})
    ipv4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv4Data.OutLabel})
    ipv4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv4Data.OutLabelName})
    ipv4Data.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4Data.TunnelId})
    ipv4Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv4Data.NextHopId})
    ipv4Data.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", ipv4Data.LocalLabel})

    ipv4Data.EntityData.YListKeys = []string {}

    return &(ipv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetEntityData() *types.CommonEntityData {
    ipv6Data.EntityData.YFilter = ipv6Data.YFilter
    ipv6Data.EntityData.YangName = "ipv6-data"
    ipv6Data.EntityData.BundleName = "cisco_ios_xr"
    ipv6Data.EntityData.ParentYangName = "moi"
    ipv6Data.EntityData.SegmentPath = "ipv6-data"
    ipv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Data.EntityData.Children = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs = types.NewOrderedMap()
    ipv6Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipv6Data.TableId})
    ipv6Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipv6Data.TableName})
    ipv6Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipv6Data.PathFlagsDecode})
    ipv6Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipv6Data.OutInterface})
    ipv6Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", ipv6Data.OutLabel})
    ipv6Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", ipv6Data.OutLabelName})
    ipv6Data.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", ipv6Data.Ipv6NextHop})
    ipv6Data.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", ipv6Data.PathId})
    ipv6Data.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", ipv6Data.BackupPathId})
    ipv6Data.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", ipv6Data.NextHopId})
    ipv6Data.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", ipv6Data.OutInterfaceParent})

    ipv6Data.EntityData.YListKeys = []string {}

    return &(ipv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}

    // IPv4 next nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextNextHop interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetEntityData() *types.CommonEntityData {
    tev4Data.EntityData.YFilter = tev4Data.YFilter
    tev4Data.EntityData.YangName = "tev4-data"
    tev4Data.EntityData.BundleName = "cisco_ios_xr"
    tev4Data.EntityData.ParentYangName = "moi"
    tev4Data.EntityData.SegmentPath = "tev4-data"
    tev4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tev4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tev4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tev4Data.EntityData.Children = types.NewOrderedMap()
    tev4Data.EntityData.Leafs = types.NewOrderedMap()
    tev4Data.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", tev4Data.TableId})
    tev4Data.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", tev4Data.TableName})
    tev4Data.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", tev4Data.PathFlagsDecode})
    tev4Data.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", tev4Data.OutInterface})
    tev4Data.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", tev4Data.OutLabel})
    tev4Data.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", tev4Data.OutLabelName})
    tev4Data.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", tev4Data.Ipv4NextHop})
    tev4Data.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", tev4Data.BackupInterface})
    tev4Data.EntityData.Leafs.Append("backup-ipv4-next-hop", types.YLeaf{"BackupIpv4NextHop", tev4Data.BackupIpv4NextHop})
    tev4Data.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", tev4Data.MergePointLabel})
    tev4Data.EntityData.Leafs.Append("backup-local-label", types.YLeaf{"BackupLocalLabel", tev4Data.BackupLocalLabel})
    tev4Data.EntityData.Leafs.Append("tunnel-interface", types.YLeaf{"TunnelInterface", tev4Data.TunnelInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-weight", types.YLeaf{"TunnelWeight", tev4Data.TunnelWeight})
    tev4Data.EntityData.Leafs.Append("data-out-parent-interface", types.YLeaf{"DataOutParentInterface", tev4Data.DataOutParentInterface})
    tev4Data.EntityData.Leafs.Append("tunnel-class", types.YLeaf{"TunnelClass", tev4Data.TunnelClass})
    tev4Data.EntityData.Leafs.Append("ipv4-next-next-hop", types.YLeaf{"Ipv4NextNextHop", tev4Data.Ipv4NextNextHop})

    tev4Data.EntityData.YListKeys = []string {}

    return &(tev4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetEntityData() *types.CommonEntityData {
    pseudowireData.EntityData.YFilter = pseudowireData.YFilter
    pseudowireData.EntityData.YangName = "pseudowire-data"
    pseudowireData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireData.EntityData.ParentYangName = "moi"
    pseudowireData.EntityData.SegmentPath = "pseudowire-data"
    pseudowireData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireData.EntityData.Children = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireData.TableId})
    pseudowireData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireData.TableName})
    pseudowireData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireData.PathFlagsDecode})
    pseudowireData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireData.OutInterface})
    pseudowireData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireData.OutLabel})
    pseudowireData.EntityData.Leafs.Append("cross-connect-id", types.YLeaf{"CrossConnectId", pseudowireData.CrossConnectId})
    pseudowireData.EntityData.Leafs.Append("pseuodo-wire-connect-id", types.YLeaf{"PseuodoWireConnectId", pseudowireData.PseuodoWireConnectId})
    pseudowireData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireData.Ipv4NextHop})
    pseudowireData.EntityData.Leafs.Append("bridge-id", types.YLeaf{"BridgeId", pseudowireData.BridgeId})
    pseudowireData.EntityData.Leafs.Append("split-horizon-id", types.YLeaf{"SplitHorizonId", pseudowireData.SplitHorizonId})

    pseudowireData.EntityData.YListKeys = []string {}

    return &(pseudowireData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetEntityData() *types.CommonEntityData {
    ipSubData.EntityData.YFilter = ipSubData.YFilter
    ipSubData.EntityData.YangName = "ip-sub-data"
    ipSubData.EntityData.BundleName = "cisco_ios_xr"
    ipSubData.EntityData.ParentYangName = "moi"
    ipSubData.EntityData.SegmentPath = "ip-sub-data"
    ipSubData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipSubData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipSubData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipSubData.EntityData.Children = types.NewOrderedMap()
    ipSubData.EntityData.Leafs = types.NewOrderedMap()
    ipSubData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", ipSubData.TableId})
    ipSubData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", ipSubData.TableName})
    ipSubData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", ipSubData.OutInterface})
    ipSubData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", ipSubData.PathFlagsDecode})

    ipSubData.EntityData.YListKeys = []string {}

    return &(ipSubData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetEntityData() *types.CommonEntityData {
    pseudowireHeadEndData.EntityData.YFilter = pseudowireHeadEndData.YFilter
    pseudowireHeadEndData.EntityData.YangName = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.BundleName = "cisco_ios_xr"
    pseudowireHeadEndData.EntityData.ParentYangName = "moi"
    pseudowireHeadEndData.EntityData.SegmentPath = "pseudowire-head-end-data"
    pseudowireHeadEndData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pseudowireHeadEndData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pseudowireHeadEndData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pseudowireHeadEndData.EntityData.Children = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs = types.NewOrderedMap()
    pseudowireHeadEndData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pseudowireHeadEndData.TableId})
    pseudowireHeadEndData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pseudowireHeadEndData.TableName})
    pseudowireHeadEndData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pseudowireHeadEndData.PathFlagsDecode})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", pseudowireHeadEndData.OutInterface})
    pseudowireHeadEndData.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", pseudowireHeadEndData.OutLabel})
    pseudowireHeadEndData.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", pseudowireHeadEndData.Ipv4NextHop})
    pseudowireHeadEndData.EntityData.Leafs.Append("control-word", types.YLeaf{"ControlWord", pseudowireHeadEndData.ControlWord})
    pseudowireHeadEndData.EntityData.Leafs.Append("imposition", types.YLeaf{"Imposition", pseudowireHeadEndData.Imposition})
    pseudowireHeadEndData.EntityData.Leafs.Append("vctype", types.YLeaf{"Vctype", pseudowireHeadEndData.Vctype})
    pseudowireHeadEndData.EntityData.Leafs.Append("pw-list-id", types.YLeaf{"PwListId", pseudowireHeadEndData.PwListId})
    pseudowireHeadEndData.EntityData.Leafs.Append("pwhe-interface", types.YLeaf{"PwheInterface", pseudowireHeadEndData.PwheInterface})

    pseudowireHeadEndData.EntityData.YListKeys = []string {}

    return &(pseudowireHeadEndData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetEntityData() *types.CommonEntityData {
    pwListData.EntityData.YFilter = pwListData.YFilter
    pwListData.EntityData.YangName = "pw-list-data"
    pwListData.EntityData.BundleName = "cisco_ios_xr"
    pwListData.EntityData.ParentYangName = "moi"
    pwListData.EntityData.SegmentPath = "pw-list-data"
    pwListData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pwListData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pwListData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pwListData.EntityData.Children = types.NewOrderedMap()
    pwListData.EntityData.Leafs = types.NewOrderedMap()
    pwListData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", pwListData.TableId})
    pwListData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", pwListData.TableName})
    pwListData.EntityData.Leafs.Append("l3-interface", types.YLeaf{"L3Interface", pwListData.L3Interface})
    pwListData.EntityData.Leafs.Append("l2-interface", types.YLeaf{"L2Interface", pwListData.L2Interface})
    pwListData.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", pwListData.PathFlagsDecode})

    pwListData.EntityData.YListKeys = []string {}

    return &(pwListData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetEntityData() *types.CommonEntityData {
    stackv4Data.EntityData.YFilter = stackv4Data.YFilter
    stackv4Data.EntityData.YangName = "stackv4-data"
    stackv4Data.EntityData.BundleName = "cisco_ios_xr"
    stackv4Data.EntityData.ParentYangName = "moi"
    stackv4Data.EntityData.SegmentPath = "stackv4-data"
    stackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv4Data.EntityData.Children = types.NewOrderedMap()
    stackv4Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv4Data.Nexthop})
    stackv4Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv4Data.InnerStack})
    stackv4Data.EntityData.Leafs = types.NewOrderedMap()
    stackv4Data.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", stackv4Data.OwnerApplicationType})

    stackv4Data.EntityData.YListKeys = []string {}

    return &(stackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv4-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv4-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetEntityData() *types.CommonEntityData {
    stackv6Data.EntityData.YFilter = stackv6Data.YFilter
    stackv6Data.EntityData.YangName = "stackv6-data"
    stackv6Data.EntityData.BundleName = "cisco_ios_xr"
    stackv6Data.EntityData.ParentYangName = "moi"
    stackv6Data.EntityData.SegmentPath = "stackv6-data"
    stackv6Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    stackv6Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    stackv6Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    stackv6Data.EntityData.Children = types.NewOrderedMap()
    stackv6Data.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &stackv6Data.Nexthop})
    stackv6Data.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &stackv6Data.InnerStack})
    stackv6Data.EntityData.Leafs = types.NewOrderedMap()

    stackv6Data.EntityData.YListKeys = []string {}

    return &(stackv6Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "stackv6-data"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("ipv6-next-hop", types.YLeaf{"Ipv6NextHop", nexthop.Ipv6NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "stackv6-data"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetEntityData() *types.CommonEntityData {
    teHeadData.EntityData.YFilter = teHeadData.YFilter
    teHeadData.EntityData.YangName = "te-head-data"
    teHeadData.EntityData.BundleName = "cisco_ios_xr"
    teHeadData.EntityData.ParentYangName = "moi"
    teHeadData.EntityData.SegmentPath = "te-head-data"
    teHeadData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    teHeadData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    teHeadData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    teHeadData.EntityData.Children = types.NewOrderedMap()
    teHeadData.EntityData.Leafs = types.NewOrderedMap()
    teHeadData.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", teHeadData.TableId})
    teHeadData.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", teHeadData.TableName})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label", types.YLeaf{"TunnelLocalLabel", teHeadData.TunnelLocalLabel})
    teHeadData.EntityData.Leafs.Append("tunnel-local-label-str", types.YLeaf{"TunnelLocalLabelStr", teHeadData.TunnelLocalLabelStr})
    teHeadData.EntityData.Leafs.Append("tunnel-fwd-class", types.YLeaf{"TunnelFwdClass", teHeadData.TunnelFwdClass})
    teHeadData.EntityData.Leafs.Append("tunnel-load-metric", types.YLeaf{"TunnelLoadMetric", teHeadData.TunnelLoadMetric})
    teHeadData.EntityData.Leafs.Append("flags-decode", types.YLeaf{"FlagsDecode", teHeadData.FlagsDecode})

    teHeadData.EntityData.YListKeys = []string {}

    return &(teHeadData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetEntityData() *types.CommonEntityData {
    dmtcData.EntityData.YFilter = dmtcData.YFilter
    dmtcData.EntityData.YangName = "dmtc-data"
    dmtcData.EntityData.BundleName = "cisco_ios_xr"
    dmtcData.EntityData.ParentYangName = "moi"
    dmtcData.EntityData.SegmentPath = "dmtc-data"
    dmtcData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dmtcData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dmtcData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dmtcData.EntityData.Children = types.NewOrderedMap()
    dmtcData.EntityData.Leafs = types.NewOrderedMap()
    dmtcData.EntityData.Leafs.Append("dmtc-ext-ifh", types.YLeaf{"DmtcExtIfh", dmtcData.DmtcExtIfh})

    dmtcData.EntityData.YListKeys = []string {}

    return &(dmtcData.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data
// nnh stackv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IPv4 stack.
    Ipv4Stack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack

    // List of Next Next Hops. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop.
    NextNextHop []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
}

func (nnhStackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data) GetEntityData() *types.CommonEntityData {
    nnhStackv4Data.EntityData.YFilter = nnhStackv4Data.YFilter
    nnhStackv4Data.EntityData.YangName = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.BundleName = "cisco_ios_xr"
    nnhStackv4Data.EntityData.ParentYangName = "moi"
    nnhStackv4Data.EntityData.SegmentPath = "nnh-stackv4-data"
    nnhStackv4Data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nnhStackv4Data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nnhStackv4Data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nnhStackv4Data.EntityData.Children = types.NewOrderedMap()
    nnhStackv4Data.EntityData.Children.Append("ipv4-stack", types.YChild{"Ipv4Stack", &nnhStackv4Data.Ipv4Stack})
    nnhStackv4Data.EntityData.Children.Append("next-next-hop", types.YChild{"NextNextHop", nil})
    for i := range nnhStackv4Data.NextNextHop {
        nnhStackv4Data.EntityData.Children.Append(types.GetSegmentPath(nnhStackv4Data.NextNextHop[i]), types.YChild{"NextNextHop", nnhStackv4Data.NextNextHop[i]})
    }
    nnhStackv4Data.EntityData.Leafs = types.NewOrderedMap()

    nnhStackv4Data.EntityData.YListKeys = []string {}

    return &(nnhStackv4Data.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack
// IPv4 stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
}

func (ipv4Stack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack) GetEntityData() *types.CommonEntityData {
    ipv4Stack.EntityData.YFilter = ipv4Stack.YFilter
    ipv4Stack.EntityData.YangName = "ipv4-stack"
    ipv4Stack.EntityData.BundleName = "cisco_ios_xr"
    ipv4Stack.EntityData.ParentYangName = "nnh-stackv4-data"
    ipv4Stack.EntityData.SegmentPath = "ipv4-stack"
    ipv4Stack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Stack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Stack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Stack.EntityData.Children = types.NewOrderedMap()
    ipv4Stack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", &ipv4Stack.Nexthop})
    ipv4Stack.EntityData.Children.Append("inner-stack", types.YChild{"InnerStack", &ipv4Stack.InnerStack})
    ipv4Stack.EntityData.Leafs = types.NewOrderedMap()
    ipv4Stack.EntityData.Leafs.Append("owner-application-type", types.YLeaf{"OwnerApplicationType", ipv4Stack.OwnerApplicationType})

    ipv4Stack.EntityData.YListKeys = []string {}

    return &(ipv4Stack.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "ipv4-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("table-id", types.YLeaf{"TableId", nexthop.TableId})
    nexthop.EntityData.Leafs.Append("table-name", types.YLeaf{"TableName", nexthop.TableName})
    nexthop.EntityData.Leafs.Append("path-flags-decode", types.YLeaf{"PathFlagsDecode", nexthop.PathFlagsDecode})
    nexthop.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", nexthop.OutInterface})
    nexthop.EntityData.Leafs.Append("out-interface-parent", types.YLeaf{"OutInterfaceParent", nexthop.OutInterfaceParent})
    nexthop.EntityData.Leafs.Append("ipv4-next-hop", types.YLeaf{"Ipv4NextHop", nexthop.Ipv4NextHop})
    nexthop.EntityData.Leafs.Append("path-id", types.YLeaf{"PathId", nexthop.PathId})
    nexthop.EntityData.Leafs.Append("backup-path-id", types.YLeaf{"BackupPathId", nexthop.BackupPathId})
    nexthop.EntityData.Leafs.Append("load-metric", types.YLeaf{"LoadMetric", nexthop.LoadMetric})
    nexthop.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", nexthop.OutLabel})
    nexthop.EntityData.Leafs.Append("out-label-name", types.YLeaf{"OutLabelName", nexthop.OutLabelName})
    nexthop.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", nexthop.TunnelId})
    nexthop.EntityData.Leafs.Append("next-hop-id", types.YLeaf{"NextHopId", nexthop.NextHopId})
    nexthop.EntityData.Leafs.Append("local-label", types.YLeaf{"LocalLabel", nexthop.LocalLabel})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop.
    Nexthop []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label.
    Label []*MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack) GetEntityData() *types.CommonEntityData {
    innerStack.EntityData.YFilter = innerStack.YFilter
    innerStack.EntityData.YangName = "inner-stack"
    innerStack.EntityData.BundleName = "cisco_ios_xr"
    innerStack.EntityData.ParentYangName = "ipv4-stack"
    innerStack.EntityData.SegmentPath = "inner-stack"
    innerStack.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    innerStack.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    innerStack.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    innerStack.EntityData.Children = types.NewOrderedMap()
    innerStack.EntityData.Children.Append("nexthop", types.YChild{"Nexthop", nil})
    for i := range innerStack.Nexthop {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Nexthop[i]), types.YChild{"Nexthop", innerStack.Nexthop[i]})
    }
    innerStack.EntityData.Children.Append("label", types.YChild{"Label", nil})
    for i := range innerStack.Label {
        innerStack.EntityData.Children.Append(types.GetSegmentPath(innerStack.Label[i]), types.YChild{"Label", innerStack.Label[i]})
    }
    innerStack.EntityData.Leafs = types.NewOrderedMap()
    innerStack.EntityData.Leafs.Append("num-nexthops", types.YLeaf{"NumNexthops", innerStack.NumNexthops})
    innerStack.EntityData.Leafs.Append("num-lbls", types.YLeaf{"NumLbls", innerStack.NumLbls})

    innerStack.EntityData.YListKeys = []string {}

    return &(innerStack.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop
// Remote nexthop addresses
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Entry interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Nexthop) GetEntityData() *types.CommonEntityData {
    nexthop.EntityData.YFilter = nexthop.YFilter
    nexthop.EntityData.YangName = "nexthop"
    nexthop.EntityData.BundleName = "cisco_ios_xr"
    nexthop.EntityData.ParentYangName = "inner-stack"
    nexthop.EntityData.SegmentPath = "nexthop"
    nexthop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nexthop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nexthop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nexthop.EntityData.Children = types.NewOrderedMap()
    nexthop.EntityData.Leafs = types.NewOrderedMap()
    nexthop.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", nexthop.Entry})

    nexthop.EntityData.YListKeys = []string {}

    return &(nexthop.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_Ipv4Stack_InnerStack_Label) GetEntityData() *types.CommonEntityData {
    label.EntityData.YFilter = label.YFilter
    label.EntityData.YangName = "label"
    label.EntityData.BundleName = "cisco_ios_xr"
    label.EntityData.ParentYangName = "inner-stack"
    label.EntityData.SegmentPath = "label"
    label.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    label.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    label.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    label.EntityData.Children = types.NewOrderedMap()
    label.EntityData.Leafs = types.NewOrderedMap()
    label.EntityData.Leafs.Append("outgoing-label", types.YLeaf{"OutgoingLabel", label.OutgoingLabel})
    label.EntityData.Leafs.Append("outgoing-label-str", types.YLeaf{"OutgoingLabelStr", label.OutgoingLabelStr})

    label.EntityData.YListKeys = []string {}

    return &(label.EntityData)
}

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop
// List of Next Next Hops
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // nnh type. The type is MplsLsdNnh.
    NnhType interface{}

    // IPv4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (nextNextHop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_NnhStackv4Data_NextNextHop) GetEntityData() *types.CommonEntityData {
    nextNextHop.EntityData.YFilter = nextNextHop.YFilter
    nextNextHop.EntityData.YangName = "next-next-hop"
    nextNextHop.EntityData.BundleName = "cisco_ios_xr"
    nextNextHop.EntityData.ParentYangName = "nnh-stackv4-data"
    nextNextHop.EntityData.SegmentPath = "next-next-hop"
    nextNextHop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nextNextHop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nextNextHop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nextNextHop.EntityData.Children = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs = types.NewOrderedMap()
    nextNextHop.EntityData.Leafs.Append("nnh-type", types.YLeaf{"NnhType", nextNextHop.NnhType})
    nextNextHop.EntityData.Leafs.Append("address", types.YLeaf{"Address", nextNextHop.Address})
    nextNextHop.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", nextNextHop.InterfaceName})

    nextNextHop.EntityData.YListKeys = []string {}

    return &(nextNextHop.EntityData)
}

// MplsLsd_RewriteSummary
// Rewrite Summary 
type MplsLsd_RewriteSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4rpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6rpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsd_RewriteSummary_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsd_RewriteSummary_Ipv6Paths
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetEntityData() *types.CommonEntityData {
    rewriteSummary.EntityData.YFilter = rewriteSummary.YFilter
    rewriteSummary.EntityData.YangName = "rewrite-summary"
    rewriteSummary.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummary.EntityData.ParentYangName = "mpls-lsd"
    rewriteSummary.EntityData.SegmentPath = "rewrite-summary"
    rewriteSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummary.EntityData.Children = types.NewOrderedMap()
    rewriteSummary.EntityData.Children.Append("ipv4-paths", types.YChild{"Ipv4Paths", &rewriteSummary.Ipv4Paths})
    rewriteSummary.EntityData.Children.Append("ipv6-paths", types.YChild{"Ipv6Paths", &rewriteSummary.Ipv6Paths})
    rewriteSummary.EntityData.Leafs = types.NewOrderedMap()
    rewriteSummary.EntityData.Leafs.Append("num-label-fpi", types.YLeaf{"NumLabelFpi", rewriteSummary.NumLabelFpi})
    rewriteSummary.EntityData.Leafs.Append("num-tefpi", types.YLeaf{"NumTefpi", rewriteSummary.NumTefpi})
    rewriteSummary.EntityData.Leafs.Append("num-ipv4fpi", types.YLeaf{"NumIpv4fpi", rewriteSummary.NumIpv4fpi})
    rewriteSummary.EntityData.Leafs.Append("num-ipv6fpi", types.YLeaf{"NumIpv6fpi", rewriteSummary.NumIpv6fpi})
    rewriteSummary.EntityData.Leafs.Append("num-pw-list-tefpi", types.YLeaf{"NumPwListTefpi", rewriteSummary.NumPwListTefpi})
    rewriteSummary.EntityData.Leafs.Append("num-dmtctefpi", types.YLeaf{"NumDmtctefpi", rewriteSummary.NumDmtctefpi})
    rewriteSummary.EntityData.Leafs.Append("num-rewrite", types.YLeaf{"NumRewrite", rewriteSummary.NumRewrite})
    rewriteSummary.EntityData.Leafs.Append("total-forward-update", types.YLeaf{"TotalForwardUpdate", rewriteSummary.TotalForwardUpdate})
    rewriteSummary.EntityData.Leafs.Append("total-forwad-update-message", types.YLeaf{"TotalForwadUpdateMessage", rewriteSummary.TotalForwadUpdateMessage})
    rewriteSummary.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", rewriteSummary.TotalPaths})
    rewriteSummary.EntityData.Leafs.Append("total-t-ev4-paths", types.YLeaf{"TotalTEv4Paths", rewriteSummary.TotalTEv4Paths})
    rewriteSummary.EntityData.Leafs.Append("total-te-head-paths", types.YLeaf{"TotalTeHeadPaths", rewriteSummary.TotalTeHeadPaths})
    rewriteSummary.EntityData.Leafs.Append("total-pw-paths", types.YLeaf{"TotalPwPaths", rewriteSummary.TotalPwPaths})
    rewriteSummary.EntityData.Leafs.Append("total-ip-sub-paths", types.YLeaf{"TotalIpSubPaths", rewriteSummary.TotalIpSubPaths})
    rewriteSummary.EntityData.Leafs.Append("total-ipv4rpf-neighbors", types.YLeaf{"TotalIpv4rpfNeighbors", rewriteSummary.TotalIpv4rpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("total-ipv6rpf-neighbors", types.YLeaf{"TotalIpv6rpfNeighbors", rewriteSummary.TotalIpv6rpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("num-rewrite-rpf-neighbors", types.YLeaf{"NumRewriteRpfNeighbors", rewriteSummary.NumRewriteRpfNeighbors})
    rewriteSummary.EntityData.Leafs.Append("total-dmtc-intf", types.YLeaf{"TotalDmtcIntf", rewriteSummary.TotalDmtcIntf})
    rewriteSummary.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", rewriteSummary.VrfNameXr})

    rewriteSummary.EntityData.YListKeys = []string {}

    return &(rewriteSummary.EntityData)
}

// MplsLsd_RewriteSummary_Ipv4Paths
// Count for IPv4 paths
type MplsLsd_RewriteSummary_Ipv4Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetEntityData() *types.CommonEntityData {
    ipv4Paths.EntityData.YFilter = ipv4Paths.YFilter
    ipv4Paths.EntityData.YangName = "ipv4-paths"
    ipv4Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv4Paths.EntityData.ParentYangName = "rewrite-summary"
    ipv4Paths.EntityData.SegmentPath = "ipv4-paths"
    ipv4Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Paths.EntityData.Children = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv4Paths.TotalPaths})
    ipv4Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv4Paths.TotalBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv4Paths.TotalRemoteBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv4Paths.TotalProtectedPaths})
    ipv4Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv4Paths.TotalPopLkupPaths})

    ipv4Paths.EntityData.YListKeys = []string {}

    return &(ipv4Paths.EntityData)
}

// MplsLsd_RewriteSummary_Ipv6Paths
// Count for IPv6 paths
type MplsLsd_RewriteSummary_Ipv6Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetEntityData() *types.CommonEntityData {
    ipv6Paths.EntityData.YFilter = ipv6Paths.YFilter
    ipv6Paths.EntityData.YangName = "ipv6-paths"
    ipv6Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv6Paths.EntityData.ParentYangName = "rewrite-summary"
    ipv6Paths.EntityData.SegmentPath = "ipv6-paths"
    ipv6Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Paths.EntityData.Children = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv6Paths.TotalPaths})
    ipv6Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv6Paths.TotalBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv6Paths.TotalRemoteBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv6Paths.TotalProtectedPaths})
    ipv6Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv6Paths.TotalPopLkupPaths})

    ipv6Paths.EntityData.YListKeys = []string {}

    return &(ipv6Paths.EntityData)
}

// MplsLsd_Applications
// Table of MPLS applications using LSD
type MplsLsd_Applications struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS application using LSD. The type is slice of
    // MplsLsd_Applications_Application.
    Application []*MplsLsd_Applications_Application
}

func (applications *MplsLsd_Applications) GetEntityData() *types.CommonEntityData {
    applications.EntityData.YFilter = applications.YFilter
    applications.EntityData.YangName = "applications"
    applications.EntityData.BundleName = "cisco_ios_xr"
    applications.EntityData.ParentYangName = "mpls-lsd"
    applications.EntityData.SegmentPath = "applications"
    applications.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applications.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applications.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applications.EntityData.Children = types.NewOrderedMap()
    applications.EntityData.Children.Append("application", types.YChild{"Application", nil})
    for i := range applications.Application {
        applications.EntityData.Children.Append(types.GetSegmentPath(applications.Application[i]), types.YChild{"Application", applications.Application[i]})
    }
    applications.EntityData.Leafs = types.NewOrderedMap()

    applications.EntityData.YListKeys = []string {}

    return &(applications.EntityData)
}

// MplsLsd_Applications_Application
// Data for MPLS application using LSD
type MplsLsd_Applications_Application struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Application Instance name in the form of
    // '<app_type_name>[:<instance>]'. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ApplicationName interface{}

    // Application name. The type is string.
    ApplicationNameXr interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // App reg ts. The type is interface{} with range: 0..18446744073709551615.
    AppRegTime interface{}

    // App disconnect ts. The type is interface{} with range:
    // 0..18446744073709551615.
    AppDisconnectTime interface{}

    // App flow control status. The type is interface{} with range:
    // -2147483648..2147483647.
    AppFlowControlled interface{}

    // Flow Ctrl ts. The type is interface{} with range: 0..18446744073709551615.
    FlowCtrlTime interface{}

    // Flow Ctrl Clr ts. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowCtrlClrTime interface{}

    // App go active timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    GoActTs interface{}

    // Application state. The type is MgmtLsdAppState.
    ApplicationState interface{}

    // Recovery time [secs] remaining if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRemainingSeconds interface{}

    // Recovery time [secs] elapsed if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeElapsedSeconds interface{}

    // Recovery time [secs] specified at registration or set explicitly. The type
    // is interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRegisterSeconds interface{}

    // Node ID where application is/was running. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Application Statistics.
    ApplicationStatistics MplsLsd_Applications_Application_ApplicationStatistics
}

func (application *MplsLsd_Applications_Application) GetEntityData() *types.CommonEntityData {
    application.EntityData.YFilter = application.YFilter
    application.EntityData.YangName = "application"
    application.EntityData.BundleName = "cisco_ios_xr"
    application.EntityData.ParentYangName = "applications"
    application.EntityData.SegmentPath = "application" + types.AddKeyToken(application.ApplicationName, "application-name")
    application.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    application.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    application.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    application.EntityData.Children = types.NewOrderedMap()
    application.EntityData.Children.Append("application-statistics", types.YChild{"ApplicationStatistics", &application.ApplicationStatistics})
    application.EntityData.Leafs = types.NewOrderedMap()
    application.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", application.ApplicationName})
    application.EntityData.Leafs.Append("application-name-xr", types.YLeaf{"ApplicationNameXr", application.ApplicationNameXr})
    application.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", application.ApplicationType})
    application.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", application.ApplicationRolePrimary})
    application.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", application.ApplicationInstance})
    application.EntityData.Leafs.Append("app-reg-time", types.YLeaf{"AppRegTime", application.AppRegTime})
    application.EntityData.Leafs.Append("app-disconnect-time", types.YLeaf{"AppDisconnectTime", application.AppDisconnectTime})
    application.EntityData.Leafs.Append("app-flow-controlled", types.YLeaf{"AppFlowControlled", application.AppFlowControlled})
    application.EntityData.Leafs.Append("flow-ctrl-time", types.YLeaf{"FlowCtrlTime", application.FlowCtrlTime})
    application.EntityData.Leafs.Append("flow-ctrl-clr-time", types.YLeaf{"FlowCtrlClrTime", application.FlowCtrlClrTime})
    application.EntityData.Leafs.Append("go-act-ts", types.YLeaf{"GoActTs", application.GoActTs})
    application.EntityData.Leafs.Append("application-state", types.YLeaf{"ApplicationState", application.ApplicationState})
    application.EntityData.Leafs.Append("recovery-time-remaining-seconds", types.YLeaf{"RecoveryTimeRemainingSeconds", application.RecoveryTimeRemainingSeconds})
    application.EntityData.Leafs.Append("recovery-time-elapsed-seconds", types.YLeaf{"RecoveryTimeElapsedSeconds", application.RecoveryTimeElapsedSeconds})
    application.EntityData.Leafs.Append("recovery-time-register-seconds", types.YLeaf{"RecoveryTimeRegisterSeconds", application.RecoveryTimeRegisterSeconds})
    application.EntityData.Leafs.Append("node-id", types.YLeaf{"NodeId", application.NodeId})

    application.EntityData.YListKeys = []string {"ApplicationName"}

    return &(application.EntityData)
}

// MplsLsd_Applications_Application_ApplicationStatistics
// Application Statistics
type MplsLsd_Applications_Application_ApplicationStatistics struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of interface enabled. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnable interface{}

    // Number of interface enable pending. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnablePending interface{}

    // Connect count. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Connected statistics.
    Connected MplsLsd_Applications_Application_ApplicationStatistics_Connected

    // Label context count. The type is slice of
    // MplsLsd_Applications_Application_ApplicationStatistics_LabelContextCount.
    LabelContextCount []*MplsLsd_Applications_Application_ApplicationStatistics_LabelContextCount

    // Label context pending count. The type is slice of
    // MplsLsd_Applications_Application_ApplicationStatistics_LabelContextPendingCount.
    LabelContextPendingCount []*MplsLsd_Applications_Application_ApplicationStatistics_LabelContextPendingCount
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetEntityData() *types.CommonEntityData {
    applicationStatistics.EntityData.YFilter = applicationStatistics.YFilter
    applicationStatistics.EntityData.YangName = "application-statistics"
    applicationStatistics.EntityData.BundleName = "cisco_ios_xr"
    applicationStatistics.EntityData.ParentYangName = "application"
    applicationStatistics.EntityData.SegmentPath = "application-statistics"
    applicationStatistics.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationStatistics.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationStatistics.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationStatistics.EntityData.Children = types.NewOrderedMap()
    applicationStatistics.EntityData.Children.Append("connected", types.YChild{"Connected", &applicationStatistics.Connected})
    applicationStatistics.EntityData.Children.Append("label-context-count", types.YChild{"LabelContextCount", nil})
    for i := range applicationStatistics.LabelContextCount {
        applicationStatistics.EntityData.Children.Append(types.GetSegmentPath(applicationStatistics.LabelContextCount[i]), types.YChild{"LabelContextCount", applicationStatistics.LabelContextCount[i]})
    }
    applicationStatistics.EntityData.Children.Append("label-context-pending-count", types.YChild{"LabelContextPendingCount", nil})
    for i := range applicationStatistics.LabelContextPendingCount {
        applicationStatistics.EntityData.Children.Append(types.GetSegmentPath(applicationStatistics.LabelContextPendingCount[i]), types.YChild{"LabelContextPendingCount", applicationStatistics.LabelContextPendingCount[i]})
    }
    applicationStatistics.EntityData.Leafs = types.NewOrderedMap()
    applicationStatistics.EntityData.Leafs.Append("interface-enable", types.YLeaf{"InterfaceEnable", applicationStatistics.InterfaceEnable})
    applicationStatistics.EntityData.Leafs.Append("interface-enable-pending", types.YLeaf{"InterfaceEnablePending", applicationStatistics.InterfaceEnablePending})
    applicationStatistics.EntityData.Leafs.Append("connect-count", types.YLeaf{"ConnectCount", applicationStatistics.ConnectCount})

    applicationStatistics.EntityData.YListKeys = []string {}

    return &(applicationStatistics.EntityData)
}

// MplsLsd_Applications_Application_ApplicationStatistics_Connected
// Connected statistics
type MplsLsd_Applications_Application_ApplicationStatistics_Connected struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RT set count. The type is interface{} with range: 0..4294967295.
    RtSetMsgCount interface{}

    // Operation count. The type is interface{} with range: 0..4294967295.
    OperationMsgCount interface{}

    // Label OOR count. The type is interface{} with range: 0..4294967295.
    OorLabelCount interface{}

    // Error count. The type is interface{} with range: 0..4294967295.
    ErrorMsgCount interface{}
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetEntityData() *types.CommonEntityData {
    connected.EntityData.YFilter = connected.YFilter
    connected.EntityData.YangName = "connected"
    connected.EntityData.BundleName = "cisco_ios_xr"
    connected.EntityData.ParentYangName = "application-statistics"
    connected.EntityData.SegmentPath = "connected"
    connected.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connected.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connected.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connected.EntityData.Children = types.NewOrderedMap()
    connected.EntityData.Leafs = types.NewOrderedMap()
    connected.EntityData.Leafs.Append("rt-set-msg-count", types.YLeaf{"RtSetMsgCount", connected.RtSetMsgCount})
    connected.EntityData.Leafs.Append("operation-msg-count", types.YLeaf{"OperationMsgCount", connected.OperationMsgCount})
    connected.EntityData.Leafs.Append("oor-label-count", types.YLeaf{"OorLabelCount", connected.OorLabelCount})
    connected.EntityData.Leafs.Append("error-msg-count", types.YLeaf{"ErrorMsgCount", connected.ErrorMsgCount})

    connected.EntityData.YListKeys = []string {}

    return &(connected.EntityData)
}

// MplsLsd_Applications_Application_ApplicationStatistics_LabelContextCount
// Label context count
type MplsLsd_Applications_Application_ApplicationStatistics_LabelContextCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelContextCount *MplsLsd_Applications_Application_ApplicationStatistics_LabelContextCount) GetEntityData() *types.CommonEntityData {
    labelContextCount.EntityData.YFilter = labelContextCount.YFilter
    labelContextCount.EntityData.YangName = "label-context-count"
    labelContextCount.EntityData.BundleName = "cisco_ios_xr"
    labelContextCount.EntityData.ParentYangName = "application-statistics"
    labelContextCount.EntityData.SegmentPath = "label-context-count"
    labelContextCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContextCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContextCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContextCount.EntityData.Children = types.NewOrderedMap()
    labelContextCount.EntityData.Leafs = types.NewOrderedMap()
    labelContextCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelContextCount.Entry})

    labelContextCount.EntityData.YListKeys = []string {}

    return &(labelContextCount.EntityData)
}

// MplsLsd_Applications_Application_ApplicationStatistics_LabelContextPendingCount
// Label context pending count
type MplsLsd_Applications_Application_ApplicationStatistics_LabelContextPendingCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (labelContextPendingCount *MplsLsd_Applications_Application_ApplicationStatistics_LabelContextPendingCount) GetEntityData() *types.CommonEntityData {
    labelContextPendingCount.EntityData.YFilter = labelContextPendingCount.YFilter
    labelContextPendingCount.EntityData.YangName = "label-context-pending-count"
    labelContextPendingCount.EntityData.BundleName = "cisco_ios_xr"
    labelContextPendingCount.EntityData.ParentYangName = "application-statistics"
    labelContextPendingCount.EntityData.SegmentPath = "label-context-pending-count"
    labelContextPendingCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelContextPendingCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelContextPendingCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelContextPendingCount.EntityData.Children = types.NewOrderedMap()
    labelContextPendingCount.EntityData.Leafs = types.NewOrderedMap()
    labelContextPendingCount.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", labelContextPendingCount.Entry})

    labelContextPendingCount.EntityData.YListKeys = []string {}

    return &(labelContextPendingCount.EntityData)
}

// MplsLsd_LabelSummaryVrfs
// Dynamic label range summary by VRF
type MplsLsd_LabelSummaryVrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Dynamic label range summary by VRF. The type is slice of
    // MplsLsd_LabelSummaryVrfs_LabelSummaryVrf.
    LabelSummaryVrf []*MplsLsd_LabelSummaryVrfs_LabelSummaryVrf
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetEntityData() *types.CommonEntityData {
    labelSummaryVrfs.EntityData.YFilter = labelSummaryVrfs.YFilter
    labelSummaryVrfs.EntityData.YangName = "label-summary-vrfs"
    labelSummaryVrfs.EntityData.BundleName = "cisco_ios_xr"
    labelSummaryVrfs.EntityData.ParentYangName = "mpls-lsd"
    labelSummaryVrfs.EntityData.SegmentPath = "label-summary-vrfs"
    labelSummaryVrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummaryVrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummaryVrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummaryVrfs.EntityData.Children = types.NewOrderedMap()
    labelSummaryVrfs.EntityData.Children.Append("label-summary-vrf", types.YChild{"LabelSummaryVrf", nil})
    for i := range labelSummaryVrfs.LabelSummaryVrf {
        labelSummaryVrfs.EntityData.Children.Append(types.GetSegmentPath(labelSummaryVrfs.LabelSummaryVrf[i]), types.YChild{"LabelSummaryVrf", labelSummaryVrfs.LabelSummaryVrf[i]})
    }
    labelSummaryVrfs.EntityData.Leafs = types.NewOrderedMap()

    labelSummaryVrfs.EntityData.YListKeys = []string {}

    return &(labelSummaryVrfs.EntityData)
}

// MplsLsd_LabelSummaryVrfs_LabelSummaryVrf
// Dynamic label range summary by VRF
type MplsLsd_LabelSummaryVrfs_LabelSummaryVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount.
    OwnerCount []*MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetEntityData() *types.CommonEntityData {
    labelSummaryVrf.EntityData.YFilter = labelSummaryVrf.YFilter
    labelSummaryVrf.EntityData.YangName = "label-summary-vrf"
    labelSummaryVrf.EntityData.BundleName = "cisco_ios_xr"
    labelSummaryVrf.EntityData.ParentYangName = "label-summary-vrfs"
    labelSummaryVrf.EntityData.SegmentPath = "label-summary-vrf" + types.AddKeyToken(labelSummaryVrf.VrfName, "vrf-name")
    labelSummaryVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelSummaryVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelSummaryVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelSummaryVrf.EntityData.Children = types.NewOrderedMap()
    labelSummaryVrf.EntityData.Children.Append("owner-count", types.YChild{"OwnerCount", nil})
    for i := range labelSummaryVrf.OwnerCount {
        labelSummaryVrf.EntityData.Children.Append(types.GetSegmentPath(labelSummaryVrf.OwnerCount[i]), types.YChild{"OwnerCount", labelSummaryVrf.OwnerCount[i]})
    }
    labelSummaryVrf.EntityData.Leafs = types.NewOrderedMap()
    labelSummaryVrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", labelSummaryVrf.VrfName})
    labelSummaryVrf.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", labelSummaryVrf.VrfNameXr})
    labelSummaryVrf.EntityData.Leafs.Append("total-labels", types.YLeaf{"TotalLabels", labelSummaryVrf.TotalLabels})
    labelSummaryVrf.EntityData.Leafs.Append("rsi-connected", types.YLeaf{"RsiConnected", labelSummaryVrf.RsiConnected})

    labelSummaryVrf.EntityData.YListKeys = []string {"VrfName"}

    return &(labelSummaryVrf.EntityData)
}

// MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
// Owner counts
type MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetEntityData() *types.CommonEntityData {
    ownerCount.EntityData.YFilter = ownerCount.YFilter
    ownerCount.EntityData.YangName = "owner-count"
    ownerCount.EntityData.BundleName = "cisco_ios_xr"
    ownerCount.EntityData.ParentYangName = "label-summary-vrf"
    ownerCount.EntityData.SegmentPath = "owner-count"
    ownerCount.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ownerCount.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ownerCount.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ownerCount.EntityData.Children = types.NewOrderedMap()
    ownerCount.EntityData.Leafs = types.NewOrderedMap()
    ownerCount.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", ownerCount.ApplicationType})
    ownerCount.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", ownerCount.ApplicationName})
    ownerCount.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", ownerCount.ApplicationRolePrimary})
    ownerCount.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", ownerCount.ApplicationInstance})
    ownerCount.EntityData.Leafs.Append("number-of-labels", types.YLeaf{"NumberOfLabels", ownerCount.NumberOfLabels})

    ownerCount.EntityData.YListKeys = []string {}

    return &(ownerCount.EntityData)
}

// MplsLsd_LabelRange
// Label range
type MplsLsd_LabelRange struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Minimum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MinDynamicLabelValue interface{}

    // Maximum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MaxDynamicLabelValue interface{}

    // Minimum static label value. The type is interface{} with range:
    // 0..4294967295.
    MinStaticLabelValue interface{}

    // Maximum static label value. The type is interface{} with range:
    // 0..4294967295.
    MaxStaticLabelValue interface{}
}

func (labelRange *MplsLsd_LabelRange) GetEntityData() *types.CommonEntityData {
    labelRange.EntityData.YFilter = labelRange.YFilter
    labelRange.EntityData.YangName = "label-range"
    labelRange.EntityData.BundleName = "cisco_ios_xr"
    labelRange.EntityData.ParentYangName = "mpls-lsd"
    labelRange.EntityData.SegmentPath = "label-range"
    labelRange.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRange.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRange.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRange.EntityData.Children = types.NewOrderedMap()
    labelRange.EntityData.Leafs = types.NewOrderedMap()
    labelRange.EntityData.Leafs.Append("min-dynamic-label-value", types.YLeaf{"MinDynamicLabelValue", labelRange.MinDynamicLabelValue})
    labelRange.EntityData.Leafs.Append("max-dynamic-label-value", types.YLeaf{"MaxDynamicLabelValue", labelRange.MaxDynamicLabelValue})
    labelRange.EntityData.Leafs.Append("min-static-label-value", types.YLeaf{"MinStaticLabelValue", labelRange.MinStaticLabelValue})
    labelRange.EntityData.Leafs.Append("max-static-label-value", types.YLeaf{"MaxStaticLabelValue", labelRange.MaxStaticLabelValue})

    labelRange.EntityData.YListKeys = []string {}

    return &(labelRange.EntityData)
}

// MplsLsd_RewriteSummaryVrfs
// Rewrite Summary by VRF
type MplsLsd_RewriteSummaryVrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Rewrite summary by VRF VRF-name. The type is slice of
    // MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf.
    RewriteSummaryVrf []*MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetEntityData() *types.CommonEntityData {
    rewriteSummaryVrfs.EntityData.YFilter = rewriteSummaryVrfs.YFilter
    rewriteSummaryVrfs.EntityData.YangName = "rewrite-summary-vrfs"
    rewriteSummaryVrfs.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummaryVrfs.EntityData.ParentYangName = "mpls-lsd"
    rewriteSummaryVrfs.EntityData.SegmentPath = "rewrite-summary-vrfs"
    rewriteSummaryVrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummaryVrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummaryVrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummaryVrfs.EntityData.Children = types.NewOrderedMap()
    rewriteSummaryVrfs.EntityData.Children.Append("rewrite-summary-vrf", types.YChild{"RewriteSummaryVrf", nil})
    for i := range rewriteSummaryVrfs.RewriteSummaryVrf {
        rewriteSummaryVrfs.EntityData.Children.Append(types.GetSegmentPath(rewriteSummaryVrfs.RewriteSummaryVrf[i]), types.YChild{"RewriteSummaryVrf", rewriteSummaryVrfs.RewriteSummaryVrf[i]})
    }
    rewriteSummaryVrfs.EntityData.Leafs = types.NewOrderedMap()

    rewriteSummaryVrfs.EntityData.YListKeys = []string {}

    return &(rewriteSummaryVrfs.EntityData)
}

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf
// Rewrite summary by VRF VRF-name
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4rpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6rpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetEntityData() *types.CommonEntityData {
    rewriteSummaryVrf.EntityData.YFilter = rewriteSummaryVrf.YFilter
    rewriteSummaryVrf.EntityData.YangName = "rewrite-summary-vrf"
    rewriteSummaryVrf.EntityData.BundleName = "cisco_ios_xr"
    rewriteSummaryVrf.EntityData.ParentYangName = "rewrite-summary-vrfs"
    rewriteSummaryVrf.EntityData.SegmentPath = "rewrite-summary-vrf" + types.AddKeyToken(rewriteSummaryVrf.VrfName, "vrf-name")
    rewriteSummaryVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rewriteSummaryVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rewriteSummaryVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rewriteSummaryVrf.EntityData.Children = types.NewOrderedMap()
    rewriteSummaryVrf.EntityData.Children.Append("ipv4-paths", types.YChild{"Ipv4Paths", &rewriteSummaryVrf.Ipv4Paths})
    rewriteSummaryVrf.EntityData.Children.Append("ipv6-paths", types.YChild{"Ipv6Paths", &rewriteSummaryVrf.Ipv6Paths})
    rewriteSummaryVrf.EntityData.Leafs = types.NewOrderedMap()
    rewriteSummaryVrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rewriteSummaryVrf.VrfName})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-label-fpi", types.YLeaf{"NumLabelFpi", rewriteSummaryVrf.NumLabelFpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-tefpi", types.YLeaf{"NumTefpi", rewriteSummaryVrf.NumTefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-ipv4fpi", types.YLeaf{"NumIpv4fpi", rewriteSummaryVrf.NumIpv4fpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-ipv6fpi", types.YLeaf{"NumIpv6fpi", rewriteSummaryVrf.NumIpv6fpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-pw-list-tefpi", types.YLeaf{"NumPwListTefpi", rewriteSummaryVrf.NumPwListTefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-dmtctefpi", types.YLeaf{"NumDmtctefpi", rewriteSummaryVrf.NumDmtctefpi})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-rewrite", types.YLeaf{"NumRewrite", rewriteSummaryVrf.NumRewrite})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-forward-update", types.YLeaf{"TotalForwardUpdate", rewriteSummaryVrf.TotalForwardUpdate})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-forwad-update-message", types.YLeaf{"TotalForwadUpdateMessage", rewriteSummaryVrf.TotalForwadUpdateMessage})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", rewriteSummaryVrf.TotalPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-t-ev4-paths", types.YLeaf{"TotalTEv4Paths", rewriteSummaryVrf.TotalTEv4Paths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-te-head-paths", types.YLeaf{"TotalTeHeadPaths", rewriteSummaryVrf.TotalTeHeadPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-pw-paths", types.YLeaf{"TotalPwPaths", rewriteSummaryVrf.TotalPwPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ip-sub-paths", types.YLeaf{"TotalIpSubPaths", rewriteSummaryVrf.TotalIpSubPaths})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ipv4rpf-neighbors", types.YLeaf{"TotalIpv4rpfNeighbors", rewriteSummaryVrf.TotalIpv4rpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-ipv6rpf-neighbors", types.YLeaf{"TotalIpv6rpfNeighbors", rewriteSummaryVrf.TotalIpv6rpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("num-rewrite-rpf-neighbors", types.YLeaf{"NumRewriteRpfNeighbors", rewriteSummaryVrf.NumRewriteRpfNeighbors})
    rewriteSummaryVrf.EntityData.Leafs.Append("total-dmtc-intf", types.YLeaf{"TotalDmtcIntf", rewriteSummaryVrf.TotalDmtcIntf})
    rewriteSummaryVrf.EntityData.Leafs.Append("vrf-name-xr", types.YLeaf{"VrfNameXr", rewriteSummaryVrf.VrfNameXr})

    rewriteSummaryVrf.EntityData.YListKeys = []string {"VrfName"}

    return &(rewriteSummaryVrf.EntityData)
}

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths
// Count for IPv4 paths
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetEntityData() *types.CommonEntityData {
    ipv4Paths.EntityData.YFilter = ipv4Paths.YFilter
    ipv4Paths.EntityData.YangName = "ipv4-paths"
    ipv4Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv4Paths.EntityData.ParentYangName = "rewrite-summary-vrf"
    ipv4Paths.EntityData.SegmentPath = "ipv4-paths"
    ipv4Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Paths.EntityData.Children = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv4Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv4Paths.TotalPaths})
    ipv4Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv4Paths.TotalBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv4Paths.TotalRemoteBackupPaths})
    ipv4Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv4Paths.TotalProtectedPaths})
    ipv4Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv4Paths.TotalPopLkupPaths})

    ipv4Paths.EntityData.YListKeys = []string {}

    return &(ipv4Paths.EntityData)
}

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
// Count for IPv6 paths
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetEntityData() *types.CommonEntityData {
    ipv6Paths.EntityData.YFilter = ipv6Paths.YFilter
    ipv6Paths.EntityData.YangName = "ipv6-paths"
    ipv6Paths.EntityData.BundleName = "cisco_ios_xr"
    ipv6Paths.EntityData.ParentYangName = "rewrite-summary-vrf"
    ipv6Paths.EntityData.SegmentPath = "ipv6-paths"
    ipv6Paths.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6Paths.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6Paths.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6Paths.EntityData.Children = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs = types.NewOrderedMap()
    ipv6Paths.EntityData.Leafs.Append("total-paths", types.YLeaf{"TotalPaths", ipv6Paths.TotalPaths})
    ipv6Paths.EntityData.Leafs.Append("total-backup-paths", types.YLeaf{"TotalBackupPaths", ipv6Paths.TotalBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-remote-backup-paths", types.YLeaf{"TotalRemoteBackupPaths", ipv6Paths.TotalRemoteBackupPaths})
    ipv6Paths.EntityData.Leafs.Append("total-protected-paths", types.YLeaf{"TotalProtectedPaths", ipv6Paths.TotalProtectedPaths})
    ipv6Paths.EntityData.Leafs.Append("total-pop-lkup-paths", types.YLeaf{"TotalPopLkupPaths", ipv6Paths.TotalPopLkupPaths})

    ipv6Paths.EntityData.YListKeys = []string {}

    return &(ipv6Paths.EntityData)
}

// MplsLsd_Interfaces
// Table of MPLS interfaces
type MplsLsd_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of MplsLsd_Interfaces_Interface.
    Interface []*MplsLsd_Interfaces_Interface
}

func (interfaces *MplsLsd_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "mpls-lsd"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// MplsLsd_Interfaces_Interface
// Data for MPLS interface
type MplsLsd_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Interface interface{}

    // Interface state. The type is MgmtLsdIntfState.
    InterfaceState interface{}

    // Application Owner. The type is slice of
    // MplsLsd_Interfaces_Interface_ApplicationOwner.
    ApplicationOwner []*MplsLsd_Interfaces_Interface_ApplicationOwner
}

func (self *MplsLsd_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("application-owner", types.YChild{"ApplicationOwner", nil})
    for i := range self.ApplicationOwner {
        self.EntityData.Children.Append(types.GetSegmentPath(self.ApplicationOwner[i]), types.YChild{"ApplicationOwner", self.ApplicationOwner[i]})
    }
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("interface", types.YLeaf{"Interface", self.Interface})
    self.EntityData.Leafs.Append("interface-state", types.YLeaf{"InterfaceState", self.InterfaceState})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// MplsLsd_Interfaces_Interface_ApplicationOwner
// Application Owner
type MplsLsd_Interfaces_Interface_ApplicationOwner struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetEntityData() *types.CommonEntityData {
    applicationOwner.EntityData.YFilter = applicationOwner.YFilter
    applicationOwner.EntityData.YangName = "application-owner"
    applicationOwner.EntityData.BundleName = "cisco_ios_xr"
    applicationOwner.EntityData.ParentYangName = "interface"
    applicationOwner.EntityData.SegmentPath = "application-owner"
    applicationOwner.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationOwner.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationOwner.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationOwner.EntityData.Children = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs = types.NewOrderedMap()
    applicationOwner.EntityData.Leafs.Append("application-name", types.YLeaf{"ApplicationName", applicationOwner.ApplicationName})
    applicationOwner.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", applicationOwner.ApplicationType})
    applicationOwner.EntityData.Leafs.Append("application-role-primary", types.YLeaf{"ApplicationRolePrimary", applicationOwner.ApplicationRolePrimary})
    applicationOwner.EntityData.Leafs.Append("application-instance", types.YLeaf{"ApplicationInstance", applicationOwner.ApplicationInstance})
    applicationOwner.EntityData.Leafs.Append("resource-state", types.YLeaf{"ResourceState", applicationOwner.ResourceState})

    applicationOwner.EntityData.YListKeys = []string {}

    return &(applicationOwner.EntityData)
}

