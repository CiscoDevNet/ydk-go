// This module contains a collection of YANG definitions
// for Cisco IOS-XR mpls-lsd package operational data.
// 
// This module contains definitions
// for the following management objects:
//   mpls-lsd-nodes: Location MPLS LSD operational data
//   mpls-lsd: mpls lsd
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package mpls_lsd_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package mpls_lsd_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-oper mpls-lsd-nodes}", reflect.TypeOf(MplsLsdNodes{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes", reflect.TypeOf(MplsLsdNodes{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-oper mpls-lsd}", reflect.TypeOf(MplsLsd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd", reflect.TypeOf(MplsLsd{}))
}

// MgmtLsdClient represents Mgmt lsd client
type MgmtLsdClient string

const (
    // Application
    MgmtLsdClient_mgmt_lsd_client_type_app MgmtLsdClient = "mgmt-lsd-client-type-app"

    // BCDL Agent
    MgmtLsdClient_mgmt_lsd_client_type_ba MgmtLsdClient = "mgmt-lsd-client-type-ba"
)

// MgmtLsdFrrState represents Mgmt lsd frr state
type MgmtLsdFrrState string

const (
    // Partial
    MgmtLsdFrrState_mgmt_lsd_frr_state_partial MgmtLsdFrrState = "mgmt-lsd-frr-state-partial"

    // Active
    MgmtLsdFrrState_mgmt_lsd_frr_state_active MgmtLsdFrrState = "mgmt-lsd-frr-state-active"

    // Ready
    MgmtLsdFrrState_mgmt_lsd_frr_state_ready MgmtLsdFrrState = "mgmt-lsd-frr-state-ready"

    // Complete
    MgmtLsdFrrState_mgmt_lsd_frr_state_complete MgmtLsdFrrState = "mgmt-lsd-frr-state-complete"

    // Any
    MgmtLsdFrrState_mgmt_lsd_frr_state_any MgmtLsdFrrState = "mgmt-lsd-frr-state-any"

    // IGP
    MgmtLsdFrrState_mgmt_lsd_frr_state_igp MgmtLsdFrrState = "mgmt-lsd-frr-state-igp"
)

// MgmtLsdMoi represents Mgmt lsd moi
type MgmtLsdMoi string

const (
    // Pop-and-lookup IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_ipv4 MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-ipv4"

    // IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv4 MgmtLsdMoi = "mgmt-lsd-moi-type-ipv4"

    // IPv6
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv6 MgmtLsdMoi = "mgmt-lsd-moi-type-ipv6"

    // TE IPv4
    MgmtLsdMoi_mgmt_lsd_moi_type_tev4 MgmtLsdMoi = "mgmt-lsd-moi-type-tev4"

    // PW
    MgmtLsdMoi_mgmt_lsd_moi_type_pw MgmtLsdMoi = "mgmt-lsd-moi-type-pw"

    // Pop-and-lookup IPv6
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_ipv6 MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-ipv6"

    // IP Subscriber
    MgmtLsdMoi_mgmt_lsd_moi_type_ip_sub MgmtLsdMoi = "mgmt-lsd-moi-type-ip-sub"

    // PW HE
    MgmtLsdMoi_mgmt_lsd_moi_type_pwhe MgmtLsdMoi = "mgmt-lsd-moi-type-pwhe"

    // PW List
    MgmtLsdMoi_mgmt_lsd_moi_type_pw_list MgmtLsdMoi = "mgmt-lsd-moi-type-pw-list"

    // IPv4 Multi-Label
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv4_stack MgmtLsdMoi = "mgmt-lsd-moi-type-ipv4-stack"

    // Pop-and-lookup TP
    MgmtLsdMoi_mgmt_lsd_moi_type_pop_and_lkup_tp MgmtLsdMoi = "mgmt-lsd-moi-type-pop-and-lkup-tp"

    // IPv6 Multi-Label
    MgmtLsdMoi_mgmt_lsd_moi_type_ipv6_stack MgmtLsdMoi = "mgmt-lsd-moi-type-ipv6-stack"

    // TE Head
    MgmtLsdMoi_mgmt_lsd_moi_type_te_head MgmtLsdMoi = "mgmt-lsd-moi-type-te-head"

    // Demand Matrix Traffic-Collector
    MgmtLsdMoi_mgmt_lsd_moi_type_dmtc_ext_intf MgmtLsdMoi = "mgmt-lsd-moi-type-dmtc-ext-intf"
)

// MgmtLsdFpi represents Mgmt lsd fpi
type MgmtLsdFpi string

const (
    // Label
    MgmtLsdFpi_mgmt_lsd_fpi_type_label MgmtLsdFpi = "mgmt-lsd-fpi-type-label"

    // TE
    MgmtLsdFpi_mgmt_lsd_fpi_type_te MgmtLsdFpi = "mgmt-lsd-fpi-type-te"

    // IPv4
    MgmtLsdFpi_mgmt_lsd_fpi_type_ipv4 MgmtLsdFpi = "mgmt-lsd-fpi-type-ipv4"

    // IPv6
    MgmtLsdFpi_mgmt_lsd_fpi_type_ipv6 MgmtLsdFpi = "mgmt-lsd-fpi-type-ipv6"

    // PW List
    MgmtLsdFpi_mgmt_lsd_fpi_type_pw_list MgmtLsdFpi = "mgmt-lsd-fpi-type-pw-list"

    // TE v2
    MgmtLsdFpi_mgmt_lsd_fpi_type_te_v2 MgmtLsdFpi = "mgmt-lsd-fpi-type-te-v2"

    // DMTC External Interface
    MgmtLsdFpi_mgmt_lsd_fpi_type_dmtc_ext_intf MgmtLsdFpi = "mgmt-lsd-fpi-type-dmtc-ext-intf"
)

// MgmtLsdLblCtx represents Mgmt lsd lbl ctx
type MgmtLsdLblCtx string

const (
    // None
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_none MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-none"

    // IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ipv4"

    // IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ipv6"

    // TE IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tev4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tev4"

    // L3VPN IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-ipv4"

    // L3VPN IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-ipv6"

    // L3VPN Per-VRF
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_vrf MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-vrf"

    // L3VPN IPv4 Per-CE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_cev4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-cev4"

    // L3VPN IPv6 Per-CE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_cev6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-cev6"

    // PW
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pw MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pw"

    // LBL BLK
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk"

    // IP SUB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_ip_sub MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-ip-sub"

    // TE IPv4 P2MP
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tev4_p2mp MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tev4-p2mp"

    // MLDP IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_mldpv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-mldpv4"

    // PW HE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pwhe MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pwhe"

    // MPLS TP
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_tp MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-tp"

    // GRE
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_gre MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-gre"

    // EVPN
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_evpn MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-evpn"

    // BLB IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_blb_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-blb-ipv4"

    // BLB IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_blb_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-blb-ipv6"

    // PIM I-PMSI
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pim_i_pmsi MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pim-i-pmsi"

    // PIM S-PMSI
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_pim_s_pmsi MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-pim-s-pmsi"

    // L3VPN NH SET
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_l3vpn_nh_set MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-l3vpn-nh-set"

    // SR Prefix Segment
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_pfx_seg MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-pfx-seg"

    // SR Adj Segment IPv4
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv4 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv4"

    // SR Adj Segment IPv6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_sr_adj_seg_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-sr-adj-seg-ipv6"

    // LBL BLK SRGB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk_srgb MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk-srgb"

    // TE Binding
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_te_binding MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-te-binding"

    // GRE IPV6
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_gre_ipv6 MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-gre-ipv6"

    // Any
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_any MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-any"

    // LBL BLK SRLB
    MgmtLsdLblCtx_mgmt_lsd_lbl_ctx_type_lbl_blk_srlb MgmtLsdLblCtx = "mgmt-lsd-lbl-ctx-type-lbl-blk-srlb"
)

// MgmtLsdLspRole represents Mgmt lsd lsp role
type MgmtLsdLspRole string

const (
    // Head
    MgmtLsdLspRole_mgmt_lsd_lsp_role_head MgmtLsdLspRole = "mgmt-lsd-lsp-role-head"

    // Midpoint
    MgmtLsdLspRole_mgmt_lsd_lsp_role_mid MgmtLsdLspRole = "mgmt-lsd-lsp-role-mid"
)

// MgmtLsdAppRsrcState represents Mgmt lsd app rsrc state
type MgmtLsdAppRsrcState string

const (
    // Active
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_active MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-active"

    // Pending
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_pnd MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-pnd"

    // Pending Server
    MgmtLsdAppRsrcState_mgmt_lsd_app_rsrc_state_pnd_svr MgmtLsdAppRsrcState = "mgmt-lsd-app-rsrc-state-pnd-svr"
)

// MgmtLsdRwId represents Mgmt lsd rw id
type MgmtLsdRwId string

const (
    // None
    MgmtLsdRwId_mgmt_lsd_rw_id_type_none MgmtLsdRwId = "mgmt-lsd-rw-id-type-none"

    // Label Context
    MgmtLsdRwId_mgmt_lsd_rw_id_type_lbl_ctx MgmtLsdRwId = "mgmt-lsd-rw-id-type-lbl-ctx"

    // Local Label
    MgmtLsdRwId_mgmt_lsd_rw_id_type_loc_lbl MgmtLsdRwId = "mgmt-lsd-rw-id-type-loc-lbl"
)

// MgmtLsdApp represents Mgmt lsd app
type MgmtLsdApp string

const (
    // None
    MgmtLsdApp_mgmt_lsd_app_type_none MgmtLsdApp = "mgmt-lsd-app-type-none"

    // LSD
    MgmtLsdApp_mgmt_lsd_app_type_int MgmtLsdApp = "mgmt-lsd-app-type-int"

    // Test
    MgmtLsdApp_mgmt_lsd_app_type_test MgmtLsdApp = "mgmt-lsd-app-type-test"

    // Static
    MgmtLsdApp_mgmt_lsd_app_type_static MgmtLsdApp = "mgmt-lsd-app-type-static"

    // LDP
    MgmtLsdApp_mgmt_lsd_app_type_ldp MgmtLsdApp = "mgmt-lsd-app-type-ldp"

    // TE Control
    MgmtLsdApp_mgmt_lsd_app_type_te MgmtLsdApp = "mgmt-lsd-app-type-te"

    // App Controller
    MgmtLsdApp_mgmt_lsd_app_type_app_controller MgmtLsdApp = "mgmt-lsd-app-type-app-controller"

    // BGP v4
    MgmtLsdApp_mgmt_lsd_app_type_bgp_ipv4 MgmtLsdApp = "mgmt-lsd-app-type-bgp-ipv4"

    // BGP VPNv4
    MgmtLsdApp_mgmt_lsd_app_type_bgp_vpn_ipv4 MgmtLsdApp = "mgmt-lsd-app-type-bgp-vpn-ipv4"

    // L2VPN
    MgmtLsdApp_mgmt_lsd_app_type_l2vpn MgmtLsdApp = "mgmt-lsd-app-type-l2vpn"

    // BGP Spkr
    MgmtLsdApp_mgmt_lsd_app_type_bgp_spkr MgmtLsdApp = "mgmt-lsd-app-type-bgp-spkr"

    // BFD
    MgmtLsdApp_mgmt_lsd_app_type_bfd MgmtLsdApp = "mgmt-lsd-app-type-bfd"

    // PIM
    MgmtLsdApp_mgmt_lsd_app_type_pim MgmtLsdApp = "mgmt-lsd-app-type-pim"

    // V2 LSD
    MgmtLsdApp_mgmt_lsd_app_type_v2_lsd MgmtLsdApp = "mgmt-lsd-app-type-v2-lsd"

    // PIM6
    MgmtLsdApp_mgmt_lsd_app_type_pim6 MgmtLsdApp = "mgmt-lsd-app-type-pim6"

    // ISIS
    MgmtLsdApp_mgmt_lsd_app_type_isis MgmtLsdApp = "mgmt-lsd-app-type-isis"

    // OSPF
    MgmtLsdApp_mgmt_lsd_app_type_ospf MgmtLsdApp = "mgmt-lsd-app-type-ospf"

    // CGN
    MgmtLsdApp_mgmt_lsd_app_type_cgn MgmtLsdApp = "mgmt-lsd-app-type-cgn"

    // Traffic Collector
    MgmtLsdApp_mgmt_lsd_app_type_dmtc MgmtLsdApp = "mgmt-lsd-app-type-dmtc"

    // Any
    MgmtLsdApp_mgmt_lsd_app_type_any MgmtLsdApp = "mgmt-lsd-app-type-any"
)

// MgmtLsdTeBinding represents Mgmt lsd te binding
type MgmtLsdTeBinding string

const (
    // mgmt lsd ident p2p tun id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2p_tun_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2p-tun-id"

    // mgmt lsd ident p2p grp id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2p_grp_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2p-grp-id"

    // mgmt lsd ident p2mp tun id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2mp_tun_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2mp-tun-id"

    // mgmt lsd ident p2mp grp id
    MgmtLsdTeBinding_mgmt_lsd_ident_p2mp_grp_id MgmtLsdTeBinding = "mgmt-lsd-ident-p2mp-grp-id"
)

// MgmtLsdAppState represents Mgmt lsd app state
type MgmtLsdAppState string

const (
    // Active
    MgmtLsdAppState_mgmt_lsd_app_state_active MgmtLsdAppState = "mgmt-lsd-app-state-active"

    // Zombie
    MgmtLsdAppState_mgmt_lsd_app_state_zombie MgmtLsdAppState = "mgmt-lsd-app-state-zombie"

    // Recover
    MgmtLsdAppState_mgmt_lsd_app_state_recover MgmtLsdAppState = "mgmt-lsd-app-state-recover"
)

// MgmtLsdIntfState represents Mgmt lsd intf state
type MgmtLsdIntfState string

const (
    // unknown
    MgmtLsdIntfState_mgmt_lsd_intf_state_unknown MgmtLsdIntfState = "mgmt-lsd-intf-state-unknown"

    // up
    MgmtLsdIntfState_mgmt_lsd_intf_state_up MgmtLsdIntfState = "mgmt-lsd-intf-state-up"

    // down
    MgmtLsdIntfState_mgmt_lsd_intf_state_down MgmtLsdIntfState = "mgmt-lsd-intf-state-down"
)

// MplsLsdNodes
// Location MPLS LSD operational data
type MplsLsdNodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The MPLS LSD operational data for a particular node. The type is slice of
    // MplsLsdNodes_MplsLsdNode.
    MplsLsdNode []MplsLsdNodes_MplsLsdNode
}

func (mplsLsdNodes *MplsLsdNodes) GetFilter() yfilter.YFilter { return mplsLsdNodes.YFilter }

func (mplsLsdNodes *MplsLsdNodes) SetFilter(yf yfilter.YFilter) { mplsLsdNodes.YFilter = yf }

func (mplsLsdNodes *MplsLsdNodes) GetGoName(yname string) string {
    if yname == "mpls-lsd-node" { return "MplsLsdNode" }
    return ""
}

func (mplsLsdNodes *MplsLsdNodes) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd-nodes"
}

func (mplsLsdNodes *MplsLsdNodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-lsd-node" {
        for _, c := range mplsLsdNodes.MplsLsdNode {
            if mplsLsdNodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode{}
        mplsLsdNodes.MplsLsdNode = append(mplsLsdNodes.MplsLsdNode, child)
        return &mplsLsdNodes.MplsLsdNode[len(mplsLsdNodes.MplsLsdNode)-1]
    }
    return nil
}

func (mplsLsdNodes *MplsLsdNodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsLsdNodes.MplsLsdNode {
        children[mplsLsdNodes.MplsLsdNode[i].GetSegmentPath()] = &mplsLsdNodes.MplsLsdNode[i]
    }
    return children
}

func (mplsLsdNodes *MplsLsdNodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mplsLsdNodes *MplsLsdNodes) GetBundleName() string { return "cisco_ios_xr" }

func (mplsLsdNodes *MplsLsdNodes) GetYangName() string { return "mpls-lsd-nodes" }

func (mplsLsdNodes *MplsLsdNodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsLsdNodes *MplsLsdNodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsLsdNodes *MplsLsdNodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsLsdNodes *MplsLsdNodes) SetParent(parent types.Entity) { mplsLsdNodes.parent = parent }

func (mplsLsdNodes *MplsLsdNodes) GetParent() types.Entity { return mplsLsdNodes.parent }

func (mplsLsdNodes *MplsLsdNodes) GetParentYangName() string { return "Cisco-IOS-XR-mpls-lsd-oper" }

// MplsLsdNodes_MplsLsdNode
// The MPLS LSD operational data for a particular
// node
type MplsLsdNodes_MplsLsdNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The identifier for the node. The type is string
    // with pattern: ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Table of MPLS clients using LSD.
    Clients MplsLsdNodes_MplsLsdNode_Clients

    // Dynamic label range.
    LabelSummary MplsLsdNodes_MplsLsdNode_LabelSummary

    // Table of labels.
    Labels MplsLsdNodes_MplsLsdNode_Labels

    // FRR database.
    FrrDatabase MplsLsdNodes_MplsLsdNode_FrrDatabase

    // Table of rewrites.
    Rewrite MplsLsdNodes_MplsLsdNode_Rewrite

    // Rewrite Summary .
    RewriteSummary MplsLsdNodes_MplsLsdNode_RewriteSummary

    // Table of MPLS applications using LSD.
    Applications MplsLsdNodes_MplsLsdNode_Applications

    // SRLB Inconsistencies.
    SrlbInconsistency MplsLsdNodes_MplsLsdNode_SrlbInconsistency

    // Dynamic label range summary by VRF.
    LabelSummaryVrfs MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs

    // Label range.
    LabelRange MplsLsdNodes_MplsLsdNode_LabelRange

    // Rewrite Summary by VRF.
    RewriteSummaryVrfs MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs

    // Table of MPLS interfaces.
    Interfaces MplsLsdNodes_MplsLsdNode_Interfaces
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetFilter() yfilter.YFilter { return mplsLsdNode.YFilter }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) SetFilter(yf yfilter.YFilter) { mplsLsdNode.YFilter = yf }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "clients" { return "Clients" }
    if yname == "label-summary" { return "LabelSummary" }
    if yname == "labels" { return "Labels" }
    if yname == "frr-database" { return "FrrDatabase" }
    if yname == "rewrite" { return "Rewrite" }
    if yname == "rewrite-summary" { return "RewriteSummary" }
    if yname == "applications" { return "Applications" }
    if yname == "srlb-inconsistency" { return "SrlbInconsistency" }
    if yname == "label-summary-vrfs" { return "LabelSummaryVrfs" }
    if yname == "label-range" { return "LabelRange" }
    if yname == "rewrite-summary-vrfs" { return "RewriteSummaryVrfs" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetSegmentPath() string {
    return "mpls-lsd-node" + "[node-name='" + fmt.Sprintf("%v", mplsLsdNode.NodeName) + "']"
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clients" {
        return &mplsLsdNode.Clients
    }
    if childYangName == "label-summary" {
        return &mplsLsdNode.LabelSummary
    }
    if childYangName == "labels" {
        return &mplsLsdNode.Labels
    }
    if childYangName == "frr-database" {
        return &mplsLsdNode.FrrDatabase
    }
    if childYangName == "rewrite" {
        return &mplsLsdNode.Rewrite
    }
    if childYangName == "rewrite-summary" {
        return &mplsLsdNode.RewriteSummary
    }
    if childYangName == "applications" {
        return &mplsLsdNode.Applications
    }
    if childYangName == "srlb-inconsistency" {
        return &mplsLsdNode.SrlbInconsistency
    }
    if childYangName == "label-summary-vrfs" {
        return &mplsLsdNode.LabelSummaryVrfs
    }
    if childYangName == "label-range" {
        return &mplsLsdNode.LabelRange
    }
    if childYangName == "rewrite-summary-vrfs" {
        return &mplsLsdNode.RewriteSummaryVrfs
    }
    if childYangName == "interfaces" {
        return &mplsLsdNode.Interfaces
    }
    return nil
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clients"] = &mplsLsdNode.Clients
    children["label-summary"] = &mplsLsdNode.LabelSummary
    children["labels"] = &mplsLsdNode.Labels
    children["frr-database"] = &mplsLsdNode.FrrDatabase
    children["rewrite"] = &mplsLsdNode.Rewrite
    children["rewrite-summary"] = &mplsLsdNode.RewriteSummary
    children["applications"] = &mplsLsdNode.Applications
    children["srlb-inconsistency"] = &mplsLsdNode.SrlbInconsistency
    children["label-summary-vrfs"] = &mplsLsdNode.LabelSummaryVrfs
    children["label-range"] = &mplsLsdNode.LabelRange
    children["rewrite-summary-vrfs"] = &mplsLsdNode.RewriteSummaryVrfs
    children["interfaces"] = &mplsLsdNode.Interfaces
    return children
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = mplsLsdNode.NodeName
    return leafs
}

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetBundleName() string { return "cisco_ios_xr" }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetYangName() string { return "mpls-lsd-node" }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) SetParent(parent types.Entity) { mplsLsdNode.parent = parent }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetParent() types.Entity { return mplsLsdNode.parent }

func (mplsLsdNode *MplsLsdNodes_MplsLsdNode) GetParentYangName() string { return "mpls-lsd-nodes" }

// MplsLsdNodes_MplsLsdNode_Clients
// Table of MPLS clients using LSD
type MplsLsdNodes_MplsLsdNode_Clients struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS client using LSD. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Clients_Client.
    Client []MplsLsdNodes_MplsLsdNode_Clients_Client
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetFilter() yfilter.YFilter { return clients.YFilter }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) SetFilter(yf yfilter.YFilter) { clients.YFilter = yf }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetGoName(yname string) string {
    if yname == "client" { return "Client" }
    return ""
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetSegmentPath() string {
    return "clients"
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client" {
        for _, c := range clients.Client {
            if clients.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Clients_Client{}
        clients.Client = append(clients.Client, child)
        return &clients.Client[len(clients.Client)-1]
    }
    return nil
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clients.Client {
        children[clients.Client[i].GetSegmentPath()] = &clients.Client[i]
    }
    return children
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetBundleName() string { return "cisco_ios_xr" }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetYangName() string { return "clients" }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) SetParent(parent types.Entity) { clients.parent = parent }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetParent() types.Entity { return clients.parent }

func (clients *MplsLsdNodes_MplsLsdNode_Clients) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_Clients_Client
// Data for MPLS client using LSD
type MplsLsdNodes_MplsLsdNode_Clients_Client struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Client Instance name in the form of    
    // 'Application-<client_name>' or      'BCDL_Agent-<index:parent_index>'. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ClientName interface{}

    // Client Index Value. The type is interface{} with range: 0..4294967295.
    ClientIndex interface{}

    // Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Client union.
    ClientUnion MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetFilter() yfilter.YFilter { return client.YFilter }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) SetFilter(yf yfilter.YFilter) { client.YFilter = yf }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetGoName(yname string) string {
    if yname == "client-name" { return "ClientName" }
    if yname == "client-index" { return "ClientIndex" }
    if yname == "node-id" { return "NodeId" }
    if yname == "client-union" { return "ClientUnion" }
    return ""
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetSegmentPath() string {
    return "client" + "[client-name='" + fmt.Sprintf("%v", client.ClientName) + "']"
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client-union" {
        return &client.ClientUnion
    }
    return nil
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["client-union"] = &client.ClientUnion
    return children
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["client-name"] = client.ClientName
    leafs["client-index"] = client.ClientIndex
    leafs["node-id"] = client.NodeId
    return leafs
}

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetBundleName() string { return "cisco_ios_xr" }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetYangName() string { return "client" }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) SetParent(parent types.Entity) { client.parent = parent }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetParent() types.Entity { return client.parent }

func (client *MplsLsdNodes_MplsLsdNode_Clients_Client) GetParentYangName() string { return "clients" }

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion
// Client union
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSDClientType. The type is MgmtLsdClient.
    LsdClientType interface{}

    // Application client.
    Application MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application

    // BCDL agent client.
    BcdlAgent MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetFilter() yfilter.YFilter { return clientUnion.YFilter }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) SetFilter(yf yfilter.YFilter) { clientUnion.YFilter = yf }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetGoName(yname string) string {
    if yname == "lsd-client-type" { return "LsdClientType" }
    if yname == "application" { return "Application" }
    if yname == "bcdl-agent" { return "BcdlAgent" }
    return ""
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetSegmentPath() string {
    return "client-union"
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application" {
        return &clientUnion.Application
    }
    if childYangName == "bcdl-agent" {
        return &clientUnion.BcdlAgent
    }
    return nil
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application"] = &clientUnion.Application
    children["bcdl-agent"] = &clientUnion.BcdlAgent
    return children
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsd-client-type"] = clientUnion.LsdClientType
    return leafs
}

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetBundleName() string { return "cisco_ios_xr" }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetYangName() string { return "client-union" }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) SetParent(parent types.Entity) { clientUnion.parent = parent }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetParent() types.Entity { return clientUnion.parent }

func (clientUnion *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion) GetParentYangName() string { return "client" }

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application
// Application client
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    return ""
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetSegmentPath() string {
    return "application"
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = application.ApplicationName
    leafs["application-type"] = application.ApplicationType
    leafs["application-instance"] = application.ApplicationInstance
    leafs["application-role-primary"] = application.ApplicationRolePrimary
    return leafs
}

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetYangName() string { return "application" }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetParent() types.Entity { return application.parent }

func (application *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_Application) GetParentYangName() string { return "client-union" }

// MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent
// BCDL agent client
type MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BCDL Agent client connection index. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientConnIndex interface{}

    // BCDL Agent parent client connection index. The type is interface{} with
    // range: -2147483648..2147483647.
    ParentClientConnIndex interface{}
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetFilter() yfilter.YFilter { return bcdlAgent.YFilter }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) SetFilter(yf yfilter.YFilter) { bcdlAgent.YFilter = yf }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetGoName(yname string) string {
    if yname == "client-conn-index" { return "ClientConnIndex" }
    if yname == "parent-client-conn-index" { return "ParentClientConnIndex" }
    return ""
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetSegmentPath() string {
    return "bcdl-agent"
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["client-conn-index"] = bcdlAgent.ClientConnIndex
    leafs["parent-client-conn-index"] = bcdlAgent.ParentClientConnIndex
    return leafs
}

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetBundleName() string { return "cisco_ios_xr" }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetYangName() string { return "bcdl-agent" }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) SetParent(parent types.Entity) { bcdlAgent.parent = parent }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetParent() types.Entity { return bcdlAgent.parent }

func (bcdlAgent *MplsLsdNodes_MplsLsdNode_Clients_Client_ClientUnion_BcdlAgent) GetParentYangName() string { return "client-union" }

// MplsLsdNodes_MplsLsdNode_LabelSummary
// Dynamic label range
type MplsLsdNodes_MplsLsdNode_LabelSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount.
    OwnerCount []MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetFilter() yfilter.YFilter { return labelSummary.YFilter }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) SetFilter(yf yfilter.YFilter) { labelSummary.YFilter = yf }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetGoName(yname string) string {
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "total-labels" { return "TotalLabels" }
    if yname == "rsi-connected" { return "RsiConnected" }
    if yname == "owner-count" { return "OwnerCount" }
    return ""
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetSegmentPath() string {
    return "label-summary"
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner-count" {
        for _, c := range labelSummary.OwnerCount {
            if labelSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount{}
        labelSummary.OwnerCount = append(labelSummary.OwnerCount, child)
        return &labelSummary.OwnerCount[len(labelSummary.OwnerCount)-1]
    }
    return nil
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummary.OwnerCount {
        children[labelSummary.OwnerCount[i].GetSegmentPath()] = &labelSummary.OwnerCount[i]
    }
    return children
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name-xr"] = labelSummary.VrfNameXr
    leafs["total-labels"] = labelSummary.TotalLabels
    leafs["rsi-connected"] = labelSummary.RsiConnected
    return leafs
}

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetYangName() string { return "label-summary" }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) SetParent(parent types.Entity) { labelSummary.parent = parent }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetParent() types.Entity { return labelSummary.parent }

func (labelSummary *MplsLsdNodes_MplsLsdNode_LabelSummary) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount
// Owner counts
type MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetFilter() yfilter.YFilter { return ownerCount.YFilter }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) SetFilter(yf yfilter.YFilter) { ownerCount.YFilter = yf }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetGoName(yname string) string {
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "number-of-labels" { return "NumberOfLabels" }
    return ""
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetSegmentPath() string {
    return "owner-count"
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-type"] = ownerCount.ApplicationType
    leafs["application-name"] = ownerCount.ApplicationName
    leafs["application-role-primary"] = ownerCount.ApplicationRolePrimary
    leafs["application-instance"] = ownerCount.ApplicationInstance
    leafs["number-of-labels"] = ownerCount.NumberOfLabels
    return leafs
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetBundleName() string { return "cisco_ios_xr" }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetYangName() string { return "owner-count" }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) SetParent(parent types.Entity) { ownerCount.parent = parent }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetParent() types.Entity { return ownerCount.parent }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummary_OwnerCount) GetParentYangName() string { return "label-summary" }

// MplsLsdNodes_MplsLsdNode_Labels
// Table of labels
type MplsLsdNodes_MplsLsdNode_Labels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for label. The type is slice of MplsLsdNodes_MplsLsdNode_Labels_Label.
    Label []MplsLsdNodes_MplsLsdNode_Labels_Label
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetFilter() yfilter.YFilter { return labels.YFilter }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) SetFilter(yf yfilter.YFilter) { labels.YFilter = yf }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    return ""
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetSegmentPath() string {
    return "labels"
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range labels.Label {
            if labels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Labels_Label{}
        labels.Label = append(labels.Label, child)
        return &labels.Label[len(labels.Label)-1]
    }
    return nil
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labels.Label {
        children[labels.Label[i].GetSegmentPath()] = &labels.Label[i]
    }
    return children
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetBundleName() string { return "cisco_ios_xr" }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetYangName() string { return "labels" }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) SetParent(parent types.Entity) { labels.parent = parent }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetParent() types.Entity { return labels.parent }

func (labels *MplsLsdNodes_MplsLsdNode_Labels) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_Labels_Label
// Data for label
type MplsLsdNodes_MplsLsdNode_Labels_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    LabelId interface{}

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Rewrite bound to label. The type is interface{} with range:
    // -2147483648..2147483647.
    RewriteIsBound interface{}

    // Rewrite owner. The type is interface{} with range: 0..4294967295.
    RewriteOwners interface{}

    // RSI connected. The type is interface{} with range: -2147483648..2147483647.
    RsIconnected interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext

    // Application owner. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetGoName(yname string) string {
    if yname == "label-id" { return "LabelId" }
    if yname == "label" { return "Label" }
    if yname == "rewrite-is-bound" { return "RewriteIsBound" }
    if yname == "rewrite-owners" { return "RewriteOwners" }
    if yname == "rs-iconnected" { return "RsIconnected" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetSegmentPath() string {
    return "label" + "[label-id='" + fmt.Sprintf("%v", label.LabelId) + "']"
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &label.LabelContext
    }
    if childYangName == "application-owner" {
        for _, c := range label.ApplicationOwner {
            if label.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner{}
        label.ApplicationOwner = append(label.ApplicationOwner, child)
        return &label.ApplicationOwner[len(label.ApplicationOwner)-1]
    }
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &label.LabelContext
    for i := range label.ApplicationOwner {
        children[label.ApplicationOwner[i].GetSegmentPath()] = &label.ApplicationOwner[i]
    }
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-id"] = label.LabelId
    leafs["label"] = label.Label
    leafs["rewrite-is-bound"] = label.RewriteIsBound
    leafs["rewrite-owners"] = label.RewriteOwners
    leafs["rs-iconnected"] = label.RsIconnected
    leafs["vrf-name"] = label.VrfName
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Labels_Label) GetParentYangName() string { return "labels" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application opaque data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ApplicationData interface{}

    // Label Key.
    Key MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetGoName(yname string) string {
    if yname == "application-data" { return "ApplicationData" }
    if yname == "key" { return "Key" }
    return ""
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "key" {
        return &labelContext.Key
    }
    return nil
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["key"] = &labelContext.Key
    return children
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-data"] = labelContext.ApplicationData
    return leafs
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext) GetParentYangName() string { return "label" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key
// Label Key
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetFilter() yfilter.YFilter { return key.YFilter }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) SetFilter(yf yfilter.YFilter) { key.YFilter = yf }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetSegmentPath() string {
    return "key"
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &key.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &key.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &key.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &key.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &key.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &key.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &key.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &key.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &key.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &key.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &key.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &key.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &key.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &key.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &key.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &key.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &key.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &key.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &key.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &key.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &key.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &key.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &key.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &key.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &key.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &key.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &key.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &key.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &key.LabelBlockSrlbData
    }
    return nil
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &key.Ipv4Data
    children["ipv6-data"] = &key.Ipv6Data
    children["tev4-data"] = &key.Tev4Data
    children["ipv4l3vpn-data"] = &key.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &key.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &key.VrfL3VpnData
    children["cev4l3vpn-data"] = &key.Cev4L3VpnData
    children["cev6l3vpn-data"] = &key.Cev6L3VpnData
    children["pseudowire-data"] = &key.PseudowireData
    children["label-block-data"] = &key.LabelBlockData
    children["ip-sub-data"] = &key.IpSubData
    children["tev4p2mp-data"] = &key.Tev4P2MpData
    children["mld-pv4-data"] = &key.MldPv4Data
    children["pseudowire-head-end-data"] = &key.PseudowireHeadEndData
    children["tp-data"] = &key.TpData
    children["generic-routing-encapsulation"] = &key.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &key.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &key.EvpnData
    children["ipv4blb-data"] = &key.Ipv4BlbData
    children["ipv6blb-data"] = &key.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &key.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &key.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &key.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &key.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &key.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &key.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &key.LabelBlockSrgbData
    children["te-binding"] = &key.TeBinding
    children["label-block-srlb-data"] = &key.LabelBlockSrlbData
    return children
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = key.LabelContextType
    return leafs
}

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetBundleName() string { return "cisco_ios_xr" }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetYangName() string { return "key" }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) SetParent(parent types.Entity) { key.parent = parent }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetParent() types.Entity { return key.parent }

func (key *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4Data) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6Data) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4Data) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_VrfL3VpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_IpSubData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Tev4P2MpData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_MldPv4Data) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TpData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_EvpnData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv4BlbData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_Ipv6BlbData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMiPmsiData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_PiMsPmsiData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrPrefixSegment) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_TeBinding) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetParentYangName() string { return "key" }

// MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner
// Application owner
type MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Labels_Label_ApplicationOwner) GetParentYangName() string { return "label" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase
// FRR database
type MplsLsdNodes_MplsLsdNode_FrrDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of FRR database entries - Tunnel midpoints.
    TunnelMidpoints MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints

    // Table of FRR database entries - Tunnel heads.
    TunnelHeads MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads

    // Summary data for FRR database entry - Tunnel head.
    TunnelHeadSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary

    // Sumary table of Protected Interfaces.
    SummaryProtectedInterfaces MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces

    // Summary data for FRR database entry.
    TunnelSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary

    // Summary data for FRR database entry - Tunnel midpoint.
    TunnelMidpointSummary MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetFilter() yfilter.YFilter { return frrDatabase.YFilter }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) SetFilter(yf yfilter.YFilter) { frrDatabase.YFilter = yf }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetGoName(yname string) string {
    if yname == "tunnel-midpoints" { return "TunnelMidpoints" }
    if yname == "tunnel-heads" { return "TunnelHeads" }
    if yname == "tunnel-head-summary" { return "TunnelHeadSummary" }
    if yname == "summary-protected-interfaces" { return "SummaryProtectedInterfaces" }
    if yname == "tunnel-summary" { return "TunnelSummary" }
    if yname == "tunnel-midpoint-summary" { return "TunnelMidpointSummary" }
    return ""
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetSegmentPath() string {
    return "frr-database"
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-midpoints" {
        return &frrDatabase.TunnelMidpoints
    }
    if childYangName == "tunnel-heads" {
        return &frrDatabase.TunnelHeads
    }
    if childYangName == "tunnel-head-summary" {
        return &frrDatabase.TunnelHeadSummary
    }
    if childYangName == "summary-protected-interfaces" {
        return &frrDatabase.SummaryProtectedInterfaces
    }
    if childYangName == "tunnel-summary" {
        return &frrDatabase.TunnelSummary
    }
    if childYangName == "tunnel-midpoint-summary" {
        return &frrDatabase.TunnelMidpointSummary
    }
    return nil
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-midpoints"] = &frrDatabase.TunnelMidpoints
    children["tunnel-heads"] = &frrDatabase.TunnelHeads
    children["tunnel-head-summary"] = &frrDatabase.TunnelHeadSummary
    children["summary-protected-interfaces"] = &frrDatabase.SummaryProtectedInterfaces
    children["tunnel-summary"] = &frrDatabase.TunnelSummary
    children["tunnel-midpoint-summary"] = &frrDatabase.TunnelMidpointSummary
    return children
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetYangName() string { return "frr-database" }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) SetParent(parent types.Entity) { frrDatabase.parent = parent }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetParent() types.Entity { return frrDatabase.parent }

func (frrDatabase *MplsLsdNodes_MplsLsdNode_FrrDatabase) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints
// Table of FRR database entries - Tunnel
// midpoints
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel midpoint. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint.
    TunnelMidpoint []MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetFilter() yfilter.YFilter { return tunnelMidpoints.YFilter }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) SetFilter(yf yfilter.YFilter) { tunnelMidpoints.YFilter = yf }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetGoName(yname string) string {
    if yname == "tunnel-midpoint" { return "TunnelMidpoint" }
    return ""
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetSegmentPath() string {
    return "tunnel-midpoints"
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-midpoint" {
        for _, c := range tunnelMidpoints.TunnelMidpoint {
            if tunnelMidpoints.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint{}
        tunnelMidpoints.TunnelMidpoint = append(tunnelMidpoints.TunnelMidpoint, child)
        return &tunnelMidpoints.TunnelMidpoint[len(tunnelMidpoints.TunnelMidpoint)-1]
    }
    return nil
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnelMidpoints.TunnelMidpoint {
        children[tunnelMidpoints.TunnelMidpoint[i].GetSegmentPath()] = &tunnelMidpoints.TunnelMidpoint[i]
    }
    return children
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetYangName() string { return "tunnel-midpoints" }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) SetParent(parent types.Entity) { tunnelMidpoints.parent = parent }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetParent() types.Entity { return tunnelMidpoints.parent }

func (tunnelMidpoints *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint
// Data for FRR database entry - Tunnel midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    Label interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath.
    OutPath []MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetFilter() yfilter.YFilter { return tunnelMidpoint.YFilter }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) SetFilter(yf yfilter.YFilter) { tunnelMidpoint.YFilter = yf }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "out-path" { return "OutPath" }
    return ""
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetSegmentPath() string {
    return "tunnel-midpoint" + "[label='" + fmt.Sprintf("%v", tunnelMidpoint.Label) + "']"
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &tunnelMidpoint.FrrEntryId
    }
    if childYangName == "out-path" {
        for _, c := range tunnelMidpoint.OutPath {
            if tunnelMidpoint.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath{}
        tunnelMidpoint.OutPath = append(tunnelMidpoint.OutPath, child)
        return &tunnelMidpoint.OutPath[len(tunnelMidpoint.OutPath)-1]
    }
    return nil
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &tunnelMidpoint.FrrEntryId
    for i := range tunnelMidpoint.OutPath {
        children[tunnelMidpoint.OutPath[i].GetSegmentPath()] = &tunnelMidpoint.OutPath[i]
    }
    return children
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = tunnelMidpoint.Label
    leafs["tunnel-interface"] = tunnelMidpoint.TunnelInterface
    leafs["input-label"] = tunnelMidpoint.InputLabel
    leafs["entry-frr-state"] = tunnelMidpoint.EntryFrrState
    return leafs
}

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetYangName() string { return "tunnel-midpoint" }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) SetParent(parent types.Entity) { tunnelMidpoint.parent = parent }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetParent() types.Entity { return tunnelMidpoint.parent }

func (tunnelMidpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetParentYangName() string { return "tunnel-midpoints" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId
// FRR entry ID
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetParentYangName() string { return "tunnel-midpoint" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
// Out Path List
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetFilter() yfilter.YFilter { return outPath.YFilter }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) SetFilter(yf yfilter.YFilter) { outPath.YFilter = yf }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetGoName(yname string) string {
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "frr-interface" { return "FrrInterface" }
    if yname == "frr-label" { return "FrrLabel" }
    return ""
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetSegmentPath() string {
    return "out-path"
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out-interface"] = outPath.OutInterface
    leafs["out-label"] = outPath.OutLabel
    leafs["ipv4-next-hop"] = outPath.Ipv4NextHop
    leafs["frr-interface"] = outPath.FrrInterface
    leafs["frr-label"] = outPath.FrrLabel
    return leafs
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetBundleName() string { return "cisco_ios_xr" }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetYangName() string { return "out-path" }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) SetParent(parent types.Entity) { outPath.parent = parent }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetParent() types.Entity { return outPath.parent }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetParentYangName() string { return "tunnel-midpoint" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads
// Table of FRR database entries - Tunnel heads
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel head. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead.
    TunnelHead []MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetFilter() yfilter.YFilter { return tunnelHeads.YFilter }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) SetFilter(yf yfilter.YFilter) { tunnelHeads.YFilter = yf }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetGoName(yname string) string {
    if yname == "tunnel-head" { return "TunnelHead" }
    return ""
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetSegmentPath() string {
    return "tunnel-heads"
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-head" {
        for _, c := range tunnelHeads.TunnelHead {
            if tunnelHeads.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead{}
        tunnelHeads.TunnelHead = append(tunnelHeads.TunnelHead, child)
        return &tunnelHeads.TunnelHead[len(tunnelHeads.TunnelHead)-1]
    }
    return nil
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnelHeads.TunnelHead {
        children[tunnelHeads.TunnelHead[i].GetSegmentPath()] = &tunnelHeads.TunnelHead[i]
    }
    return children
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetYangName() string { return "tunnel-heads" }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) SetParent(parent types.Entity) { tunnelHeads.parent = parent }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetParent() types.Entity { return tunnelHeads.parent }

func (tunnelHeads *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead
// Data for FRR database entry - Tunnel head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath.
    OutPath []MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetFilter() yfilter.YFilter { return tunnelHead.YFilter }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) SetFilter(yf yfilter.YFilter) { tunnelHead.YFilter = yf }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "out-path" { return "OutPath" }
    return ""
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetSegmentPath() string {
    return "tunnel-head" + "[interface-name='" + fmt.Sprintf("%v", tunnelHead.InterfaceName) + "']"
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &tunnelHead.FrrEntryId
    }
    if childYangName == "out-path" {
        for _, c := range tunnelHead.OutPath {
            if tunnelHead.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath{}
        tunnelHead.OutPath = append(tunnelHead.OutPath, child)
        return &tunnelHead.OutPath[len(tunnelHead.OutPath)-1]
    }
    return nil
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &tunnelHead.FrrEntryId
    for i := range tunnelHead.OutPath {
        children[tunnelHead.OutPath[i].GetSegmentPath()] = &tunnelHead.OutPath[i]
    }
    return children
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = tunnelHead.InterfaceName
    leafs["tunnel-interface"] = tunnelHead.TunnelInterface
    leafs["input-label"] = tunnelHead.InputLabel
    leafs["entry-frr-state"] = tunnelHead.EntryFrrState
    return leafs
}

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetYangName() string { return "tunnel-head" }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) SetParent(parent types.Entity) { tunnelHead.parent = parent }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetParent() types.Entity { return tunnelHead.parent }

func (tunnelHead *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead) GetParentYangName() string { return "tunnel-heads" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId
// FRR entry ID
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetParentYangName() string { return "tunnel-head" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath
// Out Path List
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetFilter() yfilter.YFilter { return outPath.YFilter }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) SetFilter(yf yfilter.YFilter) { outPath.YFilter = yf }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetGoName(yname string) string {
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "frr-interface" { return "FrrInterface" }
    if yname == "frr-label" { return "FrrLabel" }
    return ""
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetSegmentPath() string {
    return "out-path"
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out-interface"] = outPath.OutInterface
    leafs["out-label"] = outPath.OutLabel
    leafs["ipv4-next-hop"] = outPath.Ipv4NextHop
    leafs["frr-interface"] = outPath.FrrInterface
    leafs["frr-label"] = outPath.FrrLabel
    return leafs
}

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetBundleName() string { return "cisco_ios_xr" }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetYangName() string { return "out-path" }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) SetParent(parent types.Entity) { outPath.parent = parent }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetParent() types.Entity { return outPath.parent }

func (outPath *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetParentYangName() string { return "tunnel-head" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary
// Summary data for FRR database entry - Tunnel
// head
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetFilter() yfilter.YFilter { return tunnelHeadSummary.YFilter }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) SetFilter(yf yfilter.YFilter) { tunnelHeadSummary.YFilter = yf }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetSegmentPath() string {
    return "tunnel-head-summary"
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelHeadSummary.Active
    leafs["ready"] = tunnelHeadSummary.Ready
    leafs["partial"] = tunnelHeadSummary.Partial
    leafs["igp"] = tunnelHeadSummary.Igp
    return leafs
}

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetYangName() string { return "tunnel-head-summary" }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) SetParent(parent types.Entity) { tunnelHeadSummary.parent = parent }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetParent() types.Entity { return tunnelHeadSummary.parent }

func (tunnelHeadSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelHeadSummary) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces
// Sumary table of Protected Interfaces
type MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface.
    SummaryProtectedInterface []MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetFilter() yfilter.YFilter { return summaryProtectedInterfaces.YFilter }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) SetFilter(yf yfilter.YFilter) { summaryProtectedInterfaces.YFilter = yf }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetGoName(yname string) string {
    if yname == "summary-protected-interface" { return "SummaryProtectedInterface" }
    return ""
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetSegmentPath() string {
    return "summary-protected-interfaces"
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-protected-interface" {
        for _, c := range summaryProtectedInterfaces.SummaryProtectedInterface {
            if summaryProtectedInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface{}
        summaryProtectedInterfaces.SummaryProtectedInterface = append(summaryProtectedInterfaces.SummaryProtectedInterface, child)
        return &summaryProtectedInterfaces.SummaryProtectedInterface[len(summaryProtectedInterfaces.SummaryProtectedInterface)-1]
    }
    return nil
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryProtectedInterfaces.SummaryProtectedInterface {
        children[summaryProtectedInterfaces.SummaryProtectedInterface[i].GetSegmentPath()] = &summaryProtectedInterfaces.SummaryProtectedInterface[i]
    }
    return children
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetYangName() string { return "summary-protected-interfaces" }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) SetParent(parent types.Entity) { summaryProtectedInterfaces.parent = parent }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetParent() types.Entity { return summaryProtectedInterfaces.parent }

func (summaryProtectedInterfaces *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
// Data for MPLS interface
type MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetFilter() yfilter.YFilter { return summaryProtectedInterface.YFilter }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) SetFilter(yf yfilter.YFilter) { summaryProtectedInterface.YFilter = yf }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetSegmentPath() string {
    return "summary-protected-interface" + "[interface-name='" + fmt.Sprintf("%v", summaryProtectedInterface.InterfaceName) + "']"
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = summaryProtectedInterface.InterfaceName
    leafs["active"] = summaryProtectedInterface.Active
    leafs["ready"] = summaryProtectedInterface.Ready
    leafs["partial"] = summaryProtectedInterface.Partial
    leafs["igp"] = summaryProtectedInterface.Igp
    return leafs
}

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetYangName() string { return "summary-protected-interface" }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) SetParent(parent types.Entity) { summaryProtectedInterface.parent = parent }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetParent() types.Entity { return summaryProtectedInterface.parent }

func (summaryProtectedInterface *MplsLsdNodes_MplsLsdNode_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetParentYangName() string { return "summary-protected-interfaces" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary
// Summary data for FRR database entry
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetFilter() yfilter.YFilter { return tunnelSummary.YFilter }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) SetFilter(yf yfilter.YFilter) { tunnelSummary.YFilter = yf }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetSegmentPath() string {
    return "tunnel-summary"
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelSummary.Active
    leafs["ready"] = tunnelSummary.Ready
    leafs["partial"] = tunnelSummary.Partial
    leafs["igp"] = tunnelSummary.Igp
    return leafs
}

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetYangName() string { return "tunnel-summary" }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) SetParent(parent types.Entity) { tunnelSummary.parent = parent }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetParent() types.Entity { return tunnelSummary.parent }

func (tunnelSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelSummary) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary
// Summary data for FRR database entry - Tunnel
// midpoint
type MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetFilter() yfilter.YFilter { return tunnelMidpointSummary.YFilter }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) SetFilter(yf yfilter.YFilter) { tunnelMidpointSummary.YFilter = yf }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetSegmentPath() string {
    return "tunnel-midpoint-summary"
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelMidpointSummary.Active
    leafs["ready"] = tunnelMidpointSummary.Ready
    leafs["partial"] = tunnelMidpointSummary.Partial
    leafs["igp"] = tunnelMidpointSummary.Igp
    return leafs
}

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetYangName() string { return "tunnel-midpoint-summary" }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) SetParent(parent types.Entity) { tunnelMidpointSummary.parent = parent }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetParent() types.Entity { return tunnelMidpointSummary.parent }

func (tunnelMidpointSummary *MplsLsdNodes_MplsLsdNode_FrrDatabase_TunnelMidpointSummary) GetParentYangName() string { return "frr-database" }

// MplsLsdNodes_MplsLsdNode_Rewrite
// Table of rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of Rewrites.
    RewritePws MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws

    // Table of Rewrites.
    RewriteIpv4S MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S

    // Table of Traffic Engineering Rewrites.
    RewriteTes MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes

    // Table of Rewrites.
    RewriteLabels MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetFilter() yfilter.YFilter { return rewrite.YFilter }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) SetFilter(yf yfilter.YFilter) { rewrite.YFilter = yf }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetGoName(yname string) string {
    if yname == "rewrite-pws" { return "RewritePws" }
    if yname == "rewrite-ipv4s" { return "RewriteIpv4S" }
    if yname == "rewrite-tes" { return "RewriteTes" }
    if yname == "rewrite-labels" { return "RewriteLabels" }
    return ""
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetSegmentPath() string {
    return "rewrite"
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-pws" {
        return &rewrite.RewritePws
    }
    if childYangName == "rewrite-ipv4s" {
        return &rewrite.RewriteIpv4S
    }
    if childYangName == "rewrite-tes" {
        return &rewrite.RewriteTes
    }
    if childYangName == "rewrite-labels" {
        return &rewrite.RewriteLabels
    }
    return nil
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-pws"] = &rewrite.RewritePws
    children["rewrite-ipv4s"] = &rewrite.RewriteIpv4S
    children["rewrite-tes"] = &rewrite.RewriteTes
    children["rewrite-labels"] = &rewrite.RewriteLabels
    return children
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetBundleName() string { return "cisco_ios_xr" }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetYangName() string { return "rewrite" }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) SetParent(parent types.Entity) { rewrite.parent = parent }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetParent() types.Entity { return rewrite.parent }

func (rewrite *MplsLsdNodes_MplsLsdNode_Rewrite) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for PW List. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw.
    RewritePw []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetFilter() yfilter.YFilter { return rewritePws.YFilter }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) SetFilter(yf yfilter.YFilter) { rewritePws.YFilter = yf }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetGoName(yname string) string {
    if yname == "rewrite-pw" { return "RewritePw" }
    return ""
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetSegmentPath() string {
    return "rewrite-pws"
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-pw" {
        for _, c := range rewritePws.RewritePw {
            if rewritePws.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw{}
        rewritePws.RewritePw = append(rewritePws.RewritePw, child)
        return &rewritePws.RewritePw[len(rewritePws.RewritePw)-1]
    }
    return nil
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewritePws.RewritePw {
        children[rewritePws.RewritePw[i].GetSegmentPath()] = &rewritePws.RewritePw[i]
    }
    return children
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetBundleName() string { return "cisco_ios_xr" }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetYangName() string { return "rewrite-pws" }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) SetParent(parent types.Entity) { rewritePws.parent = parent }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetParent() types.Entity { return rewritePws.parent }

func (rewritePws *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws) GetParentYangName() string { return "rewrite" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw
// FPI rewrite for PW List
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. PW List ID. The type is interface{} with range:
    // -2147483648..2147483647.
    PwListId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi.
    AssociatedFpi []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf.
    V4Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf.
    V6Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois.
    Mois []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetFilter() yfilter.YFilter { return rewritePw.YFilter }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) SetFilter(yf yfilter.YFilter) { rewritePw.YFilter = yf }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetGoName(yname string) string {
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetSegmentPath() string {
    return "rewrite-pw" + "[pw-list-id='" + fmt.Sprintf("%v", rewritePw.PwListId) + "']"
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewritePw.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewritePw.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewritePw.AssociatedFpi {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi{}
        rewritePw.AssociatedFpi = append(rewritePw.AssociatedFpi, child)
        return &rewritePw.AssociatedFpi[len(rewritePw.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewritePw.V4Rpf {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf{}
        rewritePw.V4Rpf = append(rewritePw.V4Rpf, child)
        return &rewritePw.V4Rpf[len(rewritePw.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewritePw.V6Rpf {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf{}
        rewritePw.V6Rpf = append(rewritePw.V6Rpf, child)
        return &rewritePw.V6Rpf[len(rewritePw.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewritePw.Mois {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois{}
        rewritePw.Mois = append(rewritePw.Mois, child)
        return &rewritePw.Mois[len(rewritePw.Mois)-1]
    }
    return nil
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewritePw.FpiKey
    children["rewrite-id"] = &rewritePw.RewriteId
    for i := range rewritePw.AssociatedFpi {
        children[rewritePw.AssociatedFpi[i].GetSegmentPath()] = &rewritePw.AssociatedFpi[i]
    }
    for i := range rewritePw.V4Rpf {
        children[rewritePw.V4Rpf[i].GetSegmentPath()] = &rewritePw.V4Rpf[i]
    }
    for i := range rewritePw.V6Rpf {
        children[rewritePw.V6Rpf[i].GetSegmentPath()] = &rewritePw.V6Rpf[i]
    }
    for i := range rewritePw.Mois {
        children[rewritePw.Mois[i].GetSegmentPath()] = &rewritePw.Mois[i]
    }
    return children
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pw-list-id"] = rewritePw.PwListId
    leafs["rewrite-version"] = rewritePw.RewriteVersion
    leafs["bcdl-priority"] = rewritePw.BcdlPriority
    leafs["lsd-queue"] = rewritePw.LsdQueue
    leafs["rw-install-time"] = rewritePw.RwInstallTime
    leafs["rw-install-age"] = rewritePw.RwInstallAge
    leafs["rw-updated"] = rewritePw.RwUpdated
    leafs["priority-updated"] = rewritePw.PriorityUpdated
    return leafs
}

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetBundleName() string { return "cisco_ios_xr" }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetYangName() string { return "rewrite-pw" }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) SetParent(parent types.Entity) { rewritePw.parent = parent }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetParent() types.Entity { return rewritePw.parent }

func (rewritePw *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw) GetParentYangName() string { return "rewrite-pws" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V4Rpf) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_V6Rpf) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray.
    MoiArray []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois) GetParentYangName() string { return "rewrite-pw" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4.
    RewriteIpv4 []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetFilter() yfilter.YFilter { return rewriteIpv4S.YFilter }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) SetFilter(yf yfilter.YFilter) { rewriteIpv4S.YFilter = yf }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetGoName(yname string) string {
    if yname == "rewrite-ipv4" { return "RewriteIpv4" }
    return ""
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetSegmentPath() string {
    return "rewrite-ipv4s"
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-ipv4" {
        for _, c := range rewriteIpv4S.RewriteIpv4 {
            if rewriteIpv4S.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4{}
        rewriteIpv4S.RewriteIpv4 = append(rewriteIpv4S.RewriteIpv4, child)
        return &rewriteIpv4S.RewriteIpv4[len(rewriteIpv4S.RewriteIpv4)-1]
    }
    return nil
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteIpv4S.RewriteIpv4 {
        children[rewriteIpv4S.RewriteIpv4[i].GetSegmentPath()] = &rewriteIpv4S.RewriteIpv4[i]
    }
    return children
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetYangName() string { return "rewrite-ipv4s" }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) SetParent(parent types.Entity) { rewriteIpv4S.parent = parent }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetParent() types.Entity { return rewriteIpv4S.parent }

func (rewriteIpv4S *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S) GetParentYangName() string { return "rewrite" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4
// FPI rewrite for label
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSI table name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RsiTableName interface{}

    // RSI table ID. The type is string with pattern: [0-9a-fA-F]{1,8}.
    RsiTableId interface{}

    // IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: -2147483648..2147483647.
    PrefixLength interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi.
    AssociatedFpi []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf.
    V4Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf.
    V6Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois.
    Mois []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetFilter() yfilter.YFilter { return rewriteIpv4.YFilter }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) SetFilter(yf yfilter.YFilter) { rewriteIpv4.YFilter = yf }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetGoName(yname string) string {
    if yname == "rsi-table-name" { return "RsiTableName" }
    if yname == "rsi-table-id" { return "RsiTableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetSegmentPath() string {
    return "rewrite-ipv4"
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteIpv4.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteIpv4.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteIpv4.AssociatedFpi {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi{}
        rewriteIpv4.AssociatedFpi = append(rewriteIpv4.AssociatedFpi, child)
        return &rewriteIpv4.AssociatedFpi[len(rewriteIpv4.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteIpv4.V4Rpf {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf{}
        rewriteIpv4.V4Rpf = append(rewriteIpv4.V4Rpf, child)
        return &rewriteIpv4.V4Rpf[len(rewriteIpv4.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteIpv4.V6Rpf {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf{}
        rewriteIpv4.V6Rpf = append(rewriteIpv4.V6Rpf, child)
        return &rewriteIpv4.V6Rpf[len(rewriteIpv4.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteIpv4.Mois {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois{}
        rewriteIpv4.Mois = append(rewriteIpv4.Mois, child)
        return &rewriteIpv4.Mois[len(rewriteIpv4.Mois)-1]
    }
    return nil
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteIpv4.FpiKey
    children["rewrite-id"] = &rewriteIpv4.RewriteId
    for i := range rewriteIpv4.AssociatedFpi {
        children[rewriteIpv4.AssociatedFpi[i].GetSegmentPath()] = &rewriteIpv4.AssociatedFpi[i]
    }
    for i := range rewriteIpv4.V4Rpf {
        children[rewriteIpv4.V4Rpf[i].GetSegmentPath()] = &rewriteIpv4.V4Rpf[i]
    }
    for i := range rewriteIpv4.V6Rpf {
        children[rewriteIpv4.V6Rpf[i].GetSegmentPath()] = &rewriteIpv4.V6Rpf[i]
    }
    for i := range rewriteIpv4.Mois {
        children[rewriteIpv4.Mois[i].GetSegmentPath()] = &rewriteIpv4.Mois[i]
    }
    return children
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsi-table-name"] = rewriteIpv4.RsiTableName
    leafs["rsi-table-id"] = rewriteIpv4.RsiTableId
    leafs["prefix"] = rewriteIpv4.Prefix
    leafs["prefix-length"] = rewriteIpv4.PrefixLength
    leafs["rewrite-version"] = rewriteIpv4.RewriteVersion
    leafs["bcdl-priority"] = rewriteIpv4.BcdlPriority
    leafs["lsd-queue"] = rewriteIpv4.LsdQueue
    leafs["rw-install-time"] = rewriteIpv4.RwInstallTime
    leafs["rw-install-age"] = rewriteIpv4.RwInstallAge
    leafs["rw-updated"] = rewriteIpv4.RwUpdated
    leafs["priority-updated"] = rewriteIpv4.PriorityUpdated
    return leafs
}

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetYangName() string { return "rewrite-ipv4" }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) SetParent(parent types.Entity) { rewriteIpv4.parent = parent }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetParent() types.Entity { return rewriteIpv4.parent }

func (rewriteIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4) GetParentYangName() string { return "rewrite-ipv4s" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray.
    MoiArray []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes
// Table of Traffic Engineering Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for TE. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe.
    RewriteTe []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetFilter() yfilter.YFilter { return rewriteTes.YFilter }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) SetFilter(yf yfilter.YFilter) { rewriteTes.YFilter = yf }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetGoName(yname string) string {
    if yname == "rewrite-te" { return "RewriteTe" }
    return ""
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetSegmentPath() string {
    return "rewrite-tes"
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-te" {
        for _, c := range rewriteTes.RewriteTe {
            if rewriteTes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe{}
        rewriteTes.RewriteTe = append(rewriteTes.RewriteTe, child)
        return &rewriteTes.RewriteTe[len(rewriteTes.RewriteTe)-1]
    }
    return nil
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteTes.RewriteTe {
        children[rewriteTes.RewriteTe[i].GetSegmentPath()] = &rewriteTes.RewriteTe[i]
    }
    return children
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetYangName() string { return "rewrite-tes" }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) SetParent(parent types.Entity) { rewriteTes.parent = parent }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetParent() types.Entity { return rewriteTes.parent }

func (rewriteTes *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes) GetParentYangName() string { return "rewrite" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe
// FPI rewrite for TE
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi.
    AssociatedFpi []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf.
    V4Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf.
    V6Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois.
    Mois []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetFilter() yfilter.YFilter { return rewriteTe.YFilter }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) SetFilter(yf yfilter.YFilter) { rewriteTe.YFilter = yf }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetSegmentPath() string {
    return "rewrite-te" + "[interface-name='" + fmt.Sprintf("%v", rewriteTe.InterfaceName) + "']"
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteTe.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteTe.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteTe.AssociatedFpi {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi{}
        rewriteTe.AssociatedFpi = append(rewriteTe.AssociatedFpi, child)
        return &rewriteTe.AssociatedFpi[len(rewriteTe.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteTe.V4Rpf {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf{}
        rewriteTe.V4Rpf = append(rewriteTe.V4Rpf, child)
        return &rewriteTe.V4Rpf[len(rewriteTe.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteTe.V6Rpf {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf{}
        rewriteTe.V6Rpf = append(rewriteTe.V6Rpf, child)
        return &rewriteTe.V6Rpf[len(rewriteTe.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteTe.Mois {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois{}
        rewriteTe.Mois = append(rewriteTe.Mois, child)
        return &rewriteTe.Mois[len(rewriteTe.Mois)-1]
    }
    return nil
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteTe.FpiKey
    children["rewrite-id"] = &rewriteTe.RewriteId
    for i := range rewriteTe.AssociatedFpi {
        children[rewriteTe.AssociatedFpi[i].GetSegmentPath()] = &rewriteTe.AssociatedFpi[i]
    }
    for i := range rewriteTe.V4Rpf {
        children[rewriteTe.V4Rpf[i].GetSegmentPath()] = &rewriteTe.V4Rpf[i]
    }
    for i := range rewriteTe.V6Rpf {
        children[rewriteTe.V6Rpf[i].GetSegmentPath()] = &rewriteTe.V6Rpf[i]
    }
    for i := range rewriteTe.Mois {
        children[rewriteTe.Mois[i].GetSegmentPath()] = &rewriteTe.Mois[i]
    }
    return children
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = rewriteTe.InterfaceName
    leafs["rewrite-version"] = rewriteTe.RewriteVersion
    leafs["bcdl-priority"] = rewriteTe.BcdlPriority
    leafs["lsd-queue"] = rewriteTe.LsdQueue
    leafs["rw-install-time"] = rewriteTe.RwInstallTime
    leafs["rw-install-age"] = rewriteTe.RwInstallAge
    leafs["rw-updated"] = rewriteTe.RwUpdated
    leafs["priority-updated"] = rewriteTe.PriorityUpdated
    return leafs
}

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetYangName() string { return "rewrite-te" }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) SetParent(parent types.Entity) { rewriteTe.parent = parent }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetParent() types.Entity { return rewriteTe.parent }

func (rewriteTe *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe) GetParentYangName() string { return "rewrite-tes" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray.
    MoiArray []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois) GetParentYangName() string { return "rewrite-te" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels
// Table of Rewrites
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel.
    RewriteLabel []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetFilter() yfilter.YFilter { return rewriteLabels.YFilter }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) SetFilter(yf yfilter.YFilter) { rewriteLabels.YFilter = yf }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetGoName(yname string) string {
    if yname == "rewrite-label" { return "RewriteLabel" }
    return ""
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetSegmentPath() string {
    return "rewrite-labels"
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-label" {
        for _, c := range rewriteLabels.RewriteLabel {
            if rewriteLabels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel{}
        rewriteLabels.RewriteLabel = append(rewriteLabels.RewriteLabel, child)
        return &rewriteLabels.RewriteLabel[len(rewriteLabels.RewriteLabel)-1]
    }
    return nil
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteLabels.RewriteLabel {
        children[rewriteLabels.RewriteLabel[i].GetSegmentPath()] = &rewriteLabels.RewriteLabel[i]
    }
    return children
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetYangName() string { return "rewrite-labels" }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) SetParent(parent types.Entity) { rewriteLabels.parent = parent }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetParent() types.Entity { return rewriteLabels.parent }

func (rewriteLabels *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels) GetParentYangName() string { return "rewrite" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel
// FPI rewrite for label
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    LabelId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi.
    AssociatedFpi []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf.
    V4Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf.
    V6Rpf []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf

    // Mois. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois.
    Mois []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetFilter() yfilter.YFilter { return rewriteLabel.YFilter }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) SetFilter(yf yfilter.YFilter) { rewriteLabel.YFilter = yf }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetGoName(yname string) string {
    if yname == "label-id" { return "LabelId" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetSegmentPath() string {
    return "rewrite-label" + "[label-id='" + fmt.Sprintf("%v", rewriteLabel.LabelId) + "']"
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteLabel.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteLabel.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteLabel.AssociatedFpi {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi{}
        rewriteLabel.AssociatedFpi = append(rewriteLabel.AssociatedFpi, child)
        return &rewriteLabel.AssociatedFpi[len(rewriteLabel.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteLabel.V4Rpf {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf{}
        rewriteLabel.V4Rpf = append(rewriteLabel.V4Rpf, child)
        return &rewriteLabel.V4Rpf[len(rewriteLabel.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteLabel.V6Rpf {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf{}
        rewriteLabel.V6Rpf = append(rewriteLabel.V6Rpf, child)
        return &rewriteLabel.V6Rpf[len(rewriteLabel.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteLabel.Mois {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois{}
        rewriteLabel.Mois = append(rewriteLabel.Mois, child)
        return &rewriteLabel.Mois[len(rewriteLabel.Mois)-1]
    }
    return nil
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteLabel.FpiKey
    children["rewrite-id"] = &rewriteLabel.RewriteId
    for i := range rewriteLabel.AssociatedFpi {
        children[rewriteLabel.AssociatedFpi[i].GetSegmentPath()] = &rewriteLabel.AssociatedFpi[i]
    }
    for i := range rewriteLabel.V4Rpf {
        children[rewriteLabel.V4Rpf[i].GetSegmentPath()] = &rewriteLabel.V4Rpf[i]
    }
    for i := range rewriteLabel.V6Rpf {
        children[rewriteLabel.V6Rpf[i].GetSegmentPath()] = &rewriteLabel.V6Rpf[i]
    }
    for i := range rewriteLabel.Mois {
        children[rewriteLabel.Mois[i].GetSegmentPath()] = &rewriteLabel.Mois[i]
    }
    return children
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-id"] = rewriteLabel.LabelId
    leafs["rewrite-version"] = rewriteLabel.RewriteVersion
    leafs["bcdl-priority"] = rewriteLabel.BcdlPriority
    leafs["lsd-queue"] = rewriteLabel.LsdQueue
    leafs["rw-install-time"] = rewriteLabel.RwInstallTime
    leafs["rw-install-age"] = rewriteLabel.RwInstallAge
    leafs["rw-updated"] = rewriteLabel.RwUpdated
    leafs["priority-updated"] = rewriteLabel.PriorityUpdated
    return leafs
}

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetYangName() string { return "rewrite-label" }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) SetParent(parent types.Entity) { rewriteLabel.parent = parent }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetParent() types.Entity { return rewriteLabel.parent }

func (rewriteLabel *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel) GetParentYangName() string { return "rewrite-labels" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey
// fpi key
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
// Rewrite ID
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi
// Associated FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi
// FPI
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData
// te data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf
// IPv4 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf
// IPv6 RPF neighbors
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois
// Mois
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray.
    MoiArray []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois) GetParentYangName() string { return "rewrite-label" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource
// Application state
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
// moi array
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
// Moi
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsdNodes_MplsLsdNode_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsdNodes_MplsLsdNode_RewriteSummary
// Rewrite Summary 
type MplsLsdNodes_MplsLsdNode_RewriteSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4Fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6Fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4RpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6RpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetFilter() yfilter.YFilter { return rewriteSummary.YFilter }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) SetFilter(yf yfilter.YFilter) { rewriteSummary.YFilter = yf }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetGoName(yname string) string {
    if yname == "num-label-fpi" { return "NumLabelFpi" }
    if yname == "num-tefpi" { return "NumTefpi" }
    if yname == "num-ipv4fpi" { return "NumIpv4Fpi" }
    if yname == "num-ipv6fpi" { return "NumIpv6Fpi" }
    if yname == "num-pw-list-tefpi" { return "NumPwListTefpi" }
    if yname == "num-dmtctefpi" { return "NumDmtctefpi" }
    if yname == "num-rewrite" { return "NumRewrite" }
    if yname == "total-forward-update" { return "TotalForwardUpdate" }
    if yname == "total-forwad-update-message" { return "TotalForwadUpdateMessage" }
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-t-ev4-paths" { return "TotalTEv4Paths" }
    if yname == "total-te-head-paths" { return "TotalTeHeadPaths" }
    if yname == "total-pw-paths" { return "TotalPwPaths" }
    if yname == "total-ip-sub-paths" { return "TotalIpSubPaths" }
    if yname == "total-ipv4rpf-neighbors" { return "TotalIpv4RpfNeighbors" }
    if yname == "total-ipv6rpf-neighbors" { return "TotalIpv6RpfNeighbors" }
    if yname == "num-rewrite-rpf-neighbors" { return "NumRewriteRpfNeighbors" }
    if yname == "total-dmtc-intf" { return "TotalDmtcIntf" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "ipv4-paths" { return "Ipv4Paths" }
    if yname == "ipv6-paths" { return "Ipv6Paths" }
    return ""
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetSegmentPath() string {
    return "rewrite-summary"
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-paths" {
        return &rewriteSummary.Ipv4Paths
    }
    if childYangName == "ipv6-paths" {
        return &rewriteSummary.Ipv6Paths
    }
    return nil
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-paths"] = &rewriteSummary.Ipv4Paths
    children["ipv6-paths"] = &rewriteSummary.Ipv6Paths
    return children
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-label-fpi"] = rewriteSummary.NumLabelFpi
    leafs["num-tefpi"] = rewriteSummary.NumTefpi
    leafs["num-ipv4fpi"] = rewriteSummary.NumIpv4Fpi
    leafs["num-ipv6fpi"] = rewriteSummary.NumIpv6Fpi
    leafs["num-pw-list-tefpi"] = rewriteSummary.NumPwListTefpi
    leafs["num-dmtctefpi"] = rewriteSummary.NumDmtctefpi
    leafs["num-rewrite"] = rewriteSummary.NumRewrite
    leafs["total-forward-update"] = rewriteSummary.TotalForwardUpdate
    leafs["total-forwad-update-message"] = rewriteSummary.TotalForwadUpdateMessage
    leafs["total-paths"] = rewriteSummary.TotalPaths
    leafs["total-t-ev4-paths"] = rewriteSummary.TotalTEv4Paths
    leafs["total-te-head-paths"] = rewriteSummary.TotalTeHeadPaths
    leafs["total-pw-paths"] = rewriteSummary.TotalPwPaths
    leafs["total-ip-sub-paths"] = rewriteSummary.TotalIpSubPaths
    leafs["total-ipv4rpf-neighbors"] = rewriteSummary.TotalIpv4RpfNeighbors
    leafs["total-ipv6rpf-neighbors"] = rewriteSummary.TotalIpv6RpfNeighbors
    leafs["num-rewrite-rpf-neighbors"] = rewriteSummary.NumRewriteRpfNeighbors
    leafs["total-dmtc-intf"] = rewriteSummary.TotalDmtcIntf
    leafs["vrf-name-xr"] = rewriteSummary.VrfNameXr
    return leafs
}

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetYangName() string { return "rewrite-summary" }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) SetParent(parent types.Entity) { rewriteSummary.parent = parent }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetParent() types.Entity { return rewriteSummary.parent }

func (rewriteSummary *MplsLsdNodes_MplsLsdNode_RewriteSummary) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths
// Count for IPv4 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetFilter() yfilter.YFilter { return ipv4Paths.YFilter }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) SetFilter(yf yfilter.YFilter) { ipv4Paths.YFilter = yf }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetSegmentPath() string {
    return "ipv4-paths"
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv4Paths.TotalPaths
    leafs["total-backup-paths"] = ipv4Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv4Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv4Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv4Paths.TotalPopLkupPaths
    return leafs
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetYangName() string { return "ipv4-paths" }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) SetParent(parent types.Entity) { ipv4Paths.parent = parent }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetParent() types.Entity { return ipv4Paths.parent }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv4Paths) GetParentYangName() string { return "rewrite-summary" }

// MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths
// Count for IPv6 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetFilter() yfilter.YFilter { return ipv6Paths.YFilter }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) SetFilter(yf yfilter.YFilter) { ipv6Paths.YFilter = yf }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetSegmentPath() string {
    return "ipv6-paths"
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv6Paths.TotalPaths
    leafs["total-backup-paths"] = ipv6Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv6Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv6Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv6Paths.TotalPopLkupPaths
    return leafs
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetYangName() string { return "ipv6-paths" }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) SetParent(parent types.Entity) { ipv6Paths.parent = parent }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetParent() types.Entity { return ipv6Paths.parent }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummary_Ipv6Paths) GetParentYangName() string { return "rewrite-summary" }

// MplsLsdNodes_MplsLsdNode_Applications
// Table of MPLS applications using LSD
type MplsLsdNodes_MplsLsdNode_Applications struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS application using LSD. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Applications_Application.
    Application []MplsLsdNodes_MplsLsdNode_Applications_Application
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetFilter() yfilter.YFilter { return applications.YFilter }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) SetFilter(yf yfilter.YFilter) { applications.YFilter = yf }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetGoName(yname string) string {
    if yname == "application" { return "Application" }
    return ""
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetSegmentPath() string {
    return "applications"
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application" {
        for _, c := range applications.Application {
            if applications.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Applications_Application{}
        applications.Application = append(applications.Application, child)
        return &applications.Application[len(applications.Application)-1]
    }
    return nil
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range applications.Application {
        children[applications.Application[i].GetSegmentPath()] = &applications.Application[i]
    }
    return children
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetBundleName() string { return "cisco_ios_xr" }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetYangName() string { return "applications" }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) SetParent(parent types.Entity) { applications.parent = parent }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetParent() types.Entity { return applications.parent }

func (applications *MplsLsdNodes_MplsLsdNode_Applications) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_Applications_Application
// Data for MPLS application using LSD
type MplsLsdNodes_MplsLsdNode_Applications_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Application Instance name in the form of
    // '<app_type_name>[:<instance>]'. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ApplicationName interface{}

    // Application name. The type is string.
    ApplicationNameXr interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // App reg ts. The type is interface{} with range: 0..18446744073709551615.
    AppRegTime interface{}

    // App disconnect ts. The type is interface{} with range:
    // 0..18446744073709551615.
    AppDisconnectTime interface{}

    // App flow control status. The type is interface{} with range:
    // -2147483648..2147483647.
    AppFlowControlled interface{}

    // Flow Ctrl ts. The type is interface{} with range: 0..18446744073709551615.
    FlowCtrlTime interface{}

    // Flow Ctrl Clr ts. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowCtrlClrTime interface{}

    // App go active timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    GoActTs interface{}

    // Application state. The type is MgmtLsdAppState.
    ApplicationState interface{}

    // Recovery time [secs] remaining if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRemainingSeconds interface{}

    // Recovery time [secs] elapsed if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeElapsedSeconds interface{}

    // Recovery time [secs] specified at registration or set explicitly. The type
    // is interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRegisterSeconds interface{}

    // Node ID where application is/was running. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Application Statistics.
    ApplicationStatistics MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-name-xr" { return "ApplicationNameXr" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "app-reg-time" { return "AppRegTime" }
    if yname == "app-disconnect-time" { return "AppDisconnectTime" }
    if yname == "app-flow-controlled" { return "AppFlowControlled" }
    if yname == "flow-ctrl-time" { return "FlowCtrlTime" }
    if yname == "flow-ctrl-clr-time" { return "FlowCtrlClrTime" }
    if yname == "go-act-ts" { return "GoActTs" }
    if yname == "application-state" { return "ApplicationState" }
    if yname == "recovery-time-remaining-seconds" { return "RecoveryTimeRemainingSeconds" }
    if yname == "recovery-time-elapsed-seconds" { return "RecoveryTimeElapsedSeconds" }
    if yname == "recovery-time-register-seconds" { return "RecoveryTimeRegisterSeconds" }
    if yname == "node-id" { return "NodeId" }
    if yname == "application-statistics" { return "ApplicationStatistics" }
    return ""
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetSegmentPath() string {
    return "application" + "[application-name='" + fmt.Sprintf("%v", application.ApplicationName) + "']"
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-statistics" {
        return &application.ApplicationStatistics
    }
    return nil
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-statistics"] = &application.ApplicationStatistics
    return children
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = application.ApplicationName
    leafs["application-name-xr"] = application.ApplicationNameXr
    leafs["application-type"] = application.ApplicationType
    leafs["application-role-primary"] = application.ApplicationRolePrimary
    leafs["application-instance"] = application.ApplicationInstance
    leafs["app-reg-time"] = application.AppRegTime
    leafs["app-disconnect-time"] = application.AppDisconnectTime
    leafs["app-flow-controlled"] = application.AppFlowControlled
    leafs["flow-ctrl-time"] = application.FlowCtrlTime
    leafs["flow-ctrl-clr-time"] = application.FlowCtrlClrTime
    leafs["go-act-ts"] = application.GoActTs
    leafs["application-state"] = application.ApplicationState
    leafs["recovery-time-remaining-seconds"] = application.RecoveryTimeRemainingSeconds
    leafs["recovery-time-elapsed-seconds"] = application.RecoveryTimeElapsedSeconds
    leafs["recovery-time-register-seconds"] = application.RecoveryTimeRegisterSeconds
    leafs["node-id"] = application.NodeId
    return leafs
}

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetYangName() string { return "application" }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetParent() types.Entity { return application.parent }

func (application *MplsLsdNodes_MplsLsdNode_Applications_Application) GetParentYangName() string { return "applications" }

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics
// Application Statistics
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of interface enabled. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnable interface{}

    // Number of interface enable pending. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnablePending interface{}

    // Connect count. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Label context count. The type is slice of interface{} with range:
    // 0..4294967295.
    LabelContextCount []interface{}

    // Label context pending count. The type is slice of interface{} with range:
    // 0..4294967295.
    LabelContextPendingCount []interface{}

    // Connected statistics.
    Connected MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetFilter() yfilter.YFilter { return applicationStatistics.YFilter }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) SetFilter(yf yfilter.YFilter) { applicationStatistics.YFilter = yf }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetGoName(yname string) string {
    if yname == "interface-enable" { return "InterfaceEnable" }
    if yname == "interface-enable-pending" { return "InterfaceEnablePending" }
    if yname == "connect-count" { return "ConnectCount" }
    if yname == "label-context-count" { return "LabelContextCount" }
    if yname == "label-context-pending-count" { return "LabelContextPendingCount" }
    if yname == "connected" { return "Connected" }
    return ""
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetSegmentPath() string {
    return "application-statistics"
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected" {
        return &applicationStatistics.Connected
    }
    return nil
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected"] = &applicationStatistics.Connected
    return children
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-enable"] = applicationStatistics.InterfaceEnable
    leafs["interface-enable-pending"] = applicationStatistics.InterfaceEnablePending
    leafs["connect-count"] = applicationStatistics.ConnectCount
    leafs["label-context-count"] = applicationStatistics.LabelContextCount
    leafs["label-context-pending-count"] = applicationStatistics.LabelContextPendingCount
    return leafs
}

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetYangName() string { return "application-statistics" }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) SetParent(parent types.Entity) { applicationStatistics.parent = parent }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetParent() types.Entity { return applicationStatistics.parent }

func (applicationStatistics *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics) GetParentYangName() string { return "application" }

// MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected
// Connected statistics
type MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RT set count. The type is interface{} with range: 0..4294967295.
    RtSetMsgCount interface{}

    // Operation count. The type is interface{} with range: 0..4294967295.
    OperationMsgCount interface{}

    // Label OOR count. The type is interface{} with range: 0..4294967295.
    OorLabelCount interface{}

    // Error count. The type is interface{} with range: 0..4294967295.
    ErrorMsgCount interface{}
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetFilter() yfilter.YFilter { return connected.YFilter }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) SetFilter(yf yfilter.YFilter) { connected.YFilter = yf }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetGoName(yname string) string {
    if yname == "rt-set-msg-count" { return "RtSetMsgCount" }
    if yname == "operation-msg-count" { return "OperationMsgCount" }
    if yname == "oor-label-count" { return "OorLabelCount" }
    if yname == "error-msg-count" { return "ErrorMsgCount" }
    return ""
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetSegmentPath() string {
    return "connected"
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rt-set-msg-count"] = connected.RtSetMsgCount
    leafs["operation-msg-count"] = connected.OperationMsgCount
    leafs["oor-label-count"] = connected.OorLabelCount
    leafs["error-msg-count"] = connected.ErrorMsgCount
    return leafs
}

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetBundleName() string { return "cisco_ios_xr" }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetYangName() string { return "connected" }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) SetParent(parent types.Entity) { connected.parent = parent }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetParent() types.Entity { return connected.parent }

func (connected *MplsLsdNodes_MplsLsdNode_Applications_Application_ApplicationStatistics_Connected) GetParentYangName() string { return "application-statistics" }

// MplsLsdNodes_MplsLsdNode_SrlbInconsistency
// SRLB Inconsistencies
type MplsLsdNodes_MplsLsdNode_SrlbInconsistency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start label of Segment Routing Local Block range. The type is interface{}
    // with range: 0..4294967295.
    StartSrlbRange interface{}

    // End label of Segment Routing Local Block range. The type is interface{}
    // with range: 0..4294967295.
    EndSrlbRange interface{}
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetFilter() yfilter.YFilter { return srlbInconsistency.YFilter }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) SetFilter(yf yfilter.YFilter) { srlbInconsistency.YFilter = yf }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetGoName(yname string) string {
    if yname == "start-srlb-range" { return "StartSrlbRange" }
    if yname == "end-srlb-range" { return "EndSrlbRange" }
    return ""
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetSegmentPath() string {
    return "srlb-inconsistency"
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-srlb-range"] = srlbInconsistency.StartSrlbRange
    leafs["end-srlb-range"] = srlbInconsistency.EndSrlbRange
    return leafs
}

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetBundleName() string { return "cisco_ios_xr" }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetYangName() string { return "srlb-inconsistency" }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) SetParent(parent types.Entity) { srlbInconsistency.parent = parent }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetParent() types.Entity { return srlbInconsistency.parent }

func (srlbInconsistency *MplsLsdNodes_MplsLsdNode_SrlbInconsistency) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs
// Dynamic label range summary by VRF
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dynamic label range summary by VRF. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf.
    LabelSummaryVrf []MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetFilter() yfilter.YFilter { return labelSummaryVrfs.YFilter }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) SetFilter(yf yfilter.YFilter) { labelSummaryVrfs.YFilter = yf }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetGoName(yname string) string {
    if yname == "label-summary-vrf" { return "LabelSummaryVrf" }
    return ""
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetSegmentPath() string {
    return "label-summary-vrfs"
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-summary-vrf" {
        for _, c := range labelSummaryVrfs.LabelSummaryVrf {
            if labelSummaryVrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf{}
        labelSummaryVrfs.LabelSummaryVrf = append(labelSummaryVrfs.LabelSummaryVrf, child)
        return &labelSummaryVrfs.LabelSummaryVrf[len(labelSummaryVrfs.LabelSummaryVrf)-1]
    }
    return nil
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummaryVrfs.LabelSummaryVrf {
        children[labelSummaryVrfs.LabelSummaryVrf[i].GetSegmentPath()] = &labelSummaryVrfs.LabelSummaryVrf[i]
    }
    return children
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetYangName() string { return "label-summary-vrfs" }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) SetParent(parent types.Entity) { labelSummaryVrfs.parent = parent }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetParent() types.Entity { return labelSummaryVrfs.parent }

func (labelSummaryVrfs *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf
// Dynamic label range summary by VRF
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount.
    OwnerCount []MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetFilter() yfilter.YFilter { return labelSummaryVrf.YFilter }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) SetFilter(yf yfilter.YFilter) { labelSummaryVrf.YFilter = yf }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "total-labels" { return "TotalLabels" }
    if yname == "rsi-connected" { return "RsiConnected" }
    if yname == "owner-count" { return "OwnerCount" }
    return ""
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetSegmentPath() string {
    return "label-summary-vrf" + "[vrf-name='" + fmt.Sprintf("%v", labelSummaryVrf.VrfName) + "']"
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner-count" {
        for _, c := range labelSummaryVrf.OwnerCount {
            if labelSummaryVrf.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount{}
        labelSummaryVrf.OwnerCount = append(labelSummaryVrf.OwnerCount, child)
        return &labelSummaryVrf.OwnerCount[len(labelSummaryVrf.OwnerCount)-1]
    }
    return nil
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummaryVrf.OwnerCount {
        children[labelSummaryVrf.OwnerCount[i].GetSegmentPath()] = &labelSummaryVrf.OwnerCount[i]
    }
    return children
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = labelSummaryVrf.VrfName
    leafs["vrf-name-xr"] = labelSummaryVrf.VrfNameXr
    leafs["total-labels"] = labelSummaryVrf.TotalLabels
    leafs["rsi-connected"] = labelSummaryVrf.RsiConnected
    return leafs
}

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetYangName() string { return "label-summary-vrf" }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) SetParent(parent types.Entity) { labelSummaryVrf.parent = parent }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetParent() types.Entity { return labelSummaryVrf.parent }

func (labelSummaryVrf *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf) GetParentYangName() string { return "label-summary-vrfs" }

// MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
// Owner counts
type MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetFilter() yfilter.YFilter { return ownerCount.YFilter }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) SetFilter(yf yfilter.YFilter) { ownerCount.YFilter = yf }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetGoName(yname string) string {
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "number-of-labels" { return "NumberOfLabels" }
    return ""
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetSegmentPath() string {
    return "owner-count"
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-type"] = ownerCount.ApplicationType
    leafs["application-name"] = ownerCount.ApplicationName
    leafs["application-role-primary"] = ownerCount.ApplicationRolePrimary
    leafs["application-instance"] = ownerCount.ApplicationInstance
    leafs["number-of-labels"] = ownerCount.NumberOfLabels
    return leafs
}

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetBundleName() string { return "cisco_ios_xr" }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetYangName() string { return "owner-count" }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) SetParent(parent types.Entity) { ownerCount.parent = parent }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetParent() types.Entity { return ownerCount.parent }

func (ownerCount *MplsLsdNodes_MplsLsdNode_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetParentYangName() string { return "label-summary-vrf" }

// MplsLsdNodes_MplsLsdNode_LabelRange
// Label range
type MplsLsdNodes_MplsLsdNode_LabelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MinDynamicLabelValue interface{}

    // Maximum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MaxDynamicLabelValue interface{}

    // Minimum static label value. The type is interface{} with range:
    // 0..4294967295.
    MinStaticLabelValue interface{}

    // Maximum static label value. The type is interface{} with range:
    // 0..4294967295.
    MaxStaticLabelValue interface{}
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetFilter() yfilter.YFilter { return labelRange.YFilter }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) SetFilter(yf yfilter.YFilter) { labelRange.YFilter = yf }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetGoName(yname string) string {
    if yname == "min-dynamic-label-value" { return "MinDynamicLabelValue" }
    if yname == "max-dynamic-label-value" { return "MaxDynamicLabelValue" }
    if yname == "min-static-label-value" { return "MinStaticLabelValue" }
    if yname == "max-static-label-value" { return "MaxStaticLabelValue" }
    return ""
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetSegmentPath() string {
    return "label-range"
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-dynamic-label-value"] = labelRange.MinDynamicLabelValue
    leafs["max-dynamic-label-value"] = labelRange.MaxDynamicLabelValue
    leafs["min-static-label-value"] = labelRange.MinStaticLabelValue
    leafs["max-static-label-value"] = labelRange.MaxStaticLabelValue
    return leafs
}

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetBundleName() string { return "cisco_ios_xr" }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetYangName() string { return "label-range" }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) SetParent(parent types.Entity) { labelRange.parent = parent }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetParent() types.Entity { return labelRange.parent }

func (labelRange *MplsLsdNodes_MplsLsdNode_LabelRange) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs
// Rewrite Summary by VRF
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite summary by VRF VRF-name. The type is slice of
    // MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf.
    RewriteSummaryVrf []MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetFilter() yfilter.YFilter { return rewriteSummaryVrfs.YFilter }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) SetFilter(yf yfilter.YFilter) { rewriteSummaryVrfs.YFilter = yf }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetGoName(yname string) string {
    if yname == "rewrite-summary-vrf" { return "RewriteSummaryVrf" }
    return ""
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetSegmentPath() string {
    return "rewrite-summary-vrfs"
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-summary-vrf" {
        for _, c := range rewriteSummaryVrfs.RewriteSummaryVrf {
            if rewriteSummaryVrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf{}
        rewriteSummaryVrfs.RewriteSummaryVrf = append(rewriteSummaryVrfs.RewriteSummaryVrf, child)
        return &rewriteSummaryVrfs.RewriteSummaryVrf[len(rewriteSummaryVrfs.RewriteSummaryVrf)-1]
    }
    return nil
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteSummaryVrfs.RewriteSummaryVrf {
        children[rewriteSummaryVrfs.RewriteSummaryVrf[i].GetSegmentPath()] = &rewriteSummaryVrfs.RewriteSummaryVrf[i]
    }
    return children
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetYangName() string { return "rewrite-summary-vrfs" }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) SetParent(parent types.Entity) { rewriteSummaryVrfs.parent = parent }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetParent() types.Entity { return rewriteSummaryVrfs.parent }

func (rewriteSummaryVrfs *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf
// Rewrite summary by VRF VRF-name
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4Fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6Fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4RpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6RpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetFilter() yfilter.YFilter { return rewriteSummaryVrf.YFilter }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) SetFilter(yf yfilter.YFilter) { rewriteSummaryVrf.YFilter = yf }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "num-label-fpi" { return "NumLabelFpi" }
    if yname == "num-tefpi" { return "NumTefpi" }
    if yname == "num-ipv4fpi" { return "NumIpv4Fpi" }
    if yname == "num-ipv6fpi" { return "NumIpv6Fpi" }
    if yname == "num-pw-list-tefpi" { return "NumPwListTefpi" }
    if yname == "num-dmtctefpi" { return "NumDmtctefpi" }
    if yname == "num-rewrite" { return "NumRewrite" }
    if yname == "total-forward-update" { return "TotalForwardUpdate" }
    if yname == "total-forwad-update-message" { return "TotalForwadUpdateMessage" }
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-t-ev4-paths" { return "TotalTEv4Paths" }
    if yname == "total-te-head-paths" { return "TotalTeHeadPaths" }
    if yname == "total-pw-paths" { return "TotalPwPaths" }
    if yname == "total-ip-sub-paths" { return "TotalIpSubPaths" }
    if yname == "total-ipv4rpf-neighbors" { return "TotalIpv4RpfNeighbors" }
    if yname == "total-ipv6rpf-neighbors" { return "TotalIpv6RpfNeighbors" }
    if yname == "num-rewrite-rpf-neighbors" { return "NumRewriteRpfNeighbors" }
    if yname == "total-dmtc-intf" { return "TotalDmtcIntf" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "ipv4-paths" { return "Ipv4Paths" }
    if yname == "ipv6-paths" { return "Ipv6Paths" }
    return ""
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetSegmentPath() string {
    return "rewrite-summary-vrf" + "[vrf-name='" + fmt.Sprintf("%v", rewriteSummaryVrf.VrfName) + "']"
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-paths" {
        return &rewriteSummaryVrf.Ipv4Paths
    }
    if childYangName == "ipv6-paths" {
        return &rewriteSummaryVrf.Ipv6Paths
    }
    return nil
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-paths"] = &rewriteSummaryVrf.Ipv4Paths
    children["ipv6-paths"] = &rewriteSummaryVrf.Ipv6Paths
    return children
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = rewriteSummaryVrf.VrfName
    leafs["num-label-fpi"] = rewriteSummaryVrf.NumLabelFpi
    leafs["num-tefpi"] = rewriteSummaryVrf.NumTefpi
    leafs["num-ipv4fpi"] = rewriteSummaryVrf.NumIpv4Fpi
    leafs["num-ipv6fpi"] = rewriteSummaryVrf.NumIpv6Fpi
    leafs["num-pw-list-tefpi"] = rewriteSummaryVrf.NumPwListTefpi
    leafs["num-dmtctefpi"] = rewriteSummaryVrf.NumDmtctefpi
    leafs["num-rewrite"] = rewriteSummaryVrf.NumRewrite
    leafs["total-forward-update"] = rewriteSummaryVrf.TotalForwardUpdate
    leafs["total-forwad-update-message"] = rewriteSummaryVrf.TotalForwadUpdateMessage
    leafs["total-paths"] = rewriteSummaryVrf.TotalPaths
    leafs["total-t-ev4-paths"] = rewriteSummaryVrf.TotalTEv4Paths
    leafs["total-te-head-paths"] = rewriteSummaryVrf.TotalTeHeadPaths
    leafs["total-pw-paths"] = rewriteSummaryVrf.TotalPwPaths
    leafs["total-ip-sub-paths"] = rewriteSummaryVrf.TotalIpSubPaths
    leafs["total-ipv4rpf-neighbors"] = rewriteSummaryVrf.TotalIpv4RpfNeighbors
    leafs["total-ipv6rpf-neighbors"] = rewriteSummaryVrf.TotalIpv6RpfNeighbors
    leafs["num-rewrite-rpf-neighbors"] = rewriteSummaryVrf.NumRewriteRpfNeighbors
    leafs["total-dmtc-intf"] = rewriteSummaryVrf.TotalDmtcIntf
    leafs["vrf-name-xr"] = rewriteSummaryVrf.VrfNameXr
    return leafs
}

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetYangName() string { return "rewrite-summary-vrf" }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) SetParent(parent types.Entity) { rewriteSummaryVrf.parent = parent }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetParent() types.Entity { return rewriteSummaryVrf.parent }

func (rewriteSummaryVrf *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf) GetParentYangName() string { return "rewrite-summary-vrfs" }

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths
// Count for IPv4 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetFilter() yfilter.YFilter { return ipv4Paths.YFilter }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) SetFilter(yf yfilter.YFilter) { ipv4Paths.YFilter = yf }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetSegmentPath() string {
    return "ipv4-paths"
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv4Paths.TotalPaths
    leafs["total-backup-paths"] = ipv4Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv4Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv4Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv4Paths.TotalPopLkupPaths
    return leafs
}

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetYangName() string { return "ipv4-paths" }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) SetParent(parent types.Entity) { ipv4Paths.parent = parent }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetParent() types.Entity { return ipv4Paths.parent }

func (ipv4Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetParentYangName() string { return "rewrite-summary-vrf" }

// MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
// Count for IPv6 paths
type MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetFilter() yfilter.YFilter { return ipv6Paths.YFilter }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) SetFilter(yf yfilter.YFilter) { ipv6Paths.YFilter = yf }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetSegmentPath() string {
    return "ipv6-paths"
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv6Paths.TotalPaths
    leafs["total-backup-paths"] = ipv6Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv6Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv6Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv6Paths.TotalPopLkupPaths
    return leafs
}

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetYangName() string { return "ipv6-paths" }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) SetParent(parent types.Entity) { ipv6Paths.parent = parent }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetParent() types.Entity { return ipv6Paths.parent }

func (ipv6Paths *MplsLsdNodes_MplsLsdNode_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetParentYangName() string { return "rewrite-summary-vrf" }

// MplsLsdNodes_MplsLsdNode_Interfaces
// Table of MPLS interfaces
type MplsLsdNodes_MplsLsdNode_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Interfaces_Interface.
    Interface []MplsLsdNodes_MplsLsdNode_Interfaces_Interface
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *MplsLsdNodes_MplsLsdNode_Interfaces) GetParentYangName() string { return "mpls-lsd-node" }

// MplsLsdNodes_MplsLsdNode_Interfaces_Interface
// Data for MPLS interface
type MplsLsdNodes_MplsLsdNode_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Interface interface{}

    // Interface state. The type is MgmtLsdIntfState.
    InterfaceState interface{}

    // Application Owner. The type is slice of
    // MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner.
    ApplicationOwner []MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface" { return "Interface" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-owner" {
        for _, c := range self.ApplicationOwner {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner{}
        self.ApplicationOwner = append(self.ApplicationOwner, child)
        return &self.ApplicationOwner[len(self.ApplicationOwner)-1]
    }
    return nil
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range self.ApplicationOwner {
        children[self.ApplicationOwner[i].GetSegmentPath()] = &self.ApplicationOwner[i]
    }
    return children
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface"] = self.Interface
    leafs["interface-state"] = self.InterfaceState
    return leafs
}

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *MplsLsdNodes_MplsLsdNode_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner
// Application Owner
type MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsdNodes_MplsLsdNode_Interfaces_Interface_ApplicationOwner) GetParentYangName() string { return "interface" }

// MplsLsd
// mpls lsd
type MplsLsd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of MPLS clients using LSD.
    Clients MplsLsd_Clients

    // Dynamic label range.
    LabelSummary MplsLsd_LabelSummary

    // Table of labels.
    Labels MplsLsd_Labels

    // FRR database.
    FrrDatabase MplsLsd_FrrDatabase

    // Table of rewrites.
    Rewrite MplsLsd_Rewrite

    // Rewrite Summary .
    RewriteSummary MplsLsd_RewriteSummary

    // Table of MPLS applications using LSD.
    Applications MplsLsd_Applications

    // SRLB Inconsistencies.
    SrlbInconsistency MplsLsd_SrlbInconsistency

    // Dynamic label range summary by VRF.
    LabelSummaryVrfs MplsLsd_LabelSummaryVrfs

    // Label range.
    LabelRange MplsLsd_LabelRange

    // Rewrite Summary by VRF.
    RewriteSummaryVrfs MplsLsd_RewriteSummaryVrfs

    // Table of MPLS interfaces.
    Interfaces MplsLsd_Interfaces
}

func (mplsLsd *MplsLsd) GetFilter() yfilter.YFilter { return mplsLsd.YFilter }

func (mplsLsd *MplsLsd) SetFilter(yf yfilter.YFilter) { mplsLsd.YFilter = yf }

func (mplsLsd *MplsLsd) GetGoName(yname string) string {
    if yname == "clients" { return "Clients" }
    if yname == "label-summary" { return "LabelSummary" }
    if yname == "labels" { return "Labels" }
    if yname == "frr-database" { return "FrrDatabase" }
    if yname == "rewrite" { return "Rewrite" }
    if yname == "rewrite-summary" { return "RewriteSummary" }
    if yname == "applications" { return "Applications" }
    if yname == "srlb-inconsistency" { return "SrlbInconsistency" }
    if yname == "label-summary-vrfs" { return "LabelSummaryVrfs" }
    if yname == "label-range" { return "LabelRange" }
    if yname == "rewrite-summary-vrfs" { return "RewriteSummaryVrfs" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (mplsLsd *MplsLsd) GetSegmentPath() string {
    return "Cisco-IOS-XR-mpls-lsd-oper:mpls-lsd"
}

func (mplsLsd *MplsLsd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clients" {
        return &mplsLsd.Clients
    }
    if childYangName == "label-summary" {
        return &mplsLsd.LabelSummary
    }
    if childYangName == "labels" {
        return &mplsLsd.Labels
    }
    if childYangName == "frr-database" {
        return &mplsLsd.FrrDatabase
    }
    if childYangName == "rewrite" {
        return &mplsLsd.Rewrite
    }
    if childYangName == "rewrite-summary" {
        return &mplsLsd.RewriteSummary
    }
    if childYangName == "applications" {
        return &mplsLsd.Applications
    }
    if childYangName == "srlb-inconsistency" {
        return &mplsLsd.SrlbInconsistency
    }
    if childYangName == "label-summary-vrfs" {
        return &mplsLsd.LabelSummaryVrfs
    }
    if childYangName == "label-range" {
        return &mplsLsd.LabelRange
    }
    if childYangName == "rewrite-summary-vrfs" {
        return &mplsLsd.RewriteSummaryVrfs
    }
    if childYangName == "interfaces" {
        return &mplsLsd.Interfaces
    }
    return nil
}

func (mplsLsd *MplsLsd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clients"] = &mplsLsd.Clients
    children["label-summary"] = &mplsLsd.LabelSummary
    children["labels"] = &mplsLsd.Labels
    children["frr-database"] = &mplsLsd.FrrDatabase
    children["rewrite"] = &mplsLsd.Rewrite
    children["rewrite-summary"] = &mplsLsd.RewriteSummary
    children["applications"] = &mplsLsd.Applications
    children["srlb-inconsistency"] = &mplsLsd.SrlbInconsistency
    children["label-summary-vrfs"] = &mplsLsd.LabelSummaryVrfs
    children["label-range"] = &mplsLsd.LabelRange
    children["rewrite-summary-vrfs"] = &mplsLsd.RewriteSummaryVrfs
    children["interfaces"] = &mplsLsd.Interfaces
    return children
}

func (mplsLsd *MplsLsd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mplsLsd *MplsLsd) GetBundleName() string { return "cisco_ios_xr" }

func (mplsLsd *MplsLsd) GetYangName() string { return "mpls-lsd" }

func (mplsLsd *MplsLsd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsLsd *MplsLsd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsLsd *MplsLsd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsLsd *MplsLsd) SetParent(parent types.Entity) { mplsLsd.parent = parent }

func (mplsLsd *MplsLsd) GetParent() types.Entity { return mplsLsd.parent }

func (mplsLsd *MplsLsd) GetParentYangName() string { return "Cisco-IOS-XR-mpls-lsd-oper" }

// MplsLsd_Clients
// Table of MPLS clients using LSD
type MplsLsd_Clients struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS client using LSD. The type is slice of
    // MplsLsd_Clients_Client.
    Client []MplsLsd_Clients_Client
}

func (clients *MplsLsd_Clients) GetFilter() yfilter.YFilter { return clients.YFilter }

func (clients *MplsLsd_Clients) SetFilter(yf yfilter.YFilter) { clients.YFilter = yf }

func (clients *MplsLsd_Clients) GetGoName(yname string) string {
    if yname == "client" { return "Client" }
    return ""
}

func (clients *MplsLsd_Clients) GetSegmentPath() string {
    return "clients"
}

func (clients *MplsLsd_Clients) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client" {
        for _, c := range clients.Client {
            if clients.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Clients_Client{}
        clients.Client = append(clients.Client, child)
        return &clients.Client[len(clients.Client)-1]
    }
    return nil
}

func (clients *MplsLsd_Clients) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clients.Client {
        children[clients.Client[i].GetSegmentPath()] = &clients.Client[i]
    }
    return children
}

func (clients *MplsLsd_Clients) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clients *MplsLsd_Clients) GetBundleName() string { return "cisco_ios_xr" }

func (clients *MplsLsd_Clients) GetYangName() string { return "clients" }

func (clients *MplsLsd_Clients) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clients *MplsLsd_Clients) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clients *MplsLsd_Clients) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clients *MplsLsd_Clients) SetParent(parent types.Entity) { clients.parent = parent }

func (clients *MplsLsd_Clients) GetParent() types.Entity { return clients.parent }

func (clients *MplsLsd_Clients) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_Clients_Client
// Data for MPLS client using LSD
type MplsLsd_Clients_Client struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Client Instance name in the form of    
    // 'Application-<client_name>' or      'BCDL_Agent-<index:parent_index>'. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ClientName interface{}

    // Client Index Value. The type is interface{} with range: 0..4294967295.
    ClientIndex interface{}

    // Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Client union.
    ClientUnion MplsLsd_Clients_Client_ClientUnion
}

func (client *MplsLsd_Clients_Client) GetFilter() yfilter.YFilter { return client.YFilter }

func (client *MplsLsd_Clients_Client) SetFilter(yf yfilter.YFilter) { client.YFilter = yf }

func (client *MplsLsd_Clients_Client) GetGoName(yname string) string {
    if yname == "client-name" { return "ClientName" }
    if yname == "client-index" { return "ClientIndex" }
    if yname == "node-id" { return "NodeId" }
    if yname == "client-union" { return "ClientUnion" }
    return ""
}

func (client *MplsLsd_Clients_Client) GetSegmentPath() string {
    return "client" + "[client-name='" + fmt.Sprintf("%v", client.ClientName) + "']"
}

func (client *MplsLsd_Clients_Client) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client-union" {
        return &client.ClientUnion
    }
    return nil
}

func (client *MplsLsd_Clients_Client) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["client-union"] = &client.ClientUnion
    return children
}

func (client *MplsLsd_Clients_Client) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["client-name"] = client.ClientName
    leafs["client-index"] = client.ClientIndex
    leafs["node-id"] = client.NodeId
    return leafs
}

func (client *MplsLsd_Clients_Client) GetBundleName() string { return "cisco_ios_xr" }

func (client *MplsLsd_Clients_Client) GetYangName() string { return "client" }

func (client *MplsLsd_Clients_Client) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (client *MplsLsd_Clients_Client) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (client *MplsLsd_Clients_Client) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (client *MplsLsd_Clients_Client) SetParent(parent types.Entity) { client.parent = parent }

func (client *MplsLsd_Clients_Client) GetParent() types.Entity { return client.parent }

func (client *MplsLsd_Clients_Client) GetParentYangName() string { return "clients" }

// MplsLsd_Clients_Client_ClientUnion
// Client union
type MplsLsd_Clients_Client_ClientUnion struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSDClientType. The type is MgmtLsdClient.
    LsdClientType interface{}

    // Application client.
    Application MplsLsd_Clients_Client_ClientUnion_Application

    // BCDL agent client.
    BcdlAgent MplsLsd_Clients_Client_ClientUnion_BcdlAgent
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetFilter() yfilter.YFilter { return clientUnion.YFilter }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) SetFilter(yf yfilter.YFilter) { clientUnion.YFilter = yf }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetGoName(yname string) string {
    if yname == "lsd-client-type" { return "LsdClientType" }
    if yname == "application" { return "Application" }
    if yname == "bcdl-agent" { return "BcdlAgent" }
    return ""
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetSegmentPath() string {
    return "client-union"
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application" {
        return &clientUnion.Application
    }
    if childYangName == "bcdl-agent" {
        return &clientUnion.BcdlAgent
    }
    return nil
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application"] = &clientUnion.Application
    children["bcdl-agent"] = &clientUnion.BcdlAgent
    return children
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsd-client-type"] = clientUnion.LsdClientType
    return leafs
}

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetBundleName() string { return "cisco_ios_xr" }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetYangName() string { return "client-union" }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) SetParent(parent types.Entity) { clientUnion.parent = parent }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetParent() types.Entity { return clientUnion.parent }

func (clientUnion *MplsLsd_Clients_Client_ClientUnion) GetParentYangName() string { return "client" }

// MplsLsd_Clients_Client_ClientUnion_Application
// Application client
type MplsLsd_Clients_Client_ClientUnion_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    return ""
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetSegmentPath() string {
    return "application"
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = application.ApplicationName
    leafs["application-type"] = application.ApplicationType
    leafs["application-instance"] = application.ApplicationInstance
    leafs["application-role-primary"] = application.ApplicationRolePrimary
    return leafs
}

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetYangName() string { return "application" }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetParent() types.Entity { return application.parent }

func (application *MplsLsd_Clients_Client_ClientUnion_Application) GetParentYangName() string { return "client-union" }

// MplsLsd_Clients_Client_ClientUnion_BcdlAgent
// BCDL agent client
type MplsLsd_Clients_Client_ClientUnion_BcdlAgent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BCDL Agent client connection index. The type is interface{} with range:
    // -2147483648..2147483647.
    ClientConnIndex interface{}

    // BCDL Agent parent client connection index. The type is interface{} with
    // range: -2147483648..2147483647.
    ParentClientConnIndex interface{}
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetFilter() yfilter.YFilter { return bcdlAgent.YFilter }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) SetFilter(yf yfilter.YFilter) { bcdlAgent.YFilter = yf }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetGoName(yname string) string {
    if yname == "client-conn-index" { return "ClientConnIndex" }
    if yname == "parent-client-conn-index" { return "ParentClientConnIndex" }
    return ""
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetSegmentPath() string {
    return "bcdl-agent"
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["client-conn-index"] = bcdlAgent.ClientConnIndex
    leafs["parent-client-conn-index"] = bcdlAgent.ParentClientConnIndex
    return leafs
}

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetBundleName() string { return "cisco_ios_xr" }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetYangName() string { return "bcdl-agent" }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) SetParent(parent types.Entity) { bcdlAgent.parent = parent }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetParent() types.Entity { return bcdlAgent.parent }

func (bcdlAgent *MplsLsd_Clients_Client_ClientUnion_BcdlAgent) GetParentYangName() string { return "client-union" }

// MplsLsd_LabelSummary
// Dynamic label range
type MplsLsd_LabelSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of MplsLsd_LabelSummary_OwnerCount.
    OwnerCount []MplsLsd_LabelSummary_OwnerCount
}

func (labelSummary *MplsLsd_LabelSummary) GetFilter() yfilter.YFilter { return labelSummary.YFilter }

func (labelSummary *MplsLsd_LabelSummary) SetFilter(yf yfilter.YFilter) { labelSummary.YFilter = yf }

func (labelSummary *MplsLsd_LabelSummary) GetGoName(yname string) string {
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "total-labels" { return "TotalLabels" }
    if yname == "rsi-connected" { return "RsiConnected" }
    if yname == "owner-count" { return "OwnerCount" }
    return ""
}

func (labelSummary *MplsLsd_LabelSummary) GetSegmentPath() string {
    return "label-summary"
}

func (labelSummary *MplsLsd_LabelSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner-count" {
        for _, c := range labelSummary.OwnerCount {
            if labelSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_LabelSummary_OwnerCount{}
        labelSummary.OwnerCount = append(labelSummary.OwnerCount, child)
        return &labelSummary.OwnerCount[len(labelSummary.OwnerCount)-1]
    }
    return nil
}

func (labelSummary *MplsLsd_LabelSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummary.OwnerCount {
        children[labelSummary.OwnerCount[i].GetSegmentPath()] = &labelSummary.OwnerCount[i]
    }
    return children
}

func (labelSummary *MplsLsd_LabelSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name-xr"] = labelSummary.VrfNameXr
    leafs["total-labels"] = labelSummary.TotalLabels
    leafs["rsi-connected"] = labelSummary.RsiConnected
    return leafs
}

func (labelSummary *MplsLsd_LabelSummary) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummary *MplsLsd_LabelSummary) GetYangName() string { return "label-summary" }

func (labelSummary *MplsLsd_LabelSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummary *MplsLsd_LabelSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummary *MplsLsd_LabelSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummary *MplsLsd_LabelSummary) SetParent(parent types.Entity) { labelSummary.parent = parent }

func (labelSummary *MplsLsd_LabelSummary) GetParent() types.Entity { return labelSummary.parent }

func (labelSummary *MplsLsd_LabelSummary) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_LabelSummary_OwnerCount
// Owner counts
type MplsLsd_LabelSummary_OwnerCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetFilter() yfilter.YFilter { return ownerCount.YFilter }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) SetFilter(yf yfilter.YFilter) { ownerCount.YFilter = yf }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetGoName(yname string) string {
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "number-of-labels" { return "NumberOfLabels" }
    return ""
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetSegmentPath() string {
    return "owner-count"
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-type"] = ownerCount.ApplicationType
    leafs["application-name"] = ownerCount.ApplicationName
    leafs["application-role-primary"] = ownerCount.ApplicationRolePrimary
    leafs["application-instance"] = ownerCount.ApplicationInstance
    leafs["number-of-labels"] = ownerCount.NumberOfLabels
    return leafs
}

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetBundleName() string { return "cisco_ios_xr" }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetYangName() string { return "owner-count" }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) SetParent(parent types.Entity) { ownerCount.parent = parent }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetParent() types.Entity { return ownerCount.parent }

func (ownerCount *MplsLsd_LabelSummary_OwnerCount) GetParentYangName() string { return "label-summary" }

// MplsLsd_Labels
// Table of labels
type MplsLsd_Labels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for label. The type is slice of MplsLsd_Labels_Label.
    Label []MplsLsd_Labels_Label
}

func (labels *MplsLsd_Labels) GetFilter() yfilter.YFilter { return labels.YFilter }

func (labels *MplsLsd_Labels) SetFilter(yf yfilter.YFilter) { labels.YFilter = yf }

func (labels *MplsLsd_Labels) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    return ""
}

func (labels *MplsLsd_Labels) GetSegmentPath() string {
    return "labels"
}

func (labels *MplsLsd_Labels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range labels.Label {
            if labels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Labels_Label{}
        labels.Label = append(labels.Label, child)
        return &labels.Label[len(labels.Label)-1]
    }
    return nil
}

func (labels *MplsLsd_Labels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labels.Label {
        children[labels.Label[i].GetSegmentPath()] = &labels.Label[i]
    }
    return children
}

func (labels *MplsLsd_Labels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labels *MplsLsd_Labels) GetBundleName() string { return "cisco_ios_xr" }

func (labels *MplsLsd_Labels) GetYangName() string { return "labels" }

func (labels *MplsLsd_Labels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labels *MplsLsd_Labels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labels *MplsLsd_Labels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labels *MplsLsd_Labels) SetParent(parent types.Entity) { labels.parent = parent }

func (labels *MplsLsd_Labels) GetParent() types.Entity { return labels.parent }

func (labels *MplsLsd_Labels) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_Labels_Label
// Data for label
type MplsLsd_Labels_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    LabelId interface{}

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Rewrite bound to label. The type is interface{} with range:
    // -2147483648..2147483647.
    RewriteIsBound interface{}

    // Rewrite owner. The type is interface{} with range: 0..4294967295.
    RewriteOwners interface{}

    // RSI connected. The type is interface{} with range: -2147483648..2147483647.
    RsIconnected interface{}

    // VRF Name. The type is string.
    VrfName interface{}

    // Label context.
    LabelContext MplsLsd_Labels_Label_LabelContext

    // Application owner. The type is slice of
    // MplsLsd_Labels_Label_ApplicationOwner.
    ApplicationOwner []MplsLsd_Labels_Label_ApplicationOwner
}

func (label *MplsLsd_Labels_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Labels_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Labels_Label) GetGoName(yname string) string {
    if yname == "label-id" { return "LabelId" }
    if yname == "label" { return "Label" }
    if yname == "rewrite-is-bound" { return "RewriteIsBound" }
    if yname == "rewrite-owners" { return "RewriteOwners" }
    if yname == "rs-iconnected" { return "RsIconnected" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (label *MplsLsd_Labels_Label) GetSegmentPath() string {
    return "label" + "[label-id='" + fmt.Sprintf("%v", label.LabelId) + "']"
}

func (label *MplsLsd_Labels_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &label.LabelContext
    }
    if childYangName == "application-owner" {
        for _, c := range label.ApplicationOwner {
            if label.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Labels_Label_ApplicationOwner{}
        label.ApplicationOwner = append(label.ApplicationOwner, child)
        return &label.ApplicationOwner[len(label.ApplicationOwner)-1]
    }
    return nil
}

func (label *MplsLsd_Labels_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &label.LabelContext
    for i := range label.ApplicationOwner {
        children[label.ApplicationOwner[i].GetSegmentPath()] = &label.ApplicationOwner[i]
    }
    return children
}

func (label *MplsLsd_Labels_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-id"] = label.LabelId
    leafs["label"] = label.Label
    leafs["rewrite-is-bound"] = label.RewriteIsBound
    leafs["rewrite-owners"] = label.RewriteOwners
    leafs["rs-iconnected"] = label.RsIconnected
    leafs["vrf-name"] = label.VrfName
    return leafs
}

func (label *MplsLsd_Labels_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Labels_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Labels_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Labels_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Labels_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Labels_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Labels_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Labels_Label) GetParentYangName() string { return "labels" }

// MplsLsd_Labels_Label_LabelContext
// Label context
type MplsLsd_Labels_Label_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application opaque data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ApplicationData interface{}

    // Label Key.
    Key MplsLsd_Labels_Label_LabelContext_Key
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsd_Labels_Label_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetGoName(yname string) string {
    if yname == "application-data" { return "ApplicationData" }
    if yname == "key" { return "Key" }
    return ""
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "key" {
        return &labelContext.Key
    }
    return nil
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["key"] = &labelContext.Key
    return children
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-data"] = labelContext.ApplicationData
    return leafs
}

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsd_Labels_Label_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsd_Labels_Label_LabelContext) GetParentYangName() string { return "label" }

// MplsLsd_Labels_Label_LabelContext_Key
// Label Key
type MplsLsd_Labels_Label_LabelContext_Key struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Labels_Label_LabelContext_Key_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Labels_Label_LabelContext_Key_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Labels_Label_LabelContext_Key_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Labels_Label_LabelContext_Key_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Labels_Label_LabelContext_Key_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Labels_Label_LabelContext_Key_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetFilter() yfilter.YFilter { return key.YFilter }

func (key *MplsLsd_Labels_Label_LabelContext_Key) SetFilter(yf yfilter.YFilter) { key.YFilter = yf }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetSegmentPath() string {
    return "key"
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &key.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &key.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &key.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &key.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &key.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &key.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &key.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &key.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &key.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &key.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &key.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &key.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &key.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &key.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &key.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &key.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &key.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &key.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &key.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &key.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &key.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &key.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &key.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &key.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &key.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &key.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &key.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &key.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &key.LabelBlockSrlbData
    }
    return nil
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &key.Ipv4Data
    children["ipv6-data"] = &key.Ipv6Data
    children["tev4-data"] = &key.Tev4Data
    children["ipv4l3vpn-data"] = &key.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &key.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &key.VrfL3VpnData
    children["cev4l3vpn-data"] = &key.Cev4L3VpnData
    children["cev6l3vpn-data"] = &key.Cev6L3VpnData
    children["pseudowire-data"] = &key.PseudowireData
    children["label-block-data"] = &key.LabelBlockData
    children["ip-sub-data"] = &key.IpSubData
    children["tev4p2mp-data"] = &key.Tev4P2MpData
    children["mld-pv4-data"] = &key.MldPv4Data
    children["pseudowire-head-end-data"] = &key.PseudowireHeadEndData
    children["tp-data"] = &key.TpData
    children["generic-routing-encapsulation"] = &key.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &key.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &key.EvpnData
    children["ipv4blb-data"] = &key.Ipv4BlbData
    children["ipv6blb-data"] = &key.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &key.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &key.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &key.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &key.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &key.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &key.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &key.LabelBlockSrgbData
    children["te-binding"] = &key.TeBinding
    children["label-block-srlb-data"] = &key.LabelBlockSrlbData
    return children
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = key.LabelContextType
    return leafs
}

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetBundleName() string { return "cisco_ios_xr" }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetYangName() string { return "key" }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (key *MplsLsd_Labels_Label_LabelContext_Key) SetParent(parent types.Entity) { key.parent = parent }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetParent() types.Entity { return key.parent }

func (key *MplsLsd_Labels_Label_LabelContext_Key) GetParentYangName() string { return "label-context" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data
// IPv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv4Data) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data
// IPv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Labels_Label_LabelContext_Key_Ipv6Data) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Tev4Data
// TEv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Labels_Label_LabelContext_Key_Tev4Data) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4L3VpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6L3VpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData
// L3VPN VRF label context
type MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsd_Labels_Label_LabelContext_Key_VrfL3VpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev4L3VpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsd_Labels_Label_LabelContext_Key_Cev6L3VpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_PseudowireData
// Pseudowire label context
type MplsLsd_Labels_Label_LabelContext_Key_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData
// Label block context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_IpSubData
// IP Subscriber context
type MplsLsd_Labels_Label_LabelContext_Key_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Labels_Label_LabelContext_Key_IpSubData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData
// TEv4 P2MP context
type MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsd_Labels_Label_LabelContext_Key_Tev4P2MpData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsd_Labels_Label_LabelContext_Key_MldPv4Data) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Labels_Label_LabelContext_Key_PseudowireHeadEndData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_TpData
// TP context
type MplsLsd_Labels_Label_LabelContext_Key_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsd_Labels_Label_LabelContext_Key_TpData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_GenericRoutingEncapsulation) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Labels_Label_LabelContext_Key_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_EvpnData
// EVPN context
type MplsLsd_Labels_Label_LabelContext_Key_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsd_Labels_Label_LabelContext_Key_EvpnData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData
// BFD BLB label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv4BlbData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData
// BFD BLB label context
type MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsd_Labels_Label_LabelContext_Key_Ipv6BlbData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMiPmsiData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsd_Labels_Label_LabelContext_Key_PiMsPmsiData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsd_Labels_Label_LabelContext_Key_NextHopSetL3Vpn) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsd_Labels_Label_LabelContext_Key_SrPrefixSegment) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv4) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsd_Labels_Label_LabelContext_Key_SrAdjSegmentIpv6) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrgbData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Labels_Label_LabelContext_Key_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsd_Labels_Label_LabelContext_Key_TeBinding) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsd_Labels_Label_LabelContext_Key_LabelBlockSrlbData) GetParentYangName() string { return "key" }

// MplsLsd_Labels_Label_ApplicationOwner
// Application owner
type MplsLsd_Labels_Label_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Labels_Label_ApplicationOwner) GetParentYangName() string { return "label" }

// MplsLsd_FrrDatabase
// FRR database
type MplsLsd_FrrDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of FRR database entries - Tunnel midpoints.
    TunnelMidpoints MplsLsd_FrrDatabase_TunnelMidpoints

    // Table of FRR database entries - Tunnel heads.
    TunnelHeads MplsLsd_FrrDatabase_TunnelHeads

    // Summary data for FRR database entry - Tunnel head.
    TunnelHeadSummary MplsLsd_FrrDatabase_TunnelHeadSummary

    // Sumary table of Protected Interfaces.
    SummaryProtectedInterfaces MplsLsd_FrrDatabase_SummaryProtectedInterfaces

    // Summary data for FRR database entry.
    TunnelSummary MplsLsd_FrrDatabase_TunnelSummary

    // Summary data for FRR database entry - Tunnel midpoint.
    TunnelMidpointSummary MplsLsd_FrrDatabase_TunnelMidpointSummary
}

func (frrDatabase *MplsLsd_FrrDatabase) GetFilter() yfilter.YFilter { return frrDatabase.YFilter }

func (frrDatabase *MplsLsd_FrrDatabase) SetFilter(yf yfilter.YFilter) { frrDatabase.YFilter = yf }

func (frrDatabase *MplsLsd_FrrDatabase) GetGoName(yname string) string {
    if yname == "tunnel-midpoints" { return "TunnelMidpoints" }
    if yname == "tunnel-heads" { return "TunnelHeads" }
    if yname == "tunnel-head-summary" { return "TunnelHeadSummary" }
    if yname == "summary-protected-interfaces" { return "SummaryProtectedInterfaces" }
    if yname == "tunnel-summary" { return "TunnelSummary" }
    if yname == "tunnel-midpoint-summary" { return "TunnelMidpointSummary" }
    return ""
}

func (frrDatabase *MplsLsd_FrrDatabase) GetSegmentPath() string {
    return "frr-database"
}

func (frrDatabase *MplsLsd_FrrDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-midpoints" {
        return &frrDatabase.TunnelMidpoints
    }
    if childYangName == "tunnel-heads" {
        return &frrDatabase.TunnelHeads
    }
    if childYangName == "tunnel-head-summary" {
        return &frrDatabase.TunnelHeadSummary
    }
    if childYangName == "summary-protected-interfaces" {
        return &frrDatabase.SummaryProtectedInterfaces
    }
    if childYangName == "tunnel-summary" {
        return &frrDatabase.TunnelSummary
    }
    if childYangName == "tunnel-midpoint-summary" {
        return &frrDatabase.TunnelMidpointSummary
    }
    return nil
}

func (frrDatabase *MplsLsd_FrrDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["tunnel-midpoints"] = &frrDatabase.TunnelMidpoints
    children["tunnel-heads"] = &frrDatabase.TunnelHeads
    children["tunnel-head-summary"] = &frrDatabase.TunnelHeadSummary
    children["summary-protected-interfaces"] = &frrDatabase.SummaryProtectedInterfaces
    children["tunnel-summary"] = &frrDatabase.TunnelSummary
    children["tunnel-midpoint-summary"] = &frrDatabase.TunnelMidpointSummary
    return children
}

func (frrDatabase *MplsLsd_FrrDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrDatabase *MplsLsd_FrrDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (frrDatabase *MplsLsd_FrrDatabase) GetYangName() string { return "frr-database" }

func (frrDatabase *MplsLsd_FrrDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrDatabase *MplsLsd_FrrDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrDatabase *MplsLsd_FrrDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrDatabase *MplsLsd_FrrDatabase) SetParent(parent types.Entity) { frrDatabase.parent = parent }

func (frrDatabase *MplsLsd_FrrDatabase) GetParent() types.Entity { return frrDatabase.parent }

func (frrDatabase *MplsLsd_FrrDatabase) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_FrrDatabase_TunnelMidpoints
// Table of FRR database entries - Tunnel
// midpoints
type MplsLsd_FrrDatabase_TunnelMidpoints struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel midpoint. The type is slice of
    // MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint.
    TunnelMidpoint []MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetFilter() yfilter.YFilter { return tunnelMidpoints.YFilter }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) SetFilter(yf yfilter.YFilter) { tunnelMidpoints.YFilter = yf }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetGoName(yname string) string {
    if yname == "tunnel-midpoint" { return "TunnelMidpoint" }
    return ""
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetSegmentPath() string {
    return "tunnel-midpoints"
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-midpoint" {
        for _, c := range tunnelMidpoints.TunnelMidpoint {
            if tunnelMidpoints.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint{}
        tunnelMidpoints.TunnelMidpoint = append(tunnelMidpoints.TunnelMidpoint, child)
        return &tunnelMidpoints.TunnelMidpoint[len(tunnelMidpoints.TunnelMidpoint)-1]
    }
    return nil
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnelMidpoints.TunnelMidpoint {
        children[tunnelMidpoints.TunnelMidpoint[i].GetSegmentPath()] = &tunnelMidpoints.TunnelMidpoint[i]
    }
    return children
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetYangName() string { return "tunnel-midpoints" }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) SetParent(parent types.Entity) { tunnelMidpoints.parent = parent }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetParent() types.Entity { return tunnelMidpoints.parent }

func (tunnelMidpoints *MplsLsd_FrrDatabase_TunnelMidpoints) GetParentYangName() string { return "frr-database" }

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint
// Data for FRR database entry - Tunnel midpoint
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    Label interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath.
    OutPath []MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetFilter() yfilter.YFilter { return tunnelMidpoint.YFilter }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) SetFilter(yf yfilter.YFilter) { tunnelMidpoint.YFilter = yf }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "out-path" { return "OutPath" }
    return ""
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetSegmentPath() string {
    return "tunnel-midpoint" + "[label='" + fmt.Sprintf("%v", tunnelMidpoint.Label) + "']"
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &tunnelMidpoint.FrrEntryId
    }
    if childYangName == "out-path" {
        for _, c := range tunnelMidpoint.OutPath {
            if tunnelMidpoint.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath{}
        tunnelMidpoint.OutPath = append(tunnelMidpoint.OutPath, child)
        return &tunnelMidpoint.OutPath[len(tunnelMidpoint.OutPath)-1]
    }
    return nil
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &tunnelMidpoint.FrrEntryId
    for i := range tunnelMidpoint.OutPath {
        children[tunnelMidpoint.OutPath[i].GetSegmentPath()] = &tunnelMidpoint.OutPath[i]
    }
    return children
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = tunnelMidpoint.Label
    leafs["tunnel-interface"] = tunnelMidpoint.TunnelInterface
    leafs["input-label"] = tunnelMidpoint.InputLabel
    leafs["entry-frr-state"] = tunnelMidpoint.EntryFrrState
    return leafs
}

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetYangName() string { return "tunnel-midpoint" }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) SetParent(parent types.Entity) { tunnelMidpoint.parent = parent }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetParent() types.Entity { return tunnelMidpoint.parent }

func (tunnelMidpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint) GetParentYangName() string { return "tunnel-midpoints" }

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId
// FRR entry ID
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId) GetParentYangName() string { return "tunnel-midpoint" }

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head
// head
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint
// midpoint
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath
// Out Path List
type MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetFilter() yfilter.YFilter { return outPath.YFilter }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) SetFilter(yf yfilter.YFilter) { outPath.YFilter = yf }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetGoName(yname string) string {
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "frr-interface" { return "FrrInterface" }
    if yname == "frr-label" { return "FrrLabel" }
    return ""
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetSegmentPath() string {
    return "out-path"
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out-interface"] = outPath.OutInterface
    leafs["out-label"] = outPath.OutLabel
    leafs["ipv4-next-hop"] = outPath.Ipv4NextHop
    leafs["frr-interface"] = outPath.FrrInterface
    leafs["frr-label"] = outPath.FrrLabel
    return leafs
}

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetBundleName() string { return "cisco_ios_xr" }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetYangName() string { return "out-path" }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) SetParent(parent types.Entity) { outPath.parent = parent }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetParent() types.Entity { return outPath.parent }

func (outPath *MplsLsd_FrrDatabase_TunnelMidpoints_TunnelMidpoint_OutPath) GetParentYangName() string { return "tunnel-midpoint" }

// MplsLsd_FrrDatabase_TunnelHeads
// Table of FRR database entries - Tunnel heads
type MplsLsd_FrrDatabase_TunnelHeads struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for FRR database entry - Tunnel head. The type is slice of
    // MplsLsd_FrrDatabase_TunnelHeads_TunnelHead.
    TunnelHead []MplsLsd_FrrDatabase_TunnelHeads_TunnelHead
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetFilter() yfilter.YFilter { return tunnelHeads.YFilter }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) SetFilter(yf yfilter.YFilter) { tunnelHeads.YFilter = yf }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetGoName(yname string) string {
    if yname == "tunnel-head" { return "TunnelHead" }
    return ""
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetSegmentPath() string {
    return "tunnel-heads"
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "tunnel-head" {
        for _, c := range tunnelHeads.TunnelHead {
            if tunnelHeads.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_FrrDatabase_TunnelHeads_TunnelHead{}
        tunnelHeads.TunnelHead = append(tunnelHeads.TunnelHead, child)
        return &tunnelHeads.TunnelHead[len(tunnelHeads.TunnelHead)-1]
    }
    return nil
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range tunnelHeads.TunnelHead {
        children[tunnelHeads.TunnelHead[i].GetSegmentPath()] = &tunnelHeads.TunnelHead[i]
    }
    return children
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetYangName() string { return "tunnel-heads" }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) SetParent(parent types.Entity) { tunnelHeads.parent = parent }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetParent() types.Entity { return tunnelHeads.parent }

func (tunnelHeads *MplsLsd_FrrDatabase_TunnelHeads) GetParentYangName() string { return "frr-database" }

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead
// Data for FRR database entry - Tunnel head
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Input label. The type is interface{} with range: 0..4294967295.
    InputLabel interface{}

    // MPLS FRR entry state. The type is MgmtLsdFrrState.
    EntryFrrState interface{}

    // FRR entry ID.
    FrrEntryId MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId

    // Out Path List. The type is slice of
    // MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath.
    OutPath []MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetFilter() yfilter.YFilter { return tunnelHead.YFilter }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) SetFilter(yf yfilter.YFilter) { tunnelHead.YFilter = yf }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "input-label" { return "InputLabel" }
    if yname == "entry-frr-state" { return "EntryFrrState" }
    if yname == "frr-entry-id" { return "FrrEntryId" }
    if yname == "out-path" { return "OutPath" }
    return ""
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetSegmentPath() string {
    return "tunnel-head" + "[interface-name='" + fmt.Sprintf("%v", tunnelHead.InterfaceName) + "']"
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr-entry-id" {
        return &tunnelHead.FrrEntryId
    }
    if childYangName == "out-path" {
        for _, c := range tunnelHead.OutPath {
            if tunnelHead.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath{}
        tunnelHead.OutPath = append(tunnelHead.OutPath, child)
        return &tunnelHead.OutPath[len(tunnelHead.OutPath)-1]
    }
    return nil
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["frr-entry-id"] = &tunnelHead.FrrEntryId
    for i := range tunnelHead.OutPath {
        children[tunnelHead.OutPath[i].GetSegmentPath()] = &tunnelHead.OutPath[i]
    }
    return children
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = tunnelHead.InterfaceName
    leafs["tunnel-interface"] = tunnelHead.TunnelInterface
    leafs["input-label"] = tunnelHead.InputLabel
    leafs["entry-frr-state"] = tunnelHead.EntryFrrState
    return leafs
}

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetYangName() string { return "tunnel-head" }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) SetParent(parent types.Entity) { tunnelHead.parent = parent }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetParent() types.Entity { return tunnelHead.parent }

func (tunnelHead *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead) GetParentYangName() string { return "tunnel-heads" }

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId
// FRR entry ID
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Role. The type is MgmtLsdLspRole.
    Role interface{}

    // head.
    Head MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head

    // midpoint.
    Midpoint MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetFilter() yfilter.YFilter { return frrEntryId.YFilter }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) SetFilter(yf yfilter.YFilter) { frrEntryId.YFilter = yf }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "head" { return "Head" }
    if yname == "midpoint" { return "Midpoint" }
    return ""
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetSegmentPath() string {
    return "frr-entry-id"
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "head" {
        return &frrEntryId.Head
    }
    if childYangName == "midpoint" {
        return &frrEntryId.Midpoint
    }
    return nil
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["head"] = &frrEntryId.Head
    children["midpoint"] = &frrEntryId.Midpoint
    return children
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = frrEntryId.Role
    return leafs
}

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetBundleName() string { return "cisco_ios_xr" }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetYangName() string { return "frr-entry-id" }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) SetParent(parent types.Entity) { frrEntryId.parent = parent }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetParent() types.Entity { return frrEntryId.parent }

func (frrEntryId *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId) GetParentYangName() string { return "tunnel-head" }

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head
// head
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationPrefix interface{}

    // Destination prefix length. The type is interface{} with range: 0..255.
    DestinationPrefixLength interface{}
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetFilter() yfilter.YFilter { return head.YFilter }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) SetFilter(yf yfilter.YFilter) { head.YFilter = yf }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetGoName(yname string) string {
    if yname == "destination-prefix" { return "DestinationPrefix" }
    if yname == "destination-prefix-length" { return "DestinationPrefixLength" }
    return ""
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetSegmentPath() string {
    return "head"
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-prefix"] = head.DestinationPrefix
    leafs["destination-prefix-length"] = head.DestinationPrefixLength
    return leafs
}

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetBundleName() string { return "cisco_ios_xr" }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetYangName() string { return "head" }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) SetParent(parent types.Entity) { head.parent = parent }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetParent() types.Entity { return head.parent }

func (head *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Head) GetParentYangName() string { return "frr-entry-id" }

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint
// midpoint
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    Lspid interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetFilter() yfilter.YFilter { return midpoint.YFilter }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) SetFilter(yf yfilter.YFilter) { midpoint.YFilter = yf }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "lspid" { return "Lspid" }
    if yname == "tunnel-id" { return "TunnelId" }
    return ""
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetSegmentPath() string {
    return "midpoint"
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = midpoint.SourceAddress
    leafs["lspid"] = midpoint.Lspid
    leafs["tunnel-id"] = midpoint.TunnelId
    return leafs
}

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetBundleName() string { return "cisco_ios_xr" }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetYangName() string { return "midpoint" }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) SetParent(parent types.Entity) { midpoint.parent = parent }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetParent() types.Entity { return midpoint.parent }

func (midpoint *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_FrrEntryId_Midpoint) GetParentYangName() string { return "frr-entry-id" }

// MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath
// Out Path List
type MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Next hop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // FRR interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    FrrInterface interface{}

    // FRR output label. The type is interface{} with range: 0..4294967295.
    FrrLabel interface{}
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetFilter() yfilter.YFilter { return outPath.YFilter }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) SetFilter(yf yfilter.YFilter) { outPath.YFilter = yf }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetGoName(yname string) string {
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "frr-interface" { return "FrrInterface" }
    if yname == "frr-label" { return "FrrLabel" }
    return ""
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetSegmentPath() string {
    return "out-path"
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["out-interface"] = outPath.OutInterface
    leafs["out-label"] = outPath.OutLabel
    leafs["ipv4-next-hop"] = outPath.Ipv4NextHop
    leafs["frr-interface"] = outPath.FrrInterface
    leafs["frr-label"] = outPath.FrrLabel
    return leafs
}

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetBundleName() string { return "cisco_ios_xr" }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetYangName() string { return "out-path" }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) SetParent(parent types.Entity) { outPath.parent = parent }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetParent() types.Entity { return outPath.parent }

func (outPath *MplsLsd_FrrDatabase_TunnelHeads_TunnelHead_OutPath) GetParentYangName() string { return "tunnel-head" }

// MplsLsd_FrrDatabase_TunnelHeadSummary
// Summary data for FRR database entry - Tunnel
// head
type MplsLsd_FrrDatabase_TunnelHeadSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetFilter() yfilter.YFilter { return tunnelHeadSummary.YFilter }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) SetFilter(yf yfilter.YFilter) { tunnelHeadSummary.YFilter = yf }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetSegmentPath() string {
    return "tunnel-head-summary"
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelHeadSummary.Active
    leafs["ready"] = tunnelHeadSummary.Ready
    leafs["partial"] = tunnelHeadSummary.Partial
    leafs["igp"] = tunnelHeadSummary.Igp
    return leafs
}

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetYangName() string { return "tunnel-head-summary" }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) SetParent(parent types.Entity) { tunnelHeadSummary.parent = parent }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetParent() types.Entity { return tunnelHeadSummary.parent }

func (tunnelHeadSummary *MplsLsd_FrrDatabase_TunnelHeadSummary) GetParentYangName() string { return "frr-database" }

// MplsLsd_FrrDatabase_SummaryProtectedInterfaces
// Sumary table of Protected Interfaces
type MplsLsd_FrrDatabase_SummaryProtectedInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of
    // MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface.
    SummaryProtectedInterface []MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetFilter() yfilter.YFilter { return summaryProtectedInterfaces.YFilter }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) SetFilter(yf yfilter.YFilter) { summaryProtectedInterfaces.YFilter = yf }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetGoName(yname string) string {
    if yname == "summary-protected-interface" { return "SummaryProtectedInterface" }
    return ""
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetSegmentPath() string {
    return "summary-protected-interfaces"
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-protected-interface" {
        for _, c := range summaryProtectedInterfaces.SummaryProtectedInterface {
            if summaryProtectedInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface{}
        summaryProtectedInterfaces.SummaryProtectedInterface = append(summaryProtectedInterfaces.SummaryProtectedInterface, child)
        return &summaryProtectedInterfaces.SummaryProtectedInterface[len(summaryProtectedInterfaces.SummaryProtectedInterface)-1]
    }
    return nil
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryProtectedInterfaces.SummaryProtectedInterface {
        children[summaryProtectedInterfaces.SummaryProtectedInterface[i].GetSegmentPath()] = &summaryProtectedInterfaces.SummaryProtectedInterface[i]
    }
    return children
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetYangName() string { return "summary-protected-interfaces" }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) SetParent(parent types.Entity) { summaryProtectedInterfaces.parent = parent }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetParent() types.Entity { return summaryProtectedInterfaces.parent }

func (summaryProtectedInterfaces *MplsLsd_FrrDatabase_SummaryProtectedInterfaces) GetParentYangName() string { return "frr-database" }

// MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface
// Data for MPLS interface
type MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetFilter() yfilter.YFilter { return summaryProtectedInterface.YFilter }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) SetFilter(yf yfilter.YFilter) { summaryProtectedInterface.YFilter = yf }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetSegmentPath() string {
    return "summary-protected-interface" + "[interface-name='" + fmt.Sprintf("%v", summaryProtectedInterface.InterfaceName) + "']"
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = summaryProtectedInterface.InterfaceName
    leafs["active"] = summaryProtectedInterface.Active
    leafs["ready"] = summaryProtectedInterface.Ready
    leafs["partial"] = summaryProtectedInterface.Partial
    leafs["igp"] = summaryProtectedInterface.Igp
    return leafs
}

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetBundleName() string { return "cisco_ios_xr" }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetYangName() string { return "summary-protected-interface" }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) SetParent(parent types.Entity) { summaryProtectedInterface.parent = parent }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetParent() types.Entity { return summaryProtectedInterface.parent }

func (summaryProtectedInterface *MplsLsd_FrrDatabase_SummaryProtectedInterfaces_SummaryProtectedInterface) GetParentYangName() string { return "summary-protected-interfaces" }

// MplsLsd_FrrDatabase_TunnelSummary
// Summary data for FRR database entry
type MplsLsd_FrrDatabase_TunnelSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetFilter() yfilter.YFilter { return tunnelSummary.YFilter }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) SetFilter(yf yfilter.YFilter) { tunnelSummary.YFilter = yf }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetSegmentPath() string {
    return "tunnel-summary"
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelSummary.Active
    leafs["ready"] = tunnelSummary.Ready
    leafs["partial"] = tunnelSummary.Partial
    leafs["igp"] = tunnelSummary.Igp
    return leafs
}

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetYangName() string { return "tunnel-summary" }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) SetParent(parent types.Entity) { tunnelSummary.parent = parent }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetParent() types.Entity { return tunnelSummary.parent }

func (tunnelSummary *MplsLsd_FrrDatabase_TunnelSummary) GetParentYangName() string { return "frr-database" }

// MplsLsd_FrrDatabase_TunnelMidpointSummary
// Summary data for FRR database entry - Tunnel
// midpoint
type MplsLsd_FrrDatabase_TunnelMidpointSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of FRR rewrites in Active state. The type is interface{} with range:
    // 0..4294967295.
    Active interface{}

    // Number of FRR rewrites in Ready state. The type is interface{} with range:
    // 0..4294967295.
    Ready interface{}

    // Number of FRR rewrites in Partial state. The type is interface{} with
    // range: 0..4294967295.
    Partial interface{}

    // Number of FRR rewrites in IGP state for SR-TE. The type is interface{} with
    // range: 0..4294967295.
    Igp interface{}
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetFilter() yfilter.YFilter { return tunnelMidpointSummary.YFilter }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) SetFilter(yf yfilter.YFilter) { tunnelMidpointSummary.YFilter = yf }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetGoName(yname string) string {
    if yname == "active" { return "Active" }
    if yname == "ready" { return "Ready" }
    if yname == "partial" { return "Partial" }
    if yname == "igp" { return "Igp" }
    return ""
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetSegmentPath() string {
    return "tunnel-midpoint-summary"
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["active"] = tunnelMidpointSummary.Active
    leafs["ready"] = tunnelMidpointSummary.Ready
    leafs["partial"] = tunnelMidpointSummary.Partial
    leafs["igp"] = tunnelMidpointSummary.Igp
    return leafs
}

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetBundleName() string { return "cisco_ios_xr" }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetYangName() string { return "tunnel-midpoint-summary" }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) SetParent(parent types.Entity) { tunnelMidpointSummary.parent = parent }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetParent() types.Entity { return tunnelMidpointSummary.parent }

func (tunnelMidpointSummary *MplsLsd_FrrDatabase_TunnelMidpointSummary) GetParentYangName() string { return "frr-database" }

// MplsLsd_Rewrite
// Table of rewrites
type MplsLsd_Rewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of Rewrites.
    RewritePws MplsLsd_Rewrite_RewritePws

    // Table of Rewrites.
    RewriteIpv4S MplsLsd_Rewrite_RewriteIpv4S

    // Table of Traffic Engineering Rewrites.
    RewriteTes MplsLsd_Rewrite_RewriteTes

    // Table of Rewrites.
    RewriteLabels MplsLsd_Rewrite_RewriteLabels
}

func (rewrite *MplsLsd_Rewrite) GetFilter() yfilter.YFilter { return rewrite.YFilter }

func (rewrite *MplsLsd_Rewrite) SetFilter(yf yfilter.YFilter) { rewrite.YFilter = yf }

func (rewrite *MplsLsd_Rewrite) GetGoName(yname string) string {
    if yname == "rewrite-pws" { return "RewritePws" }
    if yname == "rewrite-ipv4s" { return "RewriteIpv4S" }
    if yname == "rewrite-tes" { return "RewriteTes" }
    if yname == "rewrite-labels" { return "RewriteLabels" }
    return ""
}

func (rewrite *MplsLsd_Rewrite) GetSegmentPath() string {
    return "rewrite"
}

func (rewrite *MplsLsd_Rewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-pws" {
        return &rewrite.RewritePws
    }
    if childYangName == "rewrite-ipv4s" {
        return &rewrite.RewriteIpv4S
    }
    if childYangName == "rewrite-tes" {
        return &rewrite.RewriteTes
    }
    if childYangName == "rewrite-labels" {
        return &rewrite.RewriteLabels
    }
    return nil
}

func (rewrite *MplsLsd_Rewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-pws"] = &rewrite.RewritePws
    children["rewrite-ipv4s"] = &rewrite.RewriteIpv4S
    children["rewrite-tes"] = &rewrite.RewriteTes
    children["rewrite-labels"] = &rewrite.RewriteLabels
    return children
}

func (rewrite *MplsLsd_Rewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewrite *MplsLsd_Rewrite) GetBundleName() string { return "cisco_ios_xr" }

func (rewrite *MplsLsd_Rewrite) GetYangName() string { return "rewrite" }

func (rewrite *MplsLsd_Rewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewrite *MplsLsd_Rewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewrite *MplsLsd_Rewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewrite *MplsLsd_Rewrite) SetParent(parent types.Entity) { rewrite.parent = parent }

func (rewrite *MplsLsd_Rewrite) GetParent() types.Entity { return rewrite.parent }

func (rewrite *MplsLsd_Rewrite) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_Rewrite_RewritePws
// Table of Rewrites
type MplsLsd_Rewrite_RewritePws struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for PW List. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw.
    RewritePw []MplsLsd_Rewrite_RewritePws_RewritePw
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetFilter() yfilter.YFilter { return rewritePws.YFilter }

func (rewritePws *MplsLsd_Rewrite_RewritePws) SetFilter(yf yfilter.YFilter) { rewritePws.YFilter = yf }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetGoName(yname string) string {
    if yname == "rewrite-pw" { return "RewritePw" }
    return ""
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetSegmentPath() string {
    return "rewrite-pws"
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-pw" {
        for _, c := range rewritePws.RewritePw {
            if rewritePws.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw{}
        rewritePws.RewritePw = append(rewritePws.RewritePw, child)
        return &rewritePws.RewritePw[len(rewritePws.RewritePw)-1]
    }
    return nil
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewritePws.RewritePw {
        children[rewritePws.RewritePw[i].GetSegmentPath()] = &rewritePws.RewritePw[i]
    }
    return children
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetBundleName() string { return "cisco_ios_xr" }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetYangName() string { return "rewrite-pws" }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewritePws *MplsLsd_Rewrite_RewritePws) SetParent(parent types.Entity) { rewritePws.parent = parent }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetParent() types.Entity { return rewritePws.parent }

func (rewritePws *MplsLsd_Rewrite_RewritePws) GetParentYangName() string { return "rewrite" }

// MplsLsd_Rewrite_RewritePws_RewritePw
// FPI rewrite for PW List
type MplsLsd_Rewrite_RewritePws_RewritePw struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. PW List ID. The type is interface{} with range:
    // -2147483648..2147483647.
    PwListId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi.
    AssociatedFpi []MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf.
    V4Rpf []MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf.
    V6Rpf []MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewritePws_RewritePw_Mois.
    Mois []MplsLsd_Rewrite_RewritePws_RewritePw_Mois
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetFilter() yfilter.YFilter { return rewritePw.YFilter }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) SetFilter(yf yfilter.YFilter) { rewritePw.YFilter = yf }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetGoName(yname string) string {
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetSegmentPath() string {
    return "rewrite-pw" + "[pw-list-id='" + fmt.Sprintf("%v", rewritePw.PwListId) + "']"
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewritePw.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewritePw.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewritePw.AssociatedFpi {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi{}
        rewritePw.AssociatedFpi = append(rewritePw.AssociatedFpi, child)
        return &rewritePw.AssociatedFpi[len(rewritePw.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewritePw.V4Rpf {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf{}
        rewritePw.V4Rpf = append(rewritePw.V4Rpf, child)
        return &rewritePw.V4Rpf[len(rewritePw.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewritePw.V6Rpf {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf{}
        rewritePw.V6Rpf = append(rewritePw.V6Rpf, child)
        return &rewritePw.V6Rpf[len(rewritePw.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewritePw.Mois {
            if rewritePw.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_Mois{}
        rewritePw.Mois = append(rewritePw.Mois, child)
        return &rewritePw.Mois[len(rewritePw.Mois)-1]
    }
    return nil
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewritePw.FpiKey
    children["rewrite-id"] = &rewritePw.RewriteId
    for i := range rewritePw.AssociatedFpi {
        children[rewritePw.AssociatedFpi[i].GetSegmentPath()] = &rewritePw.AssociatedFpi[i]
    }
    for i := range rewritePw.V4Rpf {
        children[rewritePw.V4Rpf[i].GetSegmentPath()] = &rewritePw.V4Rpf[i]
    }
    for i := range rewritePw.V6Rpf {
        children[rewritePw.V6Rpf[i].GetSegmentPath()] = &rewritePw.V6Rpf[i]
    }
    for i := range rewritePw.Mois {
        children[rewritePw.Mois[i].GetSegmentPath()] = &rewritePw.Mois[i]
    }
    return children
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pw-list-id"] = rewritePw.PwListId
    leafs["rewrite-version"] = rewritePw.RewriteVersion
    leafs["bcdl-priority"] = rewritePw.BcdlPriority
    leafs["lsd-queue"] = rewritePw.LsdQueue
    leafs["rw-install-time"] = rewritePw.RwInstallTime
    leafs["rw-install-age"] = rewritePw.RwInstallAge
    leafs["rw-updated"] = rewritePw.RwUpdated
    leafs["priority-updated"] = rewritePw.PriorityUpdated
    return leafs
}

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetBundleName() string { return "cisco_ios_xr" }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetYangName() string { return "rewrite-pw" }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) SetParent(parent types.Entity) { rewritePw.parent = parent }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetParent() types.Entity { return rewritePw.parent }

func (rewritePw *MplsLsd_Rewrite_RewritePws_RewritePw) GetParentYangName() string { return "rewrite-pws" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey
// fpi key
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewritePws_RewritePw_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewritePws_RewritePw_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V4Rpf) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsd_Rewrite_RewritePws_RewritePw_V6Rpf) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois
// Mois
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray.
    MoiArray []MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsd_Rewrite_RewritePws_RewritePw_Mois) GetParentYangName() string { return "rewrite-pw" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsd_Rewrite_RewritePws_RewritePw_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S
// Table of Rewrites
type MplsLsd_Rewrite_RewriteIpv4S struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4.
    RewriteIpv4 []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetFilter() yfilter.YFilter { return rewriteIpv4S.YFilter }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) SetFilter(yf yfilter.YFilter) { rewriteIpv4S.YFilter = yf }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetGoName(yname string) string {
    if yname == "rewrite-ipv4" { return "RewriteIpv4" }
    return ""
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetSegmentPath() string {
    return "rewrite-ipv4s"
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-ipv4" {
        for _, c := range rewriteIpv4S.RewriteIpv4 {
            if rewriteIpv4S.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4{}
        rewriteIpv4S.RewriteIpv4 = append(rewriteIpv4S.RewriteIpv4, child)
        return &rewriteIpv4S.RewriteIpv4[len(rewriteIpv4S.RewriteIpv4)-1]
    }
    return nil
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteIpv4S.RewriteIpv4 {
        children[rewriteIpv4S.RewriteIpv4[i].GetSegmentPath()] = &rewriteIpv4S.RewriteIpv4[i]
    }
    return children
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetYangName() string { return "rewrite-ipv4s" }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) SetParent(parent types.Entity) { rewriteIpv4S.parent = parent }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetParent() types.Entity { return rewriteIpv4S.parent }

func (rewriteIpv4S *MplsLsd_Rewrite_RewriteIpv4S) GetParentYangName() string { return "rewrite" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4
// FPI rewrite for label
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSI table name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    RsiTableName interface{}

    // RSI table ID. The type is string with pattern: [0-9a-fA-F]{1,8}.
    RsiTableId interface{}

    // IPv4 Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: -2147483648..2147483647.
    PrefixLength interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi.
    AssociatedFpi []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf.
    V4Rpf []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf.
    V6Rpf []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois.
    Mois []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetFilter() yfilter.YFilter { return rewriteIpv4.YFilter }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) SetFilter(yf yfilter.YFilter) { rewriteIpv4.YFilter = yf }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetGoName(yname string) string {
    if yname == "rsi-table-name" { return "RsiTableName" }
    if yname == "rsi-table-id" { return "RsiTableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetSegmentPath() string {
    return "rewrite-ipv4"
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteIpv4.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteIpv4.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteIpv4.AssociatedFpi {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi{}
        rewriteIpv4.AssociatedFpi = append(rewriteIpv4.AssociatedFpi, child)
        return &rewriteIpv4.AssociatedFpi[len(rewriteIpv4.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteIpv4.V4Rpf {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf{}
        rewriteIpv4.V4Rpf = append(rewriteIpv4.V4Rpf, child)
        return &rewriteIpv4.V4Rpf[len(rewriteIpv4.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteIpv4.V6Rpf {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf{}
        rewriteIpv4.V6Rpf = append(rewriteIpv4.V6Rpf, child)
        return &rewriteIpv4.V6Rpf[len(rewriteIpv4.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteIpv4.Mois {
            if rewriteIpv4.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois{}
        rewriteIpv4.Mois = append(rewriteIpv4.Mois, child)
        return &rewriteIpv4.Mois[len(rewriteIpv4.Mois)-1]
    }
    return nil
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteIpv4.FpiKey
    children["rewrite-id"] = &rewriteIpv4.RewriteId
    for i := range rewriteIpv4.AssociatedFpi {
        children[rewriteIpv4.AssociatedFpi[i].GetSegmentPath()] = &rewriteIpv4.AssociatedFpi[i]
    }
    for i := range rewriteIpv4.V4Rpf {
        children[rewriteIpv4.V4Rpf[i].GetSegmentPath()] = &rewriteIpv4.V4Rpf[i]
    }
    for i := range rewriteIpv4.V6Rpf {
        children[rewriteIpv4.V6Rpf[i].GetSegmentPath()] = &rewriteIpv4.V6Rpf[i]
    }
    for i := range rewriteIpv4.Mois {
        children[rewriteIpv4.Mois[i].GetSegmentPath()] = &rewriteIpv4.Mois[i]
    }
    return children
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsi-table-name"] = rewriteIpv4.RsiTableName
    leafs["rsi-table-id"] = rewriteIpv4.RsiTableId
    leafs["prefix"] = rewriteIpv4.Prefix
    leafs["prefix-length"] = rewriteIpv4.PrefixLength
    leafs["rewrite-version"] = rewriteIpv4.RewriteVersion
    leafs["bcdl-priority"] = rewriteIpv4.BcdlPriority
    leafs["lsd-queue"] = rewriteIpv4.LsdQueue
    leafs["rw-install-time"] = rewriteIpv4.RwInstallTime
    leafs["rw-install-age"] = rewriteIpv4.RwInstallAge
    leafs["rw-updated"] = rewriteIpv4.RwUpdated
    leafs["priority-updated"] = rewriteIpv4.PriorityUpdated
    return leafs
}

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetYangName() string { return "rewrite-ipv4" }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) SetParent(parent types.Entity) { rewriteIpv4.parent = parent }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetParent() types.Entity { return rewriteIpv4.parent }

func (rewriteIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4) GetParentYangName() string { return "rewrite-ipv4s" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V4Rpf) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_V6Rpf) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois
// Mois
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray.
    MoiArray []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois) GetParentYangName() string { return "rewrite-ipv4" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsd_Rewrite_RewriteIpv4S_RewriteIpv4_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes
// Table of Traffic Engineering Rewrites
type MplsLsd_Rewrite_RewriteTes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for TE. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe.
    RewriteTe []MplsLsd_Rewrite_RewriteTes_RewriteTe
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetFilter() yfilter.YFilter { return rewriteTes.YFilter }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) SetFilter(yf yfilter.YFilter) { rewriteTes.YFilter = yf }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetGoName(yname string) string {
    if yname == "rewrite-te" { return "RewriteTe" }
    return ""
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetSegmentPath() string {
    return "rewrite-tes"
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-te" {
        for _, c := range rewriteTes.RewriteTe {
            if rewriteTes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe{}
        rewriteTes.RewriteTe = append(rewriteTes.RewriteTe, child)
        return &rewriteTes.RewriteTe[len(rewriteTes.RewriteTe)-1]
    }
    return nil
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteTes.RewriteTe {
        children[rewriteTes.RewriteTe[i].GetSegmentPath()] = &rewriteTes.RewriteTe[i]
    }
    return children
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetYangName() string { return "rewrite-tes" }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) SetParent(parent types.Entity) { rewriteTes.parent = parent }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetParent() types.Entity { return rewriteTes.parent }

func (rewriteTes *MplsLsd_Rewrite_RewriteTes) GetParentYangName() string { return "rewrite" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe
// FPI rewrite for TE
type MplsLsd_Rewrite_RewriteTes_RewriteTe struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Tunnel interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi.
    AssociatedFpi []MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf.
    V4Rpf []MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf.
    V6Rpf []MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois.
    Mois []MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetFilter() yfilter.YFilter { return rewriteTe.YFilter }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) SetFilter(yf yfilter.YFilter) { rewriteTe.YFilter = yf }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetSegmentPath() string {
    return "rewrite-te" + "[interface-name='" + fmt.Sprintf("%v", rewriteTe.InterfaceName) + "']"
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteTe.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteTe.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteTe.AssociatedFpi {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi{}
        rewriteTe.AssociatedFpi = append(rewriteTe.AssociatedFpi, child)
        return &rewriteTe.AssociatedFpi[len(rewriteTe.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteTe.V4Rpf {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf{}
        rewriteTe.V4Rpf = append(rewriteTe.V4Rpf, child)
        return &rewriteTe.V4Rpf[len(rewriteTe.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteTe.V6Rpf {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf{}
        rewriteTe.V6Rpf = append(rewriteTe.V6Rpf, child)
        return &rewriteTe.V6Rpf[len(rewriteTe.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteTe.Mois {
            if rewriteTe.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois{}
        rewriteTe.Mois = append(rewriteTe.Mois, child)
        return &rewriteTe.Mois[len(rewriteTe.Mois)-1]
    }
    return nil
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteTe.FpiKey
    children["rewrite-id"] = &rewriteTe.RewriteId
    for i := range rewriteTe.AssociatedFpi {
        children[rewriteTe.AssociatedFpi[i].GetSegmentPath()] = &rewriteTe.AssociatedFpi[i]
    }
    for i := range rewriteTe.V4Rpf {
        children[rewriteTe.V4Rpf[i].GetSegmentPath()] = &rewriteTe.V4Rpf[i]
    }
    for i := range rewriteTe.V6Rpf {
        children[rewriteTe.V6Rpf[i].GetSegmentPath()] = &rewriteTe.V6Rpf[i]
    }
    for i := range rewriteTe.Mois {
        children[rewriteTe.Mois[i].GetSegmentPath()] = &rewriteTe.Mois[i]
    }
    return children
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = rewriteTe.InterfaceName
    leafs["rewrite-version"] = rewriteTe.RewriteVersion
    leafs["bcdl-priority"] = rewriteTe.BcdlPriority
    leafs["lsd-queue"] = rewriteTe.LsdQueue
    leafs["rw-install-time"] = rewriteTe.RwInstallTime
    leafs["rw-install-age"] = rewriteTe.RwInstallAge
    leafs["rw-updated"] = rewriteTe.RwUpdated
    leafs["priority-updated"] = rewriteTe.PriorityUpdated
    return leafs
}

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetYangName() string { return "rewrite-te" }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) SetParent(parent types.Entity) { rewriteTe.parent = parent }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetParent() types.Entity { return rewriteTe.parent }

func (rewriteTe *MplsLsd_Rewrite_RewriteTes_RewriteTe) GetParentYangName() string { return "rewrite-tes" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteTes_RewriteTe_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteTes_RewriteTe_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V4Rpf) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteTes_RewriteTe_V6Rpf) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois
// Mois
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray.
    MoiArray []MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois) GetParentYangName() string { return "rewrite-te" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsd_Rewrite_RewriteTes_RewriteTe_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels
// Table of Rewrites
type MplsLsd_Rewrite_RewriteLabels struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI rewrite for label. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel.
    RewriteLabel []MplsLsd_Rewrite_RewriteLabels_RewriteLabel
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetFilter() yfilter.YFilter { return rewriteLabels.YFilter }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) SetFilter(yf yfilter.YFilter) { rewriteLabels.YFilter = yf }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetGoName(yname string) string {
    if yname == "rewrite-label" { return "RewriteLabel" }
    return ""
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetSegmentPath() string {
    return "rewrite-labels"
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-label" {
        for _, c := range rewriteLabels.RewriteLabel {
            if rewriteLabels.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel{}
        rewriteLabels.RewriteLabel = append(rewriteLabels.RewriteLabel, child)
        return &rewriteLabels.RewriteLabel[len(rewriteLabels.RewriteLabel)-1]
    }
    return nil
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteLabels.RewriteLabel {
        children[rewriteLabels.RewriteLabel[i].GetSegmentPath()] = &rewriteLabels.RewriteLabel[i]
    }
    return children
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetYangName() string { return "rewrite-labels" }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) SetParent(parent types.Entity) { rewriteLabels.parent = parent }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetParent() types.Entity { return rewriteLabels.parent }

func (rewriteLabels *MplsLsd_Rewrite_RewriteLabels) GetParentYangName() string { return "rewrite" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel
// FPI rewrite for label
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Label value. The type is interface{} with range:
    // -2147483648..2147483647.
    LabelId interface{}

    // Rewrite version. The type is interface{} with range:
    // 0..18446744073709551615.
    RewriteVersion interface{}

    // BCDL Priority. The type is interface{} with range: 0..255.
    BcdlPriority interface{}

    // LSD queue. The type is interface{} with range: 0..255.
    LsdQueue interface{}

    // Rewrite install timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallTime interface{}

    // Rewrite install age. The type is interface{} with range:
    // 0..18446744073709551615.
    RwInstallAge interface{}

    // Is rewrite ever updated. The type is interface{} with range:
    // -2147483648..2147483647.
    RwUpdated interface{}

    // Is rewrite's BCDL priority updated. The type is interface{} with range:
    // -2147483648..2147483647.
    PriorityUpdated interface{}

    // fpi key.
    FpiKey MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId

    // Associated FPI. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi.
    AssociatedFpi []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi

    // IPv4 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf.
    V4Rpf []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf

    // IPv6 RPF neighbors. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf.
    V6Rpf []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf

    // Mois. The type is slice of MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois.
    Mois []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetFilter() yfilter.YFilter { return rewriteLabel.YFilter }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) SetFilter(yf yfilter.YFilter) { rewriteLabel.YFilter = yf }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetGoName(yname string) string {
    if yname == "label-id" { return "LabelId" }
    if yname == "rewrite-version" { return "RewriteVersion" }
    if yname == "bcdl-priority" { return "BcdlPriority" }
    if yname == "lsd-queue" { return "LsdQueue" }
    if yname == "rw-install-time" { return "RwInstallTime" }
    if yname == "rw-install-age" { return "RwInstallAge" }
    if yname == "rw-updated" { return "RwUpdated" }
    if yname == "priority-updated" { return "PriorityUpdated" }
    if yname == "fpi-key" { return "FpiKey" }
    if yname == "rewrite-id" { return "RewriteId" }
    if yname == "associated-fpi" { return "AssociatedFpi" }
    if yname == "v4-rpf" { return "V4Rpf" }
    if yname == "v6-rpf" { return "V6Rpf" }
    if yname == "mois" { return "Mois" }
    return ""
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetSegmentPath() string {
    return "rewrite-label" + "[label-id='" + fmt.Sprintf("%v", rewriteLabel.LabelId) + "']"
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi-key" {
        return &rewriteLabel.FpiKey
    }
    if childYangName == "rewrite-id" {
        return &rewriteLabel.RewriteId
    }
    if childYangName == "associated-fpi" {
        for _, c := range rewriteLabel.AssociatedFpi {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi{}
        rewriteLabel.AssociatedFpi = append(rewriteLabel.AssociatedFpi, child)
        return &rewriteLabel.AssociatedFpi[len(rewriteLabel.AssociatedFpi)-1]
    }
    if childYangName == "v4-rpf" {
        for _, c := range rewriteLabel.V4Rpf {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf{}
        rewriteLabel.V4Rpf = append(rewriteLabel.V4Rpf, child)
        return &rewriteLabel.V4Rpf[len(rewriteLabel.V4Rpf)-1]
    }
    if childYangName == "v6-rpf" {
        for _, c := range rewriteLabel.V6Rpf {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf{}
        rewriteLabel.V6Rpf = append(rewriteLabel.V6Rpf, child)
        return &rewriteLabel.V6Rpf[len(rewriteLabel.V6Rpf)-1]
    }
    if childYangName == "mois" {
        for _, c := range rewriteLabel.Mois {
            if rewriteLabel.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois{}
        rewriteLabel.Mois = append(rewriteLabel.Mois, child)
        return &rewriteLabel.Mois[len(rewriteLabel.Mois)-1]
    }
    return nil
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi-key"] = &rewriteLabel.FpiKey
    children["rewrite-id"] = &rewriteLabel.RewriteId
    for i := range rewriteLabel.AssociatedFpi {
        children[rewriteLabel.AssociatedFpi[i].GetSegmentPath()] = &rewriteLabel.AssociatedFpi[i]
    }
    for i := range rewriteLabel.V4Rpf {
        children[rewriteLabel.V4Rpf[i].GetSegmentPath()] = &rewriteLabel.V4Rpf[i]
    }
    for i := range rewriteLabel.V6Rpf {
        children[rewriteLabel.V6Rpf[i].GetSegmentPath()] = &rewriteLabel.V6Rpf[i]
    }
    for i := range rewriteLabel.Mois {
        children[rewriteLabel.Mois[i].GetSegmentPath()] = &rewriteLabel.Mois[i]
    }
    return children
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-id"] = rewriteLabel.LabelId
    leafs["rewrite-version"] = rewriteLabel.RewriteVersion
    leafs["bcdl-priority"] = rewriteLabel.BcdlPriority
    leafs["lsd-queue"] = rewriteLabel.LsdQueue
    leafs["rw-install-time"] = rewriteLabel.RwInstallTime
    leafs["rw-install-age"] = rewriteLabel.RwInstallAge
    leafs["rw-updated"] = rewriteLabel.RwUpdated
    leafs["priority-updated"] = rewriteLabel.PriorityUpdated
    return leafs
}

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetYangName() string { return "rewrite-label" }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) SetParent(parent types.Entity) { rewriteLabel.parent = parent }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetParent() types.Entity { return rewriteLabel.parent }

func (rewriteLabel *MplsLsd_Rewrite_RewriteLabels_RewriteLabel) GetParentYangName() string { return "rewrite-labels" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey
// fpi key
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetFilter() yfilter.YFilter { return fpiKey.YFilter }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) SetFilter(yf yfilter.YFilter) { fpiKey.YFilter = yf }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetSegmentPath() string {
    return "fpi-key"
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &fpiKey.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range fpiKey.ApplicationOwner {
            if fpiKey.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner{}
        fpiKey.ApplicationOwner = append(fpiKey.ApplicationOwner, child)
        return &fpiKey.ApplicationOwner[len(fpiKey.ApplicationOwner)-1]
    }
    return nil
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &fpiKey.Fpi
    for i := range fpiKey.ApplicationOwner {
        children[fpiKey.ApplicationOwner[i].GetSegmentPath()] = &fpiKey.ApplicationOwner[i]
    }
    return children
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetBundleName() string { return "cisco_ios_xr" }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetYangName() string { return "fpi-key" }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) SetParent(parent types.Entity) { fpiKey.parent = parent }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetParent() types.Entity { return fpiKey.parent }

func (fpiKey *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi
// FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_FpiKey_ApplicationOwner) GetParentYangName() string { return "fpi-key" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite ID.
    RewriteId MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id" { return "RewriteId" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-id" {
        return &rewriteId.RewriteId
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rewrite-id"] = &rewriteId.RewriteId
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId
// Rewrite ID
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RewriteIDType. The type is MgmtLsdRwId.
    RewriteIdType interface{}

    // Label context.
    LabelContext MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext

    // Local label rewrite information.
    LocalLabelRewrite MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetFilter() yfilter.YFilter { return rewriteId.YFilter }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) SetFilter(yf yfilter.YFilter) { rewriteId.YFilter = yf }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetGoName(yname string) string {
    if yname == "rewrite-id-type" { return "RewriteIdType" }
    if yname == "label-context" { return "LabelContext" }
    if yname == "local-label-rewrite" { return "LocalLabelRewrite" }
    return ""
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetSegmentPath() string {
    return "rewrite-id"
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-context" {
        return &rewriteId.LabelContext
    }
    if childYangName == "local-label-rewrite" {
        return &rewriteId.LocalLabelRewrite
    }
    return nil
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-context"] = &rewriteId.LabelContext
    children["local-label-rewrite"] = &rewriteId.LocalLabelRewrite
    return children
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rewrite-id-type"] = rewriteId.RewriteIdType
    return leafs
}

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetYangName() string { return "rewrite-id" }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) SetParent(parent types.Entity) { rewriteId.parent = parent }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetParent() types.Entity { return rewriteId.parent }

func (rewriteId *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext
// Label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LabelContextType. The type is MgmtLsdLblCtx.
    LabelContextType interface{}

    // IPv4 label context.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data

    // IPv6 label context.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data

    // TEv4 label context.
    Tev4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data

    // L3VPN IPv4 label context.
    Ipv4L3VpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData

    // L3VPN IPv6 label context.
    Ipv6L3VpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData

    // L3VPN VRF label context.
    VrfL3VpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData

    // L3VPN CEv4 label context.
    Cev4L3VpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData

    // L3VPN CEv6 label context.
    Cev6L3VpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData

    // Pseudowire label context.
    PseudowireData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData

    // Label block context.
    LabelBlockData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData

    // IP Subscriber context.
    IpSubData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData

    // TEv4 P2MP context.
    Tev4P2MpData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData

    // MLDPv4 LSM-ID context.
    MldPv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data

    // Pseudowire Head-end label context.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData

    // TP context.
    TpData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData

    // Generic routing encapsulation context.
    GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation

    // Generic routing encapsulation context.
    Ipv6GenericRoutingEncapsulation MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation

    // EVPN context.
    EvpnData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData

    // BFD BLB label context.
    Ipv4BlbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData

    // BFD BLB label context.
    Ipv6BlbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData

    // PIM I-PMSI label conext.
    PiMiPmsiData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData

    // PIM S-PMSI label conext.
    PiMsPmsiData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData

    // L3VPN NH SET label context.
    NextHopSetL3Vpn MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn

    // SR Prefix Segment context.
    SrPrefixSegment MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment

    // SR Adj Segment ipv4 context.
    SrAdjSegmentIpv4 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4

    // SR Adj Segment ipv6 context.
    SrAdjSegmentIpv6 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6

    // Label block SRGB context.
    LabelBlockSrgbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData

    // MPLS TE tunnel binding context.
    TeBinding MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding

    // Label block SRLB context.
    LabelBlockSrlbData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetFilter() yfilter.YFilter { return labelContext.YFilter }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) SetFilter(yf yfilter.YFilter) { labelContext.YFilter = yf }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetGoName(yname string) string {
    if yname == "label-context-type" { return "LabelContextType" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "ipv4l3vpn-data" { return "Ipv4L3VpnData" }
    if yname == "ipv6l3vpn-data" { return "Ipv6L3VpnData" }
    if yname == "vrf-l3vpn-data" { return "VrfL3VpnData" }
    if yname == "cev4l3vpn-data" { return "Cev4L3VpnData" }
    if yname == "cev6l3vpn-data" { return "Cev6L3VpnData" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "label-block-data" { return "LabelBlockData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "tev4p2mp-data" { return "Tev4P2MpData" }
    if yname == "mld-pv4-data" { return "MldPv4Data" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "tp-data" { return "TpData" }
    if yname == "generic-routing-encapsulation" { return "GenericRoutingEncapsulation" }
    if yname == "ipv6-generic-routing-encapsulation" { return "Ipv6GenericRoutingEncapsulation" }
    if yname == "evpn-data" { return "EvpnData" }
    if yname == "ipv4blb-data" { return "Ipv4BlbData" }
    if yname == "ipv6blb-data" { return "Ipv6BlbData" }
    if yname == "pi-mi-pmsi-data" { return "PiMiPmsiData" }
    if yname == "pi-ms-pmsi-data" { return "PiMsPmsiData" }
    if yname == "next-hop-set-l3vpn" { return "NextHopSetL3Vpn" }
    if yname == "sr-prefix-segment" { return "SrPrefixSegment" }
    if yname == "sr-adj-segment-ipv4" { return "SrAdjSegmentIpv4" }
    if yname == "sr-adj-segment-ipv6" { return "SrAdjSegmentIpv6" }
    if yname == "label-block-srgb-data" { return "LabelBlockSrgbData" }
    if yname == "te-binding" { return "TeBinding" }
    if yname == "label-block-srlb-data" { return "LabelBlockSrlbData" }
    return ""
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetSegmentPath() string {
    return "label-context"
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-data" {
        return &labelContext.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &labelContext.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &labelContext.Tev4Data
    }
    if childYangName == "ipv4l3vpn-data" {
        return &labelContext.Ipv4L3VpnData
    }
    if childYangName == "ipv6l3vpn-data" {
        return &labelContext.Ipv6L3VpnData
    }
    if childYangName == "vrf-l3vpn-data" {
        return &labelContext.VrfL3VpnData
    }
    if childYangName == "cev4l3vpn-data" {
        return &labelContext.Cev4L3VpnData
    }
    if childYangName == "cev6l3vpn-data" {
        return &labelContext.Cev6L3VpnData
    }
    if childYangName == "pseudowire-data" {
        return &labelContext.PseudowireData
    }
    if childYangName == "label-block-data" {
        return &labelContext.LabelBlockData
    }
    if childYangName == "ip-sub-data" {
        return &labelContext.IpSubData
    }
    if childYangName == "tev4p2mp-data" {
        return &labelContext.Tev4P2MpData
    }
    if childYangName == "mld-pv4-data" {
        return &labelContext.MldPv4Data
    }
    if childYangName == "pseudowire-head-end-data" {
        return &labelContext.PseudowireHeadEndData
    }
    if childYangName == "tp-data" {
        return &labelContext.TpData
    }
    if childYangName == "generic-routing-encapsulation" {
        return &labelContext.GenericRoutingEncapsulation
    }
    if childYangName == "ipv6-generic-routing-encapsulation" {
        return &labelContext.Ipv6GenericRoutingEncapsulation
    }
    if childYangName == "evpn-data" {
        return &labelContext.EvpnData
    }
    if childYangName == "ipv4blb-data" {
        return &labelContext.Ipv4BlbData
    }
    if childYangName == "ipv6blb-data" {
        return &labelContext.Ipv6BlbData
    }
    if childYangName == "pi-mi-pmsi-data" {
        return &labelContext.PiMiPmsiData
    }
    if childYangName == "pi-ms-pmsi-data" {
        return &labelContext.PiMsPmsiData
    }
    if childYangName == "next-hop-set-l3vpn" {
        return &labelContext.NextHopSetL3Vpn
    }
    if childYangName == "sr-prefix-segment" {
        return &labelContext.SrPrefixSegment
    }
    if childYangName == "sr-adj-segment-ipv4" {
        return &labelContext.SrAdjSegmentIpv4
    }
    if childYangName == "sr-adj-segment-ipv6" {
        return &labelContext.SrAdjSegmentIpv6
    }
    if childYangName == "label-block-srgb-data" {
        return &labelContext.LabelBlockSrgbData
    }
    if childYangName == "te-binding" {
        return &labelContext.TeBinding
    }
    if childYangName == "label-block-srlb-data" {
        return &labelContext.LabelBlockSrlbData
    }
    return nil
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-data"] = &labelContext.Ipv4Data
    children["ipv6-data"] = &labelContext.Ipv6Data
    children["tev4-data"] = &labelContext.Tev4Data
    children["ipv4l3vpn-data"] = &labelContext.Ipv4L3VpnData
    children["ipv6l3vpn-data"] = &labelContext.Ipv6L3VpnData
    children["vrf-l3vpn-data"] = &labelContext.VrfL3VpnData
    children["cev4l3vpn-data"] = &labelContext.Cev4L3VpnData
    children["cev6l3vpn-data"] = &labelContext.Cev6L3VpnData
    children["pseudowire-data"] = &labelContext.PseudowireData
    children["label-block-data"] = &labelContext.LabelBlockData
    children["ip-sub-data"] = &labelContext.IpSubData
    children["tev4p2mp-data"] = &labelContext.Tev4P2MpData
    children["mld-pv4-data"] = &labelContext.MldPv4Data
    children["pseudowire-head-end-data"] = &labelContext.PseudowireHeadEndData
    children["tp-data"] = &labelContext.TpData
    children["generic-routing-encapsulation"] = &labelContext.GenericRoutingEncapsulation
    children["ipv6-generic-routing-encapsulation"] = &labelContext.Ipv6GenericRoutingEncapsulation
    children["evpn-data"] = &labelContext.EvpnData
    children["ipv4blb-data"] = &labelContext.Ipv4BlbData
    children["ipv6blb-data"] = &labelContext.Ipv6BlbData
    children["pi-mi-pmsi-data"] = &labelContext.PiMiPmsiData
    children["pi-ms-pmsi-data"] = &labelContext.PiMsPmsiData
    children["next-hop-set-l3vpn"] = &labelContext.NextHopSetL3Vpn
    children["sr-prefix-segment"] = &labelContext.SrPrefixSegment
    children["sr-adj-segment-ipv4"] = &labelContext.SrAdjSegmentIpv4
    children["sr-adj-segment-ipv6"] = &labelContext.SrAdjSegmentIpv6
    children["label-block-srgb-data"] = &labelContext.LabelBlockSrgbData
    children["te-binding"] = &labelContext.TeBinding
    children["label-block-srlb-data"] = &labelContext.LabelBlockSrlbData
    return children
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-context-type"] = labelContext.LabelContextType
    return leafs
}

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetBundleName() string { return "cisco_ios_xr" }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetYangName() string { return "label-context" }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) SetParent(parent types.Entity) { labelContext.parent = parent }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetParent() types.Entity { return labelContext.parent }

func (labelContext *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data
// IPv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // IPv4 prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["security-id"] = ipv4Data.SecurityId
    leafs["vrf-name"] = ipv4Data.VrfName
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data
// IPv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // VRF Name. The type is string with length: 0..33.
    VrfName interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "vrf-name" { return "VrfName" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["prefix-length"] = ipv6Data.PrefixLength
    leafs["security-id"] = ipv6Data.SecurityId
    leafs["vrf-name"] = ipv6Data.VrfName
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data
// TEv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Tunnel destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelDest interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Extended tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Is this an SRTE head tunnel. The type is interface{} with range:
    // -2147483648..2147483647.
    IsSrte interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "tunnel-dest" { return "TunnelDest" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "is-srte" { return "IsSrte" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["tunnel-source"] = tev4Data.TunnelSource
    leafs["tunnel-dest"] = tev4Data.TunnelDest
    leafs["tunnel-id"] = tev4Data.TunnelId
    leafs["tunnel-id-extension"] = tev4Data.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4Data.TunnelLspId
    leafs["is-srte"] = tev4Data.IsSrte
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData
// L3VPN IPv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetFilter() yfilter.YFilter { return ipv4L3VpnData.YFilter }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetFilter(yf yfilter.YFilter) { ipv4L3VpnData.YFilter = yf }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetSegmentPath() string {
    return "ipv4l3vpn-data"
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv4L3VpnData.Prefix
    leafs["prefix-length"] = ipv4L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv4L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetYangName() string { return "ipv4l3vpn-data" }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) SetParent(parent types.Entity) { ipv4L3VpnData.parent = parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParent() types.Entity { return ipv4L3VpnData.parent }

func (ipv4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData
// L3VPN IPv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Route distinguisher. The type is interface{} with range:
    // 0..18446744073709551615.
    RouteDistinguisher interface{}
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetFilter() yfilter.YFilter { return ipv6L3VpnData.YFilter }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetFilter(yf yfilter.YFilter) { ipv6L3VpnData.YFilter = yf }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    return ""
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetSegmentPath() string {
    return "ipv6l3vpn-data"
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = ipv6L3VpnData.Prefix
    leafs["prefix-length"] = ipv6L3VpnData.PrefixLength
    leafs["route-distinguisher"] = ipv6L3VpnData.RouteDistinguisher
    return leafs
}

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetYangName() string { return "ipv6l3vpn-data" }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) SetParent(parent types.Entity) { ipv6L3VpnData.parent = parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParent() types.Entity { return ipv6L3VpnData.parent }

func (ipv6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData
// L3VPN VRF label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetFilter() yfilter.YFilter { return vrfL3VpnData.YFilter }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetFilter(yf yfilter.YFilter) { vrfL3VpnData.YFilter = yf }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetSegmentPath() string {
    return "vrf-l3vpn-data"
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = vrfL3VpnData.TableId
    leafs["security-id"] = vrfL3VpnData.SecurityId
    return leafs
}

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetYangName() string { return "vrf-l3vpn-data" }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) SetParent(parent types.Entity) { vrfL3VpnData.parent = parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParent() types.Entity { return vrfL3VpnData.parent }

func (vrfL3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_VrfL3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData
// L3VPN CEv4 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetFilter() yfilter.YFilter { return cev4L3VpnData.YFilter }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetFilter(yf yfilter.YFilter) { cev4L3VpnData.YFilter = yf }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetSegmentPath() string {
    return "cev4l3vpn-data"
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev4L3VpnData.TableId
    leafs["ipv4-next-hop"] = cev4L3VpnData.Ipv4NextHop
    leafs["security-id"] = cev4L3VpnData.SecurityId
    return leafs
}

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetYangName() string { return "cev4l3vpn-data" }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) SetParent(parent types.Entity) { cev4L3VpnData.parent = parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParent() types.Entity { return cev4L3VpnData.parent }

func (cev4L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev4L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData
// L3VPN CEv6 label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetFilter() yfilter.YFilter { return cev6L3VpnData.YFilter }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetFilter(yf yfilter.YFilter) { cev6L3VpnData.YFilter = yf }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "security-id" { return "SecurityId" }
    return ""
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetSegmentPath() string {
    return "cev6l3vpn-data"
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = cev6L3VpnData.TableId
    leafs["ipv6-next-hop"] = cev6L3VpnData.Ipv6NextHop
    leafs["security-id"] = cev6L3VpnData.SecurityId
    return leafs
}

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleName() string { return "cisco_ios_xr" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetYangName() string { return "cev6l3vpn-data" }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) SetParent(parent types.Entity) { cev6L3VpnData.parent = parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParent() types.Entity { return cev6L3VpnData.parent }

func (cev6L3VpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Cev6L3VpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData
// Pseudowire label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Pseudo-wire ID. The type is interface{} with range:
    // 0..18446744073709551615.
    PseudowireId interface{}

    // Remote L2 Router ID. The type is interface{} with range: 0..4294967295.
    RemoteL2RouterId interface{}

    // Subinterface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Subinterface interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "pseudowire-id" { return "PseudowireId" }
    if yname == "remote-l2-router-id" { return "RemoteL2RouterId" }
    if yname == "subinterface" { return "Subinterface" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = pseudowireData.Prefix
    leafs["pseudowire-id"] = pseudowireData.PseudowireId
    leafs["remote-l2-router-id"] = pseudowireData.RemoteL2RouterId
    leafs["subinterface"] = pseudowireData.Subinterface
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData
// Label block context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Service. The type is interface{} with range: 0..255.
    Service interface{}

    // VPN ID. The type is interface{} with range: 0..65535.
    VpnId interface{}

    // Edge ID. The type is interface{} with range: 0..65535.
    EdgeId interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetFilter() yfilter.YFilter { return labelBlockData.YFilter }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) SetFilter(yf yfilter.YFilter) { labelBlockData.YFilter = yf }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetGoName(yname string) string {
    if yname == "service" { return "Service" }
    if yname == "vpn-id" { return "VpnId" }
    if yname == "edge-id" { return "EdgeId" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetSegmentPath() string {
    return "label-block-data"
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["service"] = labelBlockData.Service
    leafs["vpn-id"] = labelBlockData.VpnId
    leafs["edge-id"] = labelBlockData.EdgeId
    leafs["offset"] = labelBlockData.Offset
    leafs["size"] = labelBlockData.Size
    return leafs
}

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetYangName() string { return "label-block-data" }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) SetParent(parent types.Entity) { labelBlockData.parent = parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParent() types.Entity { return labelBlockData.parent }

func (labelBlockData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData
// IP Subscriber context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table Id. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Parent interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    ParentInterface interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "parent-interface" { return "ParentInterface" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["parent-interface"] = ipSubData.ParentInterface
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_IpSubData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData
// TEv4 P2MP context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Tunnel source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TunnelSource interface{}

    // Point to multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Tunnel ID. The type is interface{} with range: 0..4294967295.
    TunnelId interface{}

    // Tunnel ID extension. The type is interface{} with range: 0..4294967295.
    TunnelIdExtension interface{}

    // Tunnel LSP ID. The type is interface{} with range: 0..4294967295.
    TunnelLspId interface{}

    // Previous hop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PreviousHop interface{}
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetFilter() yfilter.YFilter { return tev4P2MpData.YFilter }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetFilter(yf yfilter.YFilter) { tev4P2MpData.YFilter = yf }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "tunnel-source" { return "TunnelSource" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "tunnel-id-extension" { return "TunnelIdExtension" }
    if yname == "tunnel-lsp-id" { return "TunnelLspId" }
    if yname == "previous-hop" { return "PreviousHop" }
    return ""
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetSegmentPath() string {
    return "tev4p2mp-data"
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4P2MpData.TableId
    leafs["tunnel-source"] = tev4P2MpData.TunnelSource
    leafs["p2mp-id"] = tev4P2MpData.P2MpId
    leafs["tunnel-id"] = tev4P2MpData.TunnelId
    leafs["tunnel-id-extension"] = tev4P2MpData.TunnelIdExtension
    leafs["tunnel-lsp-id"] = tev4P2MpData.TunnelLspId
    leafs["previous-hop"] = tev4P2MpData.PreviousHop
    return leafs
}

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleName() string { return "cisco_ios_xr" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetYangName() string { return "tev4p2mp-data" }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) SetParent(parent types.Entity) { tev4P2MpData.parent = parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParent() types.Entity { return tev4P2MpData.parent }

func (tev4P2MpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Tev4P2MpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data
// MLDPv4 LSM-ID context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // LSM ID Type. The type is interface{} with range: 0..65535.
    Type interface{}

    // LSM ID. The type is interface{} with range: 0..4294967295.
    LsmId interface{}

    // Peer LSR Id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerLsrid interface{}

    // Peer Label Space Id. The type is interface{} with range: 0..65535.
    PeerLabelSpaceId interface{}
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetFilter() yfilter.YFilter { return mldPv4Data.YFilter }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) SetFilter(yf yfilter.YFilter) { mldPv4Data.YFilter = yf }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "type" { return "Type" }
    if yname == "lsm-id" { return "LsmId" }
    if yname == "peer-lsrid" { return "PeerLsrid" }
    if yname == "peer-label-space-id" { return "PeerLabelSpaceId" }
    return ""
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetSegmentPath() string {
    return "mld-pv4-data"
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = mldPv4Data.TableId
    leafs["type"] = mldPv4Data.Type
    leafs["lsm-id"] = mldPv4Data.LsmId
    leafs["peer-lsrid"] = mldPv4Data.PeerLsrid
    leafs["peer-label-space-id"] = mldPv4Data.PeerLabelSpaceId
    return leafs
}

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetYangName() string { return "mld-pv4-data" }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) SetParent(parent types.Entity) { mldPv4Data.parent = parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParent() types.Entity { return mldPv4Data.parent }

func (mldPv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_MldPv4Data) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData
// Pseudowire Head-end label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheIntf interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "pwhe-intf" { return "PwheIntf" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-intf"] = pseudowireHeadEndData.PwheIntf
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PseudowireHeadEndData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData
// TP context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TP source global ID. The type is interface{} with range: 0..4294967295.
    SourceGlobalId interface{}

    // TP source node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceNodeId interface{}

    // TP destination global ID. The type is interface{} with range:
    // 0..4294967295.
    DestGlobalId interface{}

    // TP destination node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestNodeId interface{}

    // TP source tunnel ID. The type is interface{} with range: 0..65535.
    SourceTunnelId interface{}

    // TP destination tunnel ID. The type is interface{} with range: 0..65535.
    DestTunnelId interface{}

    // TP LSP ID. The type is interface{} with range: 0..65535.
    LspId interface{}
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetFilter() yfilter.YFilter { return tpData.YFilter }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) SetFilter(yf yfilter.YFilter) { tpData.YFilter = yf }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetGoName(yname string) string {
    if yname == "source-global-id" { return "SourceGlobalId" }
    if yname == "source-node-id" { return "SourceNodeId" }
    if yname == "dest-global-id" { return "DestGlobalId" }
    if yname == "dest-node-id" { return "DestNodeId" }
    if yname == "source-tunnel-id" { return "SourceTunnelId" }
    if yname == "dest-tunnel-id" { return "DestTunnelId" }
    if yname == "lsp-id" { return "LspId" }
    return ""
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetSegmentPath() string {
    return "tp-data"
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-global-id"] = tpData.SourceGlobalId
    leafs["source-node-id"] = tpData.SourceNodeId
    leafs["dest-global-id"] = tpData.DestGlobalId
    leafs["dest-node-id"] = tpData.DestNodeId
    leafs["source-tunnel-id"] = tpData.SourceTunnelId
    leafs["dest-tunnel-id"] = tpData.DestTunnelId
    leafs["lsp-id"] = tpData.LspId
    return leafs
}

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetBundleName() string { return "cisco_ios_xr" }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetYangName() string { return "tp-data" }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) SetParent(parent types.Entity) { tpData.parent = parent }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetParent() types.Entity { return tpData.parent }

func (tpData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TpData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    GreInterface interface{}
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return genericRoutingEncapsulation.YFilter }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { genericRoutingEncapsulation.YFilter = yf }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "gre-interface" { return "GreInterface" }
    return ""
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetSegmentPath() string {
    return "generic-routing-encapsulation"
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gre-interface"] = genericRoutingEncapsulation.GreInterface
    return leafs
}

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetYangName() string { return "generic-routing-encapsulation" }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) SetParent(parent types.Entity) { genericRoutingEncapsulation.parent = parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParent() types.Entity { return genericRoutingEncapsulation.parent }

func (genericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation
// Generic routing encapsulation context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic routing encapsulation IPv6 interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    Greipv6Interface interface{}
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetFilter() yfilter.YFilter { return ipv6GenericRoutingEncapsulation.YFilter }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetFilter(yf yfilter.YFilter) { ipv6GenericRoutingEncapsulation.YFilter = yf }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetGoName(yname string) string {
    if yname == "greipv6-interface" { return "Greipv6Interface" }
    return ""
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetSegmentPath() string {
    return "ipv6-generic-routing-encapsulation"
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["greipv6-interface"] = ipv6GenericRoutingEncapsulation.Greipv6Interface
    return leafs
}

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetYangName() string { return "ipv6-generic-routing-encapsulation" }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) SetParent(parent types.Entity) { ipv6GenericRoutingEncapsulation.parent = parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParent() types.Entity { return ipv6GenericRoutingEncapsulation.parent }

func (ipv6GenericRoutingEncapsulation *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6GenericRoutingEncapsulation) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData
// EVPN context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EVPN ID. The type is interface{} with range: 0..4294967295.
    EvpnId interface{}

    // EVPN TAG. The type is interface{} with range: 0..4294967295.
    EvpnTag interface{}

    // Ethernet Segment ID. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    EthernetSegment interface{}
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetFilter() yfilter.YFilter { return evpnData.YFilter }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) SetFilter(yf yfilter.YFilter) { evpnData.YFilter = yf }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetGoName(yname string) string {
    if yname == "evpn-id" { return "EvpnId" }
    if yname == "evpn-tag" { return "EvpnTag" }
    if yname == "ethernet-segment" { return "EthernetSegment" }
    return ""
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetSegmentPath() string {
    return "evpn-data"
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["evpn-id"] = evpnData.EvpnId
    leafs["evpn-tag"] = evpnData.EvpnTag
    leafs["ethernet-segment"] = evpnData.EthernetSegment
    return leafs
}

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleName() string { return "cisco_ios_xr" }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetYangName() string { return "evpn-data" }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) SetParent(parent types.Entity) { evpnData.parent = parent }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetParent() types.Entity { return evpnData.parent }

func (evpnData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_EvpnData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv4 prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetFilter() yfilter.YFilter { return ipv4BlbData.YFilter }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetFilter(yf yfilter.YFilter) { ipv4BlbData.YFilter = yf }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetSegmentPath() string {
    return "ipv4blb-data"
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv4BlbData.BlbIntf
    leafs["prefix"] = ipv4BlbData.Prefix
    return leafs
}

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetYangName() string { return "ipv4blb-data" }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) SetParent(parent types.Entity) { ipv4BlbData.parent = parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParent() types.Entity { return ipv4BlbData.parent }

func (ipv4BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv4BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData
// BFD BLB label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD BLB interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BlbIntf interface{}

    // IPv6 prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetFilter() yfilter.YFilter { return ipv6BlbData.YFilter }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetFilter(yf yfilter.YFilter) { ipv6BlbData.YFilter = yf }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetGoName(yname string) string {
    if yname == "blb-intf" { return "BlbIntf" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetSegmentPath() string {
    return "ipv6blb-data"
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["blb-intf"] = ipv6BlbData.BlbIntf
    leafs["prefix"] = ipv6BlbData.Prefix
    return leafs
}

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetYangName() string { return "ipv6blb-data" }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) SetParent(parent types.Entity) { ipv6BlbData.parent = parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParent() types.Entity { return ipv6BlbData.parent }

func (ipv6BlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_Ipv6BlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData
// PIM I-PMSI label conext
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetFilter() yfilter.YFilter { return piMiPmsiData.YFilter }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetFilter(yf yfilter.YFilter) { piMiPmsiData.YFilter = yf }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    return ""
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetSegmentPath() string {
    return "pi-mi-pmsi-data"
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMiPmsiData.VrfId
    leafs["head"] = piMiPmsiData.Head
    leafs["v6"] = piMiPmsiData.V6
    return leafs
}

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetYangName() string { return "pi-mi-pmsi-data" }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) SetParent(parent types.Entity) { piMiPmsiData.parent = parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParent() types.Entity { return piMiPmsiData.parent }

func (piMiPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMiPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData
// PIM S-PMSI label conext
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF ID. The type is interface{} with range: 0..4294967295.
    VrfId interface{}

    // Originating Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Head. The type is interface{} with range: -2147483648..2147483647.
    Head interface{}

    // PIM6. The type is interface{} with range: -2147483648..2147483647.
    V6 interface{}

    // Head LSM-ID. The type is interface{} with range: 0..4294967295.
    Hli interface{}

    // Segmented Multicast. The type is interface{} with range:
    // -2147483648..2147483647.
    Seg interface{}
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetFilter() yfilter.YFilter { return piMsPmsiData.YFilter }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetFilter(yf yfilter.YFilter) { piMsPmsiData.YFilter = yf }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetGoName(yname string) string {
    if yname == "vrf-id" { return "VrfId" }
    if yname == "source" { return "Source" }
    if yname == "head" { return "Head" }
    if yname == "v6" { return "V6" }
    if yname == "hli" { return "Hli" }
    if yname == "seg" { return "Seg" }
    return ""
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetSegmentPath() string {
    return "pi-ms-pmsi-data"
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-id"] = piMsPmsiData.VrfId
    leafs["source"] = piMsPmsiData.Source
    leafs["head"] = piMsPmsiData.Head
    leafs["v6"] = piMsPmsiData.V6
    leafs["hli"] = piMsPmsiData.Hli
    leafs["seg"] = piMsPmsiData.Seg
    return leafs
}

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleName() string { return "cisco_ios_xr" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetYangName() string { return "pi-ms-pmsi-data" }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) SetParent(parent types.Entity) { piMsPmsiData.parent = parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParent() types.Entity { return piMsPmsiData.parent }

func (piMsPmsiData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_PiMsPmsiData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn
// L3VPN NH SET label context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Next Hop Set ID. The type is interface{} with range: 0..4294967295.
    NextHopSetId interface{}
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetFilter() yfilter.YFilter { return nextHopSetL3Vpn.YFilter }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetFilter(yf yfilter.YFilter) { nextHopSetL3Vpn.YFilter = yf }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "next-hop-set-id" { return "NextHopSetId" }
    return ""
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetSegmentPath() string {
    return "next-hop-set-l3vpn"
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nextHopSetL3Vpn.TableId
    leafs["next-hop-set-id"] = nextHopSetL3Vpn.NextHopSetId
    return leafs
}

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleName() string { return "cisco_ios_xr" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetYangName() string { return "next-hop-set-l3vpn" }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) SetParent(parent types.Entity) { nextHopSetL3Vpn.parent = parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParent() types.Entity { return nextHopSetL3Vpn.parent }

func (nextHopSetL3Vpn *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_NextHopSetL3Vpn) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment
// SR Prefix Segment context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix Segment ID. The type is interface{} with range: 0..4294967295.
    SegmentId interface{}
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetFilter() yfilter.YFilter { return srPrefixSegment.YFilter }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetFilter(yf yfilter.YFilter) { srPrefixSegment.YFilter = yf }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "segment-id" { return "SegmentId" }
    return ""
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetSegmentPath() string {
    return "sr-prefix-segment"
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = srPrefixSegment.TableId
    leafs["segment-id"] = srPrefixSegment.SegmentId
    return leafs
}

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleName() string { return "cisco_ios_xr" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetYangName() string { return "sr-prefix-segment" }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) SetParent(parent types.Entity) { srPrefixSegment.parent = parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParent() types.Entity { return srPrefixSegment.parent }

func (srPrefixSegment *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrPrefixSegment) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4
// SR Adj Segment ipv4 context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv4 address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetFilter() yfilter.YFilter { return srAdjSegmentIpv4.YFilter }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv4.YFilter = yf }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetSegmentPath() string {
    return "sr-adj-segment-ipv4"
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv4.Index
    leafs["type"] = srAdjSegmentIpv4.Type
    leafs["intf"] = srAdjSegmentIpv4.Intf
    leafs["addr"] = srAdjSegmentIpv4.Addr
    return leafs
}

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetYangName() string { return "sr-adj-segment-ipv4" }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) SetParent(parent types.Entity) { srAdjSegmentIpv4.parent = parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParent() types.Entity { return srAdjSegmentIpv4.parent }

func (srAdjSegmentIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv4) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6
// SR Adj Segment ipv6 context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Adjacency index. The type is interface{} with range: 0..4294967295.
    Index interface{}

    // Adjacency type. The type is interface{} with range: 0..4294967295.
    Type interface{}

    // Adjacency interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Intf interface{}

    // Adjacency nexthop IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addr interface{}
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetFilter() yfilter.YFilter { return srAdjSegmentIpv6.YFilter }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetFilter(yf yfilter.YFilter) { srAdjSegmentIpv6.YFilter = yf }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetGoName(yname string) string {
    if yname == "index" { return "Index" }
    if yname == "type" { return "Type" }
    if yname == "intf" { return "Intf" }
    if yname == "addr" { return "Addr" }
    return ""
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetSegmentPath() string {
    return "sr-adj-segment-ipv6"
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["index"] = srAdjSegmentIpv6.Index
    leafs["type"] = srAdjSegmentIpv6.Type
    leafs["intf"] = srAdjSegmentIpv6.Intf
    leafs["addr"] = srAdjSegmentIpv6.Addr
    return leafs
}

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetYangName() string { return "sr-adj-segment-ipv6" }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) SetParent(parent types.Entity) { srAdjSegmentIpv6.parent = parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParent() types.Entity { return srAdjSegmentIpv6.parent }

func (srAdjSegmentIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_SrAdjSegmentIpv6) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData
// Label block SRGB context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetFilter() yfilter.YFilter { return labelBlockSrgbData.YFilter }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetFilter(yf yfilter.YFilter) { labelBlockSrgbData.YFilter = yf }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetSegmentPath() string {
    return "label-block-srgb-data"
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrgbData.StartLabel
    leafs["offset"] = labelBlockSrgbData.Offset
    leafs["size"] = labelBlockSrgbData.Size
    return leafs
}

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetYangName() string { return "label-block-srgb-data" }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) SetParent(parent types.Entity) { labelBlockSrgbData.parent = parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParent() types.Entity { return labelBlockSrgbData.parent }

func (labelBlockSrgbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrgbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding
// MPLS TE tunnel binding context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS Traffic Engineering Tunnel or Group ID. The type is interface{} with
    // range: 0..4294967295.
    TeIdentifier interface{}

    // Type of identifier for the binding. The type is MgmtLsdTeBinding.
    TeType interface{}
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetFilter() yfilter.YFilter { return teBinding.YFilter }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) SetFilter(yf yfilter.YFilter) { teBinding.YFilter = yf }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetGoName(yname string) string {
    if yname == "te-identifier" { return "TeIdentifier" }
    if yname == "te-type" { return "TeType" }
    return ""
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetSegmentPath() string {
    return "te-binding"
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["te-identifier"] = teBinding.TeIdentifier
    leafs["te-type"] = teBinding.TeType
    return leafs
}

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleName() string { return "cisco_ios_xr" }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetYangName() string { return "te-binding" }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) SetParent(parent types.Entity) { teBinding.parent = parent }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetParent() types.Entity { return teBinding.parent }

func (teBinding *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_TeBinding) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData
// Label block SRLB context
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start Label. The type is interface{} with range: 0..4294967295.
    StartLabel interface{}

    // Offset. The type is interface{} with range: 0..4294967295.
    Offset interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    Size interface{}
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetFilter() yfilter.YFilter { return labelBlockSrlbData.YFilter }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetFilter(yf yfilter.YFilter) { labelBlockSrlbData.YFilter = yf }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetGoName(yname string) string {
    if yname == "start-label" { return "StartLabel" }
    if yname == "offset" { return "Offset" }
    if yname == "size" { return "Size" }
    return ""
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetSegmentPath() string {
    return "label-block-srlb-data"
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-label"] = labelBlockSrlbData.StartLabel
    leafs["offset"] = labelBlockSrlbData.Offset
    leafs["size"] = labelBlockSrlbData.Size
    return leafs
}

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleName() string { return "cisco_ios_xr" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetYangName() string { return "label-block-srlb-data" }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) SetParent(parent types.Entity) { labelBlockSrlbData.parent = parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParent() types.Entity { return labelBlockSrlbData.parent }

func (labelBlockSrlbData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LabelContext_LabelBlockSrlbData) GetParentYangName() string { return "label-context" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite
// Local label rewrite information
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // label data. The type is slice of interface{} with range: 0..4294967295.
    LabelData []interface{}
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetFilter() yfilter.YFilter { return localLabelRewrite.YFilter }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) SetFilter(yf yfilter.YFilter) { localLabelRewrite.YFilter = yf }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetGoName(yname string) string {
    if yname == "label-data" { return "LabelData" }
    return ""
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetSegmentPath() string {
    return "local-label-rewrite"
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-data"] = localLabelRewrite.LabelData
    return leafs
}

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetBundleName() string { return "cisco_ios_xr" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetYangName() string { return "local-label-rewrite" }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) SetParent(parent types.Entity) { localLabelRewrite.parent = parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetParent() types.Entity { return localLabelRewrite.parent }

func (localLabelRewrite *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_RewriteId_RewriteId_LocalLabelRewrite) GetParentYangName() string { return "rewrite-id" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi
// Associated FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPI.
    Fpi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi

    // Application owner instance. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner.
    ApplicationOwner []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetFilter() yfilter.YFilter { return associatedFpi.YFilter }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) SetFilter(yf yfilter.YFilter) { associatedFpi.YFilter = yf }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetGoName(yname string) string {
    if yname == "fpi" { return "Fpi" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetSegmentPath() string {
    return "associated-fpi"
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fpi" {
        return &associatedFpi.Fpi
    }
    if childYangName == "application-owner" {
        for _, c := range associatedFpi.ApplicationOwner {
            if associatedFpi.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner{}
        associatedFpi.ApplicationOwner = append(associatedFpi.ApplicationOwner, child)
        return &associatedFpi.ApplicationOwner[len(associatedFpi.ApplicationOwner)-1]
    }
    return nil
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fpi"] = &associatedFpi.Fpi
    for i := range associatedFpi.ApplicationOwner {
        children[associatedFpi.ApplicationOwner[i].GetSegmentPath()] = &associatedFpi.ApplicationOwner[i]
    }
    return children
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetBundleName() string { return "cisco_ios_xr" }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetYangName() string { return "associated-fpi" }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) SetParent(parent types.Entity) { associatedFpi.parent = parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetParent() types.Entity { return associatedFpi.parent }

func (associatedFpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi
// FPI
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FPIType. The type is MgmtLsdFpi.
    FpiType interface{}

    // label data.
    LabelData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData

    // te data.
    TeData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData

    // dmtc ext intf data.
    DmtcExtIntfData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetFilter() yfilter.YFilter { return fpi.YFilter }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) SetFilter(yf yfilter.YFilter) { fpi.YFilter = yf }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetGoName(yname string) string {
    if yname == "fpi-type" { return "FpiType" }
    if yname == "label-data" { return "LabelData" }
    if yname == "te-data" { return "TeData" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "dmtc-ext-intf-data" { return "DmtcExtIntfData" }
    return ""
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetSegmentPath() string {
    return "fpi"
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-data" {
        return &fpi.LabelData
    }
    if childYangName == "te-data" {
        return &fpi.TeData
    }
    if childYangName == "ipv4-data" {
        return &fpi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &fpi.Ipv6Data
    }
    if childYangName == "pw-list-data" {
        return &fpi.PwListData
    }
    if childYangName == "dmtc-ext-intf-data" {
        return &fpi.DmtcExtIntfData
    }
    return nil
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-data"] = &fpi.LabelData
    children["te-data"] = &fpi.TeData
    children["ipv4-data"] = &fpi.Ipv4Data
    children["ipv6-data"] = &fpi.Ipv6Data
    children["pw-list-data"] = &fpi.PwListData
    children["dmtc-ext-intf-data"] = &fpi.DmtcExtIntfData
    return children
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["fpi-type"] = fpi.FpiType
    return leafs
}

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetBundleName() string { return "cisco_ios_xr" }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetYangName() string { return "fpi" }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) SetParent(parent types.Entity) { fpi.parent = parent }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetParent() types.Entity { return fpi.parent }

func (fpi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData
// label data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label value. The type is interface{} with range: 0..4294967295.
    Label interface{}

    // Security ID. The type is interface{} with range: 0..4294967295.
    SecurityId interface{}

    // ELC. The type is interface{} with range: -2147483648..2147483647.
    Elc interface{}
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetFilter() yfilter.YFilter { return labelData.YFilter }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) SetFilter(yf yfilter.YFilter) { labelData.YFilter = yf }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "security-id" { return "SecurityId" }
    if yname == "elc" { return "Elc" }
    return ""
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetSegmentPath() string {
    return "label-data"
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelData.Label
    leafs["security-id"] = labelData.SecurityId
    leafs["elc"] = labelData.Elc
    return leafs
}

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetBundleName() string { return "cisco_ios_xr" }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetYangName() string { return "label-data" }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) SetParent(parent types.Entity) { labelData.parent = parent }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetParent() types.Entity { return labelData.parent }

func (labelData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_LabelData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData
// te data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Local label. The type is interface{} with range: 0..4294967295.
    LocalLabel interface{}
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetFilter() yfilter.YFilter { return teData.YFilter }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) SetFilter(yf yfilter.YFilter) { teData.YFilter = yf }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetGoName(yname string) string {
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetSegmentPath() string {
    return "te-data"
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tunnel-interface"] = teData.TunnelInterface
    leafs["local-label"] = teData.LocalLabel
    return leafs
}

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetBundleName() string { return "cisco_ios_xr" }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetYangName() string { return "te-data" }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) SetParent(parent types.Entity) { teData.parent = parent }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetParent() types.Entity { return teData.parent }

func (teData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_TeData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}

    // SR related Local label. The type is interface{} with range: 0..4294967295.
    SrLocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "version" { return "Version" }
    if yname == "sr-local-label" { return "SrLocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["prefix"] = ipv4Data.Prefix
    leafs["prefix-length"] = ipv4Data.PrefixLength
    leafs["version"] = ipv4Data.Version
    leafs["sr-local-label"] = ipv4Data.SrLocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv4Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // Prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Route flags. The type is interface{} with range: 0..4294967295.
    RouterFlags interface{}

    // Prefix length. The type is interface{} with range: 0..255.
    PrefixLen interface{}

    // Version. The type is interface{} with range: 0..4294967295.
    Version interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "router-flags" { return "RouterFlags" }
    if yname == "prefix-len" { return "PrefixLen" }
    if yname == "version" { return "Version" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["prefix"] = ipv6Data.Prefix
    leafs["router-flags"] = ipv6Data.RouterFlags
    leafs["prefix-len"] = ipv6Data.PrefixLen
    leafs["version"] = ipv6Data.Version
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_Ipv6Data) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Pseudowire List Identifier. The type is interface{} with range: 0..65535.
    PwheListId interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetGoName(yname string) string {
    if yname == "pwhe-list-id" { return "PwheListId" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["pwhe-list-id"] = pwListData.PwheListId
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_PwListData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData
// dmtc ext intf data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetFilter() yfilter.YFilter { return dmtcExtIntfData.YFilter }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) SetFilter(yf yfilter.YFilter) { dmtcExtIntfData.YFilter = yf }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetSegmentPath() string {
    return "dmtc-ext-intf-data"
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcExtIntfData.DmtcExtIfh
    return leafs
}

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetYangName() string { return "dmtc-ext-intf-data" }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) SetParent(parent types.Entity) { dmtcExtIntfData.parent = parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetParent() types.Entity { return dmtcExtIntfData.parent }

func (dmtcExtIntfData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_Fpi_DmtcExtIntfData) GetParentYangName() string { return "fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner
// Application owner instance
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_AssociatedFpi_ApplicationOwner) GetParentYangName() string { return "associated-fpi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf
// IPv4 RPF neighbors
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V4 RPF Neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    V4RpfNeighbor interface{}
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetFilter() yfilter.YFilter { return v4Rpf.YFilter }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) SetFilter(yf yfilter.YFilter) { v4Rpf.YFilter = yf }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v4-rpf-neighbor" { return "V4RpfNeighbor" }
    return ""
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetSegmentPath() string {
    return "v4-rpf"
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v4Rpf.TableId
    leafs["v4-rpf-neighbor"] = v4Rpf.V4RpfNeighbor
    return leafs
}

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetYangName() string { return "v4-rpf" }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) SetParent(parent types.Entity) { v4Rpf.parent = parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetParent() types.Entity { return v4Rpf.parent }

func (v4Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V4Rpf) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf
// IPv6 RPF neighbors
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // V6 RPF Neighbor. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    V6RpfNeighbor interface{}
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetFilter() yfilter.YFilter { return v6Rpf.YFilter }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) SetFilter(yf yfilter.YFilter) { v6Rpf.YFilter = yf }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "v6-rpf-neighbor" { return "V6RpfNeighbor" }
    return ""
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetSegmentPath() string {
    return "v6-rpf"
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = v6Rpf.TableId
    leafs["v6-rpf-neighbor"] = v6Rpf.V6RpfNeighbor
    return leafs
}

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetBundleName() string { return "cisco_ios_xr" }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetYangName() string { return "v6-rpf" }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) SetParent(parent types.Entity) { v6Rpf.parent = parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetParent() types.Entity { return v6Rpf.parent }

func (v6Rpf *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_V6Rpf) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois
// Mois
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application state.
    ApplicationResource MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource

    // moi array. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray.
    MoiArray []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetFilter() yfilter.YFilter { return mois.YFilter }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) SetFilter(yf yfilter.YFilter) { mois.YFilter = yf }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetGoName(yname string) string {
    if yname == "application-resource" { return "ApplicationResource" }
    if yname == "moi-array" { return "MoiArray" }
    return ""
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetSegmentPath() string {
    return "mois"
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-resource" {
        return &mois.ApplicationResource
    }
    if childYangName == "moi-array" {
        for _, c := range mois.MoiArray {
            if mois.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray{}
        mois.MoiArray = append(mois.MoiArray, child)
        return &mois.MoiArray[len(mois.MoiArray)-1]
    }
    return nil
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-resource"] = &mois.ApplicationResource
    for i := range mois.MoiArray {
        children[mois.MoiArray[i].GetSegmentPath()] = &mois.MoiArray[i]
    }
    return children
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetBundleName() string { return "cisco_ios_xr" }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetYangName() string { return "mois" }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) SetParent(parent types.Entity) { mois.parent = parent }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetParent() types.Entity { return mois.parent }

func (mois *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois) GetParentYangName() string { return "rewrite-label" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource
// Application state
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetFilter() yfilter.YFilter { return applicationResource.YFilter }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) SetFilter(yf yfilter.YFilter) { applicationResource.YFilter = yf }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetSegmentPath() string {
    return "application-resource"
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationResource.ApplicationName
    leafs["application-type"] = applicationResource.ApplicationType
    leafs["application-role-primary"] = applicationResource.ApplicationRolePrimary
    leafs["application-instance"] = applicationResource.ApplicationInstance
    leafs["resource-state"] = applicationResource.ResourceState
    return leafs
}

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetBundleName() string { return "cisco_ios_xr" }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetYangName() string { return "application-resource" }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) SetParent(parent types.Entity) { applicationResource.parent = parent }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetParent() types.Entity { return applicationResource.parent }

func (applicationResource *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_ApplicationResource) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray
// moi array
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Moi.
    Moi MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetFilter() yfilter.YFilter { return moiArray.YFilter }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) SetFilter(yf yfilter.YFilter) { moiArray.YFilter = yf }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetGoName(yname string) string {
    if yname == "moi" { return "Moi" }
    return ""
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetSegmentPath() string {
    return "moi-array"
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "moi" {
        return &moiArray.Moi
    }
    return nil
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["moi"] = &moiArray.Moi
    return children
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetBundleName() string { return "cisco_ios_xr" }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetYangName() string { return "moi-array" }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) SetParent(parent types.Entity) { moiArray.parent = parent }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetParent() types.Entity { return moiArray.parent }

func (moiArray *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray) GetParentYangName() string { return "mois" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi
// Moi
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MoiType. The type is MgmtLsdMoi.
    MoiType interface{}

    // pop and lookup ipv4.
    PopAndLookupIpv4 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4

    // pop and lookup tp.
    PopAndLookupTp MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp

    // pop and lookup ipv6.
    PopAndLookupIpv6 MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6

    // ipv4 data.
    Ipv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data

    // ipv6 data.
    Ipv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data

    // tev4 data.
    Tev4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data

    // pseudowire data.
    PseudowireData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData

    // ip sub data.
    IpSubData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData

    // pseudowire head end data.
    PseudowireHeadEndData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData

    // pw list data.
    PwListData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData

    // stackv4 data.
    Stackv4Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data

    // stackv6 data.
    Stackv6Data MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data

    // te head data.
    TeHeadData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData

    // dmtc data.
    DmtcData MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetFilter() yfilter.YFilter { return moi.YFilter }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) SetFilter(yf yfilter.YFilter) { moi.YFilter = yf }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetGoName(yname string) string {
    if yname == "moi-type" { return "MoiType" }
    if yname == "pop-and-lookup-ipv4" { return "PopAndLookupIpv4" }
    if yname == "pop-and-lookup-tp" { return "PopAndLookupTp" }
    if yname == "pop-and-lookup-ipv6" { return "PopAndLookupIpv6" }
    if yname == "ipv4-data" { return "Ipv4Data" }
    if yname == "ipv6-data" { return "Ipv6Data" }
    if yname == "tev4-data" { return "Tev4Data" }
    if yname == "pseudowire-data" { return "PseudowireData" }
    if yname == "ip-sub-data" { return "IpSubData" }
    if yname == "pseudowire-head-end-data" { return "PseudowireHeadEndData" }
    if yname == "pw-list-data" { return "PwListData" }
    if yname == "stackv4-data" { return "Stackv4Data" }
    if yname == "stackv6-data" { return "Stackv6Data" }
    if yname == "te-head-data" { return "TeHeadData" }
    if yname == "dmtc-data" { return "DmtcData" }
    return ""
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetSegmentPath() string {
    return "moi"
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pop-and-lookup-ipv4" {
        return &moi.PopAndLookupIpv4
    }
    if childYangName == "pop-and-lookup-tp" {
        return &moi.PopAndLookupTp
    }
    if childYangName == "pop-and-lookup-ipv6" {
        return &moi.PopAndLookupIpv6
    }
    if childYangName == "ipv4-data" {
        return &moi.Ipv4Data
    }
    if childYangName == "ipv6-data" {
        return &moi.Ipv6Data
    }
    if childYangName == "tev4-data" {
        return &moi.Tev4Data
    }
    if childYangName == "pseudowire-data" {
        return &moi.PseudowireData
    }
    if childYangName == "ip-sub-data" {
        return &moi.IpSubData
    }
    if childYangName == "pseudowire-head-end-data" {
        return &moi.PseudowireHeadEndData
    }
    if childYangName == "pw-list-data" {
        return &moi.PwListData
    }
    if childYangName == "stackv4-data" {
        return &moi.Stackv4Data
    }
    if childYangName == "stackv6-data" {
        return &moi.Stackv6Data
    }
    if childYangName == "te-head-data" {
        return &moi.TeHeadData
    }
    if childYangName == "dmtc-data" {
        return &moi.DmtcData
    }
    return nil
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pop-and-lookup-ipv4"] = &moi.PopAndLookupIpv4
    children["pop-and-lookup-tp"] = &moi.PopAndLookupTp
    children["pop-and-lookup-ipv6"] = &moi.PopAndLookupIpv6
    children["ipv4-data"] = &moi.Ipv4Data
    children["ipv6-data"] = &moi.Ipv6Data
    children["tev4-data"] = &moi.Tev4Data
    children["pseudowire-data"] = &moi.PseudowireData
    children["ip-sub-data"] = &moi.IpSubData
    children["pseudowire-head-end-data"] = &moi.PseudowireHeadEndData
    children["pw-list-data"] = &moi.PwListData
    children["stackv4-data"] = &moi.Stackv4Data
    children["stackv6-data"] = &moi.Stackv6Data
    children["te-head-data"] = &moi.TeHeadData
    children["dmtc-data"] = &moi.DmtcData
    return children
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["moi-type"] = moi.MoiType
    return leafs
}

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetBundleName() string { return "cisco_ios_xr" }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetYangName() string { return "moi" }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) SetParent(parent types.Entity) { moi.parent = parent }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetParent() types.Entity { return moi.parent }

func (moi *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi) GetParentYangName() string { return "moi-array" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4
// pop and lookup ipv4
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetFilter() yfilter.YFilter { return popAndLookupIpv4.YFilter }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) SetFilter(yf yfilter.YFilter) { popAndLookupIpv4.YFilter = yf }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetSegmentPath() string {
    return "pop-and-lookup-ipv4"
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv4.TableId
    leafs["table-name"] = popAndLookupIpv4.TableName
    leafs["path-flags-decode"] = popAndLookupIpv4.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetYangName() string { return "pop-and-lookup-ipv4" }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) SetParent(parent types.Entity) { popAndLookupIpv4.parent = parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParent() types.Entity { return popAndLookupIpv4.parent }

func (popAndLookupIpv4 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv4) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp
// pop and lookup tp
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetFilter() yfilter.YFilter { return popAndLookupTp.YFilter }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) SetFilter(yf yfilter.YFilter) { popAndLookupTp.YFilter = yf }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-label" { return "OutLabel" }
    return ""
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetSegmentPath() string {
    return "pop-and-lookup-tp"
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupTp.TableId
    leafs["table-name"] = popAndLookupTp.TableName
    leafs["path-flags-decode"] = popAndLookupTp.PathFlagsDecode
    leafs["out-label"] = popAndLookupTp.OutLabel
    return leafs
}

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetYangName() string { return "pop-and-lookup-tp" }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) SetParent(parent types.Entity) { popAndLookupTp.parent = parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetParent() types.Entity { return popAndLookupTp.parent }

func (popAndLookupTp *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupTp) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6
// pop and lookup ipv6
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetFilter() yfilter.YFilter { return popAndLookupIpv6.YFilter }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) SetFilter(yf yfilter.YFilter) { popAndLookupIpv6.YFilter = yf }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetSegmentPath() string {
    return "pop-and-lookup-ipv6"
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = popAndLookupIpv6.TableId
    leafs["table-name"] = popAndLookupIpv6.TableName
    leafs["path-flags-decode"] = popAndLookupIpv6.PathFlagsDecode
    return leafs
}

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetYangName() string { return "pop-and-lookup-ipv6" }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) SetParent(parent types.Entity) { popAndLookupIpv6.parent = parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParent() types.Entity { return popAndLookupIpv6.parent }

func (popAndLookupIpv6 *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PopAndLookupIpv6) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data
// ipv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetFilter() yfilter.YFilter { return ipv4Data.YFilter }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) SetFilter(yf yfilter.YFilter) { ipv4Data.YFilter = yf }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetSegmentPath() string {
    return "ipv4-data"
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv4Data.TableId
    leafs["table-name"] = ipv4Data.TableName
    leafs["path-flags-decode"] = ipv4Data.PathFlagsDecode
    leafs["out-interface"] = ipv4Data.OutInterface
    leafs["out-interface-parent"] = ipv4Data.OutInterfaceParent
    leafs["ipv4-next-hop"] = ipv4Data.Ipv4NextHop
    leafs["path-id"] = ipv4Data.PathId
    leafs["backup-path-id"] = ipv4Data.BackupPathId
    leafs["load-metric"] = ipv4Data.LoadMetric
    leafs["out-label"] = ipv4Data.OutLabel
    leafs["out-label-name"] = ipv4Data.OutLabelName
    leafs["tunnel-id"] = ipv4Data.TunnelId
    leafs["next-hop-id"] = ipv4Data.NextHopId
    leafs["local-label"] = ipv4Data.LocalLabel
    return leafs
}

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetYangName() string { return "ipv4-data" }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) SetParent(parent types.Entity) { ipv4Data.parent = parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetParent() types.Entity { return ipv4Data.parent }

func (ipv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data
// ipv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetFilter() yfilter.YFilter { return ipv6Data.YFilter }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) SetFilter(yf yfilter.YFilter) { ipv6Data.YFilter = yf }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetSegmentPath() string {
    return "ipv6-data"
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipv6Data.TableId
    leafs["table-name"] = ipv6Data.TableName
    leafs["path-flags-decode"] = ipv6Data.PathFlagsDecode
    leafs["out-interface"] = ipv6Data.OutInterface
    leafs["out-label"] = ipv6Data.OutLabel
    leafs["out-label-name"] = ipv6Data.OutLabelName
    leafs["ipv6-next-hop"] = ipv6Data.Ipv6NextHop
    leafs["path-id"] = ipv6Data.PathId
    leafs["backup-path-id"] = ipv6Data.BackupPathId
    leafs["next-hop-id"] = ipv6Data.NextHopId
    return leafs
}

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetYangName() string { return "ipv6-data" }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) SetParent(parent types.Entity) { ipv6Data.parent = parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetParent() types.Entity { return ipv6Data.parent }

func (ipv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Ipv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data
// tev4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Backup interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupIpv4NextHop interface{}

    // Merge point label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Backup local label. The type is interface{} with range: 0..4294967295.
    BackupLocalLabel interface{}

    // Tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    TunnelInterface interface{}

    // Tunnel weight. The type is interface{} with range: 0..4294967295.
    TunnelWeight interface{}

    // Outgoing data parent interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    DataOutParentInterface interface{}

    // Tunnel class. The type is interface{} with range: 0..4294967295.
    TunnelClass interface{}
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetFilter() yfilter.YFilter { return tev4Data.YFilter }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) SetFilter(yf yfilter.YFilter) { tev4Data.YFilter = yf }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-ipv4-next-hop" { return "BackupIpv4NextHop" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "backup-local-label" { return "BackupLocalLabel" }
    if yname == "tunnel-interface" { return "TunnelInterface" }
    if yname == "tunnel-weight" { return "TunnelWeight" }
    if yname == "data-out-parent-interface" { return "DataOutParentInterface" }
    if yname == "tunnel-class" { return "TunnelClass" }
    return ""
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetSegmentPath() string {
    return "tev4-data"
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = tev4Data.TableId
    leafs["table-name"] = tev4Data.TableName
    leafs["path-flags-decode"] = tev4Data.PathFlagsDecode
    leafs["out-interface"] = tev4Data.OutInterface
    leafs["out-label"] = tev4Data.OutLabel
    leafs["out-label-name"] = tev4Data.OutLabelName
    leafs["ipv4-next-hop"] = tev4Data.Ipv4NextHop
    leafs["backup-interface"] = tev4Data.BackupInterface
    leafs["backup-ipv4-next-hop"] = tev4Data.BackupIpv4NextHop
    leafs["merge-point-label"] = tev4Data.MergePointLabel
    leafs["backup-local-label"] = tev4Data.BackupLocalLabel
    leafs["tunnel-interface"] = tev4Data.TunnelInterface
    leafs["tunnel-weight"] = tev4Data.TunnelWeight
    leafs["data-out-parent-interface"] = tev4Data.DataOutParentInterface
    leafs["tunnel-class"] = tev4Data.TunnelClass
    return leafs
}

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetBundleName() string { return "cisco_ios_xr" }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetYangName() string { return "tev4-data" }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) SetParent(parent types.Entity) { tev4Data.parent = parent }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetParent() types.Entity { return tev4Data.parent }

func (tev4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Tev4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData
// pseudowire data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Cross-connect ID. The type is interface{} with range: 0..4294967295.
    CrossConnectId interface{}

    // PseudoWire Cross-connect ID. The type is interface{} with range:
    // 0..4294967295.
    PseuodoWireConnectId interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Bridge ID. The type is interface{} with range: 0..4294967295.
    BridgeId interface{}

    // Split horizon group ID. The type is interface{} with range: 0..4294967295.
    SplitHorizonId interface{}
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetFilter() yfilter.YFilter { return pseudowireData.YFilter }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) SetFilter(yf yfilter.YFilter) { pseudowireData.YFilter = yf }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "cross-connect-id" { return "CrossConnectId" }
    if yname == "pseuodo-wire-connect-id" { return "PseuodoWireConnectId" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "bridge-id" { return "BridgeId" }
    if yname == "split-horizon-id" { return "SplitHorizonId" }
    return ""
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetSegmentPath() string {
    return "pseudowire-data"
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireData.TableId
    leafs["table-name"] = pseudowireData.TableName
    leafs["path-flags-decode"] = pseudowireData.PathFlagsDecode
    leafs["out-interface"] = pseudowireData.OutInterface
    leafs["out-label"] = pseudowireData.OutLabel
    leafs["cross-connect-id"] = pseudowireData.CrossConnectId
    leafs["pseuodo-wire-connect-id"] = pseudowireData.PseuodoWireConnectId
    leafs["ipv4-next-hop"] = pseudowireData.Ipv4NextHop
    leafs["bridge-id"] = pseudowireData.BridgeId
    leafs["split-horizon-id"] = pseudowireData.SplitHorizonId
    return leafs
}

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetYangName() string { return "pseudowire-data" }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) SetParent(parent types.Entity) { pseudowireData.parent = parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetParent() types.Entity { return pseudowireData.parent }

func (pseudowireData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData
// ip sub data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetFilter() yfilter.YFilter { return ipSubData.YFilter }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) SetFilter(yf yfilter.YFilter) { ipSubData.YFilter = yf }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetSegmentPath() string {
    return "ip-sub-data"
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = ipSubData.TableId
    leafs["table-name"] = ipSubData.TableName
    leafs["out-interface"] = ipSubData.OutInterface
    leafs["path-flags-decode"] = ipSubData.PathFlagsDecode
    return leafs
}

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetBundleName() string { return "cisco_ios_xr" }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetYangName() string { return "ip-sub-data" }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) SetParent(parent types.Entity) { ipSubData.parent = parent }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetParent() types.Entity { return ipSubData.parent }

func (ipSubData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_IpSubData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData
// pseudowire head end data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Is control word present. The type is interface{} with range:
    // -2147483648..2147483647.
    ControlWord interface{}

    // Is PWHE IMposition. The type is interface{} with range:
    // -2147483648..2147483647.
    Imposition interface{}

    // Virtual Circuit Type. The type is interface{} with range: 0..255.
    Vctype interface{}

    // Pseudo-wire List Identifier. The type is interface{} with range: 0..65535.
    PwListId interface{}

    // Pseudo-wire Head-end interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    PwheInterface interface{}
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetFilter() yfilter.YFilter { return pseudowireHeadEndData.YFilter }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) SetFilter(yf yfilter.YFilter) { pseudowireHeadEndData.YFilter = yf }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "control-word" { return "ControlWord" }
    if yname == "imposition" { return "Imposition" }
    if yname == "vctype" { return "Vctype" }
    if yname == "pw-list-id" { return "PwListId" }
    if yname == "pwhe-interface" { return "PwheInterface" }
    return ""
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetSegmentPath() string {
    return "pseudowire-head-end-data"
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pseudowireHeadEndData.TableId
    leafs["table-name"] = pseudowireHeadEndData.TableName
    leafs["path-flags-decode"] = pseudowireHeadEndData.PathFlagsDecode
    leafs["out-interface"] = pseudowireHeadEndData.OutInterface
    leafs["out-label"] = pseudowireHeadEndData.OutLabel
    leafs["ipv4-next-hop"] = pseudowireHeadEndData.Ipv4NextHop
    leafs["control-word"] = pseudowireHeadEndData.ControlWord
    leafs["imposition"] = pseudowireHeadEndData.Imposition
    leafs["vctype"] = pseudowireHeadEndData.Vctype
    leafs["pw-list-id"] = pseudowireHeadEndData.PwListId
    leafs["pwhe-interface"] = pseudowireHeadEndData.PwheInterface
    return leafs
}

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleName() string { return "cisco_ios_xr" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetYangName() string { return "pseudowire-head-end-data" }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) SetParent(parent types.Entity) { pseudowireHeadEndData.parent = parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParent() types.Entity { return pseudowireHeadEndData.parent }

func (pseudowireHeadEndData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PseudowireHeadEndData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData
// pw list data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Pseudo-wire Layer 3 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L3Interface interface{}

    // Pseudo-wire Layer 2 interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    L2Interface interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetFilter() yfilter.YFilter { return pwListData.YFilter }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) SetFilter(yf yfilter.YFilter) { pwListData.YFilter = yf }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "l3-interface" { return "L3Interface" }
    if yname == "l2-interface" { return "L2Interface" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    return ""
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetSegmentPath() string {
    return "pw-list-data"
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = pwListData.TableId
    leafs["table-name"] = pwListData.TableName
    leafs["l3-interface"] = pwListData.L3Interface
    leafs["l2-interface"] = pwListData.L2Interface
    leafs["path-flags-decode"] = pwListData.PathFlagsDecode
    return leafs
}

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetBundleName() string { return "cisco_ios_xr" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetYangName() string { return "pw-list-data" }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) SetParent(parent types.Entity) { pwListData.parent = parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetParent() types.Entity { return pwListData.parent }

func (pwListData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_PwListData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data
// stackv4 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Owner application type. The type is MgmtLsdApp.
    OwnerApplicationType interface{}

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetFilter() yfilter.YFilter { return stackv4Data.YFilter }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) SetFilter(yf yfilter.YFilter) { stackv4Data.YFilter = yf }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetGoName(yname string) string {
    if yname == "owner-application-type" { return "OwnerApplicationType" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetSegmentPath() string {
    return "stackv4-data"
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv4Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv4Data.InnerStack
    }
    return nil
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv4Data.Nexthop
    children["inner-stack"] = &stackv4Data.InnerStack
    return children
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["owner-application-type"] = stackv4Data.OwnerApplicationType
    return leafs
}

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetYangName() string { return "stackv4-data" }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) SetParent(parent types.Entity) { stackv4Data.parent = parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetParent() types.Entity { return stackv4Data.parent }

func (stackv4Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing Interface's parent. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    OutInterfaceParent interface{}

    // IPv4 nexthop. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Routing path's load metric. The type is interface{} with range:
    // 0..4294967295.
    LoadMetric interface{}

    // Outgoing Label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}

    // TE backup path local label. The type is interface{} with range:
    // 0..4294967295.
    LocalLabel interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-interface-parent" { return "OutInterfaceParent" }
    if yname == "ipv4-next-hop" { return "Ipv4NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "load-metric" { return "LoadMetric" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "next-hop-id" { return "NextHopId" }
    if yname == "local-label" { return "LocalLabel" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-interface-parent"] = nexthop.OutInterfaceParent
    leafs["ipv4-next-hop"] = nexthop.Ipv4NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["load-metric"] = nexthop.LoadMetric
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["tunnel-id"] = nexthop.TunnelId
    leafs["next-hop-id"] = nexthop.NextHopId
    leafs["local-label"] = nexthop.LocalLabel
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_Nexthop) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack) GetParentYangName() string { return "stackv4-data" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv4Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data
// stackv6 data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Nexthop.
    Nexthop MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop

    // Inner stack.
    InnerStack MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetFilter() yfilter.YFilter { return stackv6Data.YFilter }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) SetFilter(yf yfilter.YFilter) { stackv6Data.YFilter = yf }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetGoName(yname string) string {
    if yname == "nexthop" { return "Nexthop" }
    if yname == "inner-stack" { return "InnerStack" }
    return ""
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetSegmentPath() string {
    return "stackv6-data"
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nexthop" {
        return &stackv6Data.Nexthop
    }
    if childYangName == "inner-stack" {
        return &stackv6Data.InnerStack
    }
    return nil
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nexthop"] = &stackv6Data.Nexthop
    children["inner-stack"] = &stackv6Data.InnerStack
    return children
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetBundleName() string { return "cisco_ios_xr" }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetYangName() string { return "stackv6-data" }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) SetParent(parent types.Entity) { stackv6Data.parent = parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetParent() types.Entity { return stackv6Data.parent }

func (stackv6Data *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop
// Nexthop
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Path flag decoded string. The type is string.
    PathFlagsDecode interface{}

    // Outgoing interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Outgoing label. The type is interface{} with range: 0..4294967295.
    OutLabel interface{}

    // Outgoing label name. The type is string.
    OutLabelName interface{}

    // IPv6 nexthop. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6NextHop interface{}

    // Routing path id. The type is interface{} with range: 0..255.
    PathId interface{}

    // Routing path backup id. The type is interface{} with range: 0..255.
    BackupPathId interface{}

    // Next hop ID. The type is interface{} with range: 0..4294967295.
    NextHopId interface{}
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetFilter() yfilter.YFilter { return nexthop.YFilter }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetFilter(yf yfilter.YFilter) { nexthop.YFilter = yf }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "path-flags-decode" { return "PathFlagsDecode" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "out-label-name" { return "OutLabelName" }
    if yname == "ipv6-next-hop" { return "Ipv6NextHop" }
    if yname == "path-id" { return "PathId" }
    if yname == "backup-path-id" { return "BackupPathId" }
    if yname == "next-hop-id" { return "NextHopId" }
    return ""
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetSegmentPath() string {
    return "nexthop"
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = nexthop.TableId
    leafs["table-name"] = nexthop.TableName
    leafs["path-flags-decode"] = nexthop.PathFlagsDecode
    leafs["out-interface"] = nexthop.OutInterface
    leafs["out-label"] = nexthop.OutLabel
    leafs["out-label-name"] = nexthop.OutLabelName
    leafs["ipv6-next-hop"] = nexthop.Ipv6NextHop
    leafs["path-id"] = nexthop.PathId
    leafs["backup-path-id"] = nexthop.BackupPathId
    leafs["next-hop-id"] = nexthop.NextHopId
    return leafs
}

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleName() string { return "cisco_ios_xr" }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetYangName() string { return "nexthop" }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) SetParent(parent types.Entity) { nexthop.parent = parent }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParent() types.Entity { return nexthop.parent }

func (nexthop *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_Nexthop) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack
// Inner stack
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of remote nexthop addresses. The type is interface{} with range:
    // 0..255.
    NumNexthops interface{}

    // Depth of inner label stack. The type is interface{} with range: 0..255.
    NumLbls interface{}

    // Remote nexthop addresses. The type is slice of string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Nexthop []interface{}

    // Info related to outgoing labels. The type is slice of
    // MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label.
    Label []MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetFilter() yfilter.YFilter { return innerStack.YFilter }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetFilter(yf yfilter.YFilter) { innerStack.YFilter = yf }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetGoName(yname string) string {
    if yname == "num-nexthops" { return "NumNexthops" }
    if yname == "num-lbls" { return "NumLbls" }
    if yname == "nexthop" { return "Nexthop" }
    if yname == "label" { return "Label" }
    return ""
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetSegmentPath() string {
    return "inner-stack"
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label" {
        for _, c := range innerStack.Label {
            if innerStack.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label{}
        innerStack.Label = append(innerStack.Label, child)
        return &innerStack.Label[len(innerStack.Label)-1]
    }
    return nil
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range innerStack.Label {
        children[innerStack.Label[i].GetSegmentPath()] = &innerStack.Label[i]
    }
    return children
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-nexthops"] = innerStack.NumNexthops
    leafs["num-lbls"] = innerStack.NumLbls
    leafs["nexthop"] = innerStack.Nexthop
    return leafs
}

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleName() string { return "cisco_ios_xr" }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetYangName() string { return "inner-stack" }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) SetParent(parent types.Entity) { innerStack.parent = parent }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParent() types.Entity { return innerStack.parent }

func (innerStack *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack) GetParentYangName() string { return "stackv6-data" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label
// Info related to outgoing labels
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Label. The type is interface{} with range: 0..4294967295.
    OutgoingLabel interface{}

    // Remote Label string. The type is string.
    OutgoingLabelStr interface{}
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetFilter() yfilter.YFilter { return label.YFilter }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetFilter(yf yfilter.YFilter) { label.YFilter = yf }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetGoName(yname string) string {
    if yname == "outgoing-label" { return "OutgoingLabel" }
    if yname == "outgoing-label-str" { return "OutgoingLabelStr" }
    return ""
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetSegmentPath() string {
    return "label"
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["outgoing-label"] = label.OutgoingLabel
    leafs["outgoing-label-str"] = label.OutgoingLabelStr
    return leafs
}

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleName() string { return "cisco_ios_xr" }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetYangName() string { return "label" }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) SetParent(parent types.Entity) { label.parent = parent }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParent() types.Entity { return label.parent }

func (label *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_Stackv6Data_InnerStack_Label) GetParentYangName() string { return "inner-stack" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData
// te head data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table ID. The type is interface{} with range: 0..4294967295.
    TableId interface{}

    // VRF table name. The type is string.
    TableName interface{}

    // Tunnel local label. The type is interface{} with range: 0..4294967295.
    TunnelLocalLabel interface{}

    // Tunnel local label stringified. The type is string.
    TunnelLocalLabelStr interface{}

    // Tunnel forwarding class. The type is interface{} with range: 0..255.
    TunnelFwdClass interface{}

    // Tunnel Load metric. The type is interface{} with range: 0..4294967295.
    TunnelLoadMetric interface{}

    // Flags decoded string. The type is string.
    FlagsDecode interface{}
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetFilter() yfilter.YFilter { return teHeadData.YFilter }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) SetFilter(yf yfilter.YFilter) { teHeadData.YFilter = yf }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetGoName(yname string) string {
    if yname == "table-id" { return "TableId" }
    if yname == "table-name" { return "TableName" }
    if yname == "tunnel-local-label" { return "TunnelLocalLabel" }
    if yname == "tunnel-local-label-str" { return "TunnelLocalLabelStr" }
    if yname == "tunnel-fwd-class" { return "TunnelFwdClass" }
    if yname == "tunnel-load-metric" { return "TunnelLoadMetric" }
    if yname == "flags-decode" { return "FlagsDecode" }
    return ""
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetSegmentPath() string {
    return "te-head-data"
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["table-id"] = teHeadData.TableId
    leafs["table-name"] = teHeadData.TableName
    leafs["tunnel-local-label"] = teHeadData.TunnelLocalLabel
    leafs["tunnel-local-label-str"] = teHeadData.TunnelLocalLabelStr
    leafs["tunnel-fwd-class"] = teHeadData.TunnelFwdClass
    leafs["tunnel-load-metric"] = teHeadData.TunnelLoadMetric
    leafs["flags-decode"] = teHeadData.FlagsDecode
    return leafs
}

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetBundleName() string { return "cisco_ios_xr" }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetYangName() string { return "te-head-data" }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) SetParent(parent types.Entity) { teHeadData.parent = parent }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetParent() types.Entity { return teHeadData.parent }

func (teHeadData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_TeHeadData) GetParentYangName() string { return "moi" }

// MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData
// dmtc data
type MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DMTC External Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    DmtcExtIfh interface{}
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetFilter() yfilter.YFilter { return dmtcData.YFilter }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) SetFilter(yf yfilter.YFilter) { dmtcData.YFilter = yf }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetGoName(yname string) string {
    if yname == "dmtc-ext-ifh" { return "DmtcExtIfh" }
    return ""
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetSegmentPath() string {
    return "dmtc-data"
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dmtc-ext-ifh"] = dmtcData.DmtcExtIfh
    return leafs
}

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetBundleName() string { return "cisco_ios_xr" }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetYangName() string { return "dmtc-data" }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) SetParent(parent types.Entity) { dmtcData.parent = parent }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetParent() types.Entity { return dmtcData.parent }

func (dmtcData *MplsLsd_Rewrite_RewriteLabels_RewriteLabel_Mois_MoiArray_Moi_DmtcData) GetParentYangName() string { return "moi" }

// MplsLsd_RewriteSummary
// Rewrite Summary 
type MplsLsd_RewriteSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4Fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6Fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4RpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6RpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsd_RewriteSummary_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsd_RewriteSummary_Ipv6Paths
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetFilter() yfilter.YFilter { return rewriteSummary.YFilter }

func (rewriteSummary *MplsLsd_RewriteSummary) SetFilter(yf yfilter.YFilter) { rewriteSummary.YFilter = yf }

func (rewriteSummary *MplsLsd_RewriteSummary) GetGoName(yname string) string {
    if yname == "num-label-fpi" { return "NumLabelFpi" }
    if yname == "num-tefpi" { return "NumTefpi" }
    if yname == "num-ipv4fpi" { return "NumIpv4Fpi" }
    if yname == "num-ipv6fpi" { return "NumIpv6Fpi" }
    if yname == "num-pw-list-tefpi" { return "NumPwListTefpi" }
    if yname == "num-dmtctefpi" { return "NumDmtctefpi" }
    if yname == "num-rewrite" { return "NumRewrite" }
    if yname == "total-forward-update" { return "TotalForwardUpdate" }
    if yname == "total-forwad-update-message" { return "TotalForwadUpdateMessage" }
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-t-ev4-paths" { return "TotalTEv4Paths" }
    if yname == "total-te-head-paths" { return "TotalTeHeadPaths" }
    if yname == "total-pw-paths" { return "TotalPwPaths" }
    if yname == "total-ip-sub-paths" { return "TotalIpSubPaths" }
    if yname == "total-ipv4rpf-neighbors" { return "TotalIpv4RpfNeighbors" }
    if yname == "total-ipv6rpf-neighbors" { return "TotalIpv6RpfNeighbors" }
    if yname == "num-rewrite-rpf-neighbors" { return "NumRewriteRpfNeighbors" }
    if yname == "total-dmtc-intf" { return "TotalDmtcIntf" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "ipv4-paths" { return "Ipv4Paths" }
    if yname == "ipv6-paths" { return "Ipv6Paths" }
    return ""
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetSegmentPath() string {
    return "rewrite-summary"
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-paths" {
        return &rewriteSummary.Ipv4Paths
    }
    if childYangName == "ipv6-paths" {
        return &rewriteSummary.Ipv6Paths
    }
    return nil
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-paths"] = &rewriteSummary.Ipv4Paths
    children["ipv6-paths"] = &rewriteSummary.Ipv6Paths
    return children
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-label-fpi"] = rewriteSummary.NumLabelFpi
    leafs["num-tefpi"] = rewriteSummary.NumTefpi
    leafs["num-ipv4fpi"] = rewriteSummary.NumIpv4Fpi
    leafs["num-ipv6fpi"] = rewriteSummary.NumIpv6Fpi
    leafs["num-pw-list-tefpi"] = rewriteSummary.NumPwListTefpi
    leafs["num-dmtctefpi"] = rewriteSummary.NumDmtctefpi
    leafs["num-rewrite"] = rewriteSummary.NumRewrite
    leafs["total-forward-update"] = rewriteSummary.TotalForwardUpdate
    leafs["total-forwad-update-message"] = rewriteSummary.TotalForwadUpdateMessage
    leafs["total-paths"] = rewriteSummary.TotalPaths
    leafs["total-t-ev4-paths"] = rewriteSummary.TotalTEv4Paths
    leafs["total-te-head-paths"] = rewriteSummary.TotalTeHeadPaths
    leafs["total-pw-paths"] = rewriteSummary.TotalPwPaths
    leafs["total-ip-sub-paths"] = rewriteSummary.TotalIpSubPaths
    leafs["total-ipv4rpf-neighbors"] = rewriteSummary.TotalIpv4RpfNeighbors
    leafs["total-ipv6rpf-neighbors"] = rewriteSummary.TotalIpv6RpfNeighbors
    leafs["num-rewrite-rpf-neighbors"] = rewriteSummary.NumRewriteRpfNeighbors
    leafs["total-dmtc-intf"] = rewriteSummary.TotalDmtcIntf
    leafs["vrf-name-xr"] = rewriteSummary.VrfNameXr
    return leafs
}

func (rewriteSummary *MplsLsd_RewriteSummary) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummary *MplsLsd_RewriteSummary) GetYangName() string { return "rewrite-summary" }

func (rewriteSummary *MplsLsd_RewriteSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummary *MplsLsd_RewriteSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummary *MplsLsd_RewriteSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummary *MplsLsd_RewriteSummary) SetParent(parent types.Entity) { rewriteSummary.parent = parent }

func (rewriteSummary *MplsLsd_RewriteSummary) GetParent() types.Entity { return rewriteSummary.parent }

func (rewriteSummary *MplsLsd_RewriteSummary) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_RewriteSummary_Ipv4Paths
// Count for IPv4 paths
type MplsLsd_RewriteSummary_Ipv4Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetFilter() yfilter.YFilter { return ipv4Paths.YFilter }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) SetFilter(yf yfilter.YFilter) { ipv4Paths.YFilter = yf }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetSegmentPath() string {
    return "ipv4-paths"
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv4Paths.TotalPaths
    leafs["total-backup-paths"] = ipv4Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv4Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv4Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv4Paths.TotalPopLkupPaths
    return leafs
}

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetYangName() string { return "ipv4-paths" }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) SetParent(parent types.Entity) { ipv4Paths.parent = parent }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetParent() types.Entity { return ipv4Paths.parent }

func (ipv4Paths *MplsLsd_RewriteSummary_Ipv4Paths) GetParentYangName() string { return "rewrite-summary" }

// MplsLsd_RewriteSummary_Ipv6Paths
// Count for IPv6 paths
type MplsLsd_RewriteSummary_Ipv6Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetFilter() yfilter.YFilter { return ipv6Paths.YFilter }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) SetFilter(yf yfilter.YFilter) { ipv6Paths.YFilter = yf }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetSegmentPath() string {
    return "ipv6-paths"
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv6Paths.TotalPaths
    leafs["total-backup-paths"] = ipv6Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv6Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv6Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv6Paths.TotalPopLkupPaths
    return leafs
}

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetYangName() string { return "ipv6-paths" }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) SetParent(parent types.Entity) { ipv6Paths.parent = parent }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetParent() types.Entity { return ipv6Paths.parent }

func (ipv6Paths *MplsLsd_RewriteSummary_Ipv6Paths) GetParentYangName() string { return "rewrite-summary" }

// MplsLsd_Applications
// Table of MPLS applications using LSD
type MplsLsd_Applications struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS application using LSD. The type is slice of
    // MplsLsd_Applications_Application.
    Application []MplsLsd_Applications_Application
}

func (applications *MplsLsd_Applications) GetFilter() yfilter.YFilter { return applications.YFilter }

func (applications *MplsLsd_Applications) SetFilter(yf yfilter.YFilter) { applications.YFilter = yf }

func (applications *MplsLsd_Applications) GetGoName(yname string) string {
    if yname == "application" { return "Application" }
    return ""
}

func (applications *MplsLsd_Applications) GetSegmentPath() string {
    return "applications"
}

func (applications *MplsLsd_Applications) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application" {
        for _, c := range applications.Application {
            if applications.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Applications_Application{}
        applications.Application = append(applications.Application, child)
        return &applications.Application[len(applications.Application)-1]
    }
    return nil
}

func (applications *MplsLsd_Applications) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range applications.Application {
        children[applications.Application[i].GetSegmentPath()] = &applications.Application[i]
    }
    return children
}

func (applications *MplsLsd_Applications) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (applications *MplsLsd_Applications) GetBundleName() string { return "cisco_ios_xr" }

func (applications *MplsLsd_Applications) GetYangName() string { return "applications" }

func (applications *MplsLsd_Applications) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applications *MplsLsd_Applications) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applications *MplsLsd_Applications) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applications *MplsLsd_Applications) SetParent(parent types.Entity) { applications.parent = parent }

func (applications *MplsLsd_Applications) GetParent() types.Entity { return applications.parent }

func (applications *MplsLsd_Applications) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_Applications_Application
// Data for MPLS application using LSD
type MplsLsd_Applications_Application struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Application Instance name in the form of
    // '<app_type_name>[:<instance>]'. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ApplicationName interface{}

    // Application name. The type is string.
    ApplicationNameXr interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app instance. The type is string.
    ApplicationInstance interface{}

    // App reg ts. The type is interface{} with range: 0..18446744073709551615.
    AppRegTime interface{}

    // App disconnect ts. The type is interface{} with range:
    // 0..18446744073709551615.
    AppDisconnectTime interface{}

    // App flow control status. The type is interface{} with range:
    // -2147483648..2147483647.
    AppFlowControlled interface{}

    // Flow Ctrl ts. The type is interface{} with range: 0..18446744073709551615.
    FlowCtrlTime interface{}

    // Flow Ctrl Clr ts. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowCtrlClrTime interface{}

    // App go active timestamp. The type is interface{} with range:
    // 0..18446744073709551615.
    GoActTs interface{}

    // Application state. The type is MgmtLsdAppState.
    ApplicationState interface{}

    // Recovery time [secs] remaining if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRemainingSeconds interface{}

    // Recovery time [secs] elapsed if client is timing out. The type is
    // interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeElapsedSeconds interface{}

    // Recovery time [secs] specified at registration or set explicitly. The type
    // is interface{} with range: 0..4294967295. Units are second.
    RecoveryTimeRegisterSeconds interface{}

    // Node ID where application is/was running. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Application Statistics.
    ApplicationStatistics MplsLsd_Applications_Application_ApplicationStatistics
}

func (application *MplsLsd_Applications_Application) GetFilter() yfilter.YFilter { return application.YFilter }

func (application *MplsLsd_Applications_Application) SetFilter(yf yfilter.YFilter) { application.YFilter = yf }

func (application *MplsLsd_Applications_Application) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-name-xr" { return "ApplicationNameXr" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "app-reg-time" { return "AppRegTime" }
    if yname == "app-disconnect-time" { return "AppDisconnectTime" }
    if yname == "app-flow-controlled" { return "AppFlowControlled" }
    if yname == "flow-ctrl-time" { return "FlowCtrlTime" }
    if yname == "flow-ctrl-clr-time" { return "FlowCtrlClrTime" }
    if yname == "go-act-ts" { return "GoActTs" }
    if yname == "application-state" { return "ApplicationState" }
    if yname == "recovery-time-remaining-seconds" { return "RecoveryTimeRemainingSeconds" }
    if yname == "recovery-time-elapsed-seconds" { return "RecoveryTimeElapsedSeconds" }
    if yname == "recovery-time-register-seconds" { return "RecoveryTimeRegisterSeconds" }
    if yname == "node-id" { return "NodeId" }
    if yname == "application-statistics" { return "ApplicationStatistics" }
    return ""
}

func (application *MplsLsd_Applications_Application) GetSegmentPath() string {
    return "application" + "[application-name='" + fmt.Sprintf("%v", application.ApplicationName) + "']"
}

func (application *MplsLsd_Applications_Application) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-statistics" {
        return &application.ApplicationStatistics
    }
    return nil
}

func (application *MplsLsd_Applications_Application) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["application-statistics"] = &application.ApplicationStatistics
    return children
}

func (application *MplsLsd_Applications_Application) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = application.ApplicationName
    leafs["application-name-xr"] = application.ApplicationNameXr
    leafs["application-type"] = application.ApplicationType
    leafs["application-role-primary"] = application.ApplicationRolePrimary
    leafs["application-instance"] = application.ApplicationInstance
    leafs["app-reg-time"] = application.AppRegTime
    leafs["app-disconnect-time"] = application.AppDisconnectTime
    leafs["app-flow-controlled"] = application.AppFlowControlled
    leafs["flow-ctrl-time"] = application.FlowCtrlTime
    leafs["flow-ctrl-clr-time"] = application.FlowCtrlClrTime
    leafs["go-act-ts"] = application.GoActTs
    leafs["application-state"] = application.ApplicationState
    leafs["recovery-time-remaining-seconds"] = application.RecoveryTimeRemainingSeconds
    leafs["recovery-time-elapsed-seconds"] = application.RecoveryTimeElapsedSeconds
    leafs["recovery-time-register-seconds"] = application.RecoveryTimeRegisterSeconds
    leafs["node-id"] = application.NodeId
    return leafs
}

func (application *MplsLsd_Applications_Application) GetBundleName() string { return "cisco_ios_xr" }

func (application *MplsLsd_Applications_Application) GetYangName() string { return "application" }

func (application *MplsLsd_Applications_Application) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (application *MplsLsd_Applications_Application) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (application *MplsLsd_Applications_Application) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (application *MplsLsd_Applications_Application) SetParent(parent types.Entity) { application.parent = parent }

func (application *MplsLsd_Applications_Application) GetParent() types.Entity { return application.parent }

func (application *MplsLsd_Applications_Application) GetParentYangName() string { return "applications" }

// MplsLsd_Applications_Application_ApplicationStatistics
// Application Statistics
type MplsLsd_Applications_Application_ApplicationStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of interface enabled. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnable interface{}

    // Number of interface enable pending. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEnablePending interface{}

    // Connect count. The type is interface{} with range: 0..4294967295.
    ConnectCount interface{}

    // Label context count. The type is slice of interface{} with range:
    // 0..4294967295.
    LabelContextCount []interface{}

    // Label context pending count. The type is slice of interface{} with range:
    // 0..4294967295.
    LabelContextPendingCount []interface{}

    // Connected statistics.
    Connected MplsLsd_Applications_Application_ApplicationStatistics_Connected
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetFilter() yfilter.YFilter { return applicationStatistics.YFilter }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) SetFilter(yf yfilter.YFilter) { applicationStatistics.YFilter = yf }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetGoName(yname string) string {
    if yname == "interface-enable" { return "InterfaceEnable" }
    if yname == "interface-enable-pending" { return "InterfaceEnablePending" }
    if yname == "connect-count" { return "ConnectCount" }
    if yname == "label-context-count" { return "LabelContextCount" }
    if yname == "label-context-pending-count" { return "LabelContextPendingCount" }
    if yname == "connected" { return "Connected" }
    return ""
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetSegmentPath() string {
    return "application-statistics"
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected" {
        return &applicationStatistics.Connected
    }
    return nil
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connected"] = &applicationStatistics.Connected
    return children
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-enable"] = applicationStatistics.InterfaceEnable
    leafs["interface-enable-pending"] = applicationStatistics.InterfaceEnablePending
    leafs["connect-count"] = applicationStatistics.ConnectCount
    leafs["label-context-count"] = applicationStatistics.LabelContextCount
    leafs["label-context-pending-count"] = applicationStatistics.LabelContextPendingCount
    return leafs
}

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetYangName() string { return "application-statistics" }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) SetParent(parent types.Entity) { applicationStatistics.parent = parent }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetParent() types.Entity { return applicationStatistics.parent }

func (applicationStatistics *MplsLsd_Applications_Application_ApplicationStatistics) GetParentYangName() string { return "application" }

// MplsLsd_Applications_Application_ApplicationStatistics_Connected
// Connected statistics
type MplsLsd_Applications_Application_ApplicationStatistics_Connected struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RT set count. The type is interface{} with range: 0..4294967295.
    RtSetMsgCount interface{}

    // Operation count. The type is interface{} with range: 0..4294967295.
    OperationMsgCount interface{}

    // Label OOR count. The type is interface{} with range: 0..4294967295.
    OorLabelCount interface{}

    // Error count. The type is interface{} with range: 0..4294967295.
    ErrorMsgCount interface{}
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetFilter() yfilter.YFilter { return connected.YFilter }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) SetFilter(yf yfilter.YFilter) { connected.YFilter = yf }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetGoName(yname string) string {
    if yname == "rt-set-msg-count" { return "RtSetMsgCount" }
    if yname == "operation-msg-count" { return "OperationMsgCount" }
    if yname == "oor-label-count" { return "OorLabelCount" }
    if yname == "error-msg-count" { return "ErrorMsgCount" }
    return ""
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetSegmentPath() string {
    return "connected"
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rt-set-msg-count"] = connected.RtSetMsgCount
    leafs["operation-msg-count"] = connected.OperationMsgCount
    leafs["oor-label-count"] = connected.OorLabelCount
    leafs["error-msg-count"] = connected.ErrorMsgCount
    return leafs
}

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetBundleName() string { return "cisco_ios_xr" }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetYangName() string { return "connected" }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) SetParent(parent types.Entity) { connected.parent = parent }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetParent() types.Entity { return connected.parent }

func (connected *MplsLsd_Applications_Application_ApplicationStatistics_Connected) GetParentYangName() string { return "application-statistics" }

// MplsLsd_SrlbInconsistency
// SRLB Inconsistencies
type MplsLsd_SrlbInconsistency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Start label of Segment Routing Local Block range. The type is interface{}
    // with range: 0..4294967295.
    StartSrlbRange interface{}

    // End label of Segment Routing Local Block range. The type is interface{}
    // with range: 0..4294967295.
    EndSrlbRange interface{}
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetFilter() yfilter.YFilter { return srlbInconsistency.YFilter }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) SetFilter(yf yfilter.YFilter) { srlbInconsistency.YFilter = yf }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetGoName(yname string) string {
    if yname == "start-srlb-range" { return "StartSrlbRange" }
    if yname == "end-srlb-range" { return "EndSrlbRange" }
    return ""
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetSegmentPath() string {
    return "srlb-inconsistency"
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-srlb-range"] = srlbInconsistency.StartSrlbRange
    leafs["end-srlb-range"] = srlbInconsistency.EndSrlbRange
    return leafs
}

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetBundleName() string { return "cisco_ios_xr" }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetYangName() string { return "srlb-inconsistency" }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) SetParent(parent types.Entity) { srlbInconsistency.parent = parent }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetParent() types.Entity { return srlbInconsistency.parent }

func (srlbInconsistency *MplsLsd_SrlbInconsistency) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_LabelSummaryVrfs
// Dynamic label range summary by VRF
type MplsLsd_LabelSummaryVrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dynamic label range summary by VRF. The type is slice of
    // MplsLsd_LabelSummaryVrfs_LabelSummaryVrf.
    LabelSummaryVrf []MplsLsd_LabelSummaryVrfs_LabelSummaryVrf
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetFilter() yfilter.YFilter { return labelSummaryVrfs.YFilter }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) SetFilter(yf yfilter.YFilter) { labelSummaryVrfs.YFilter = yf }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetGoName(yname string) string {
    if yname == "label-summary-vrf" { return "LabelSummaryVrf" }
    return ""
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetSegmentPath() string {
    return "label-summary-vrfs"
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-summary-vrf" {
        for _, c := range labelSummaryVrfs.LabelSummaryVrf {
            if labelSummaryVrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_LabelSummaryVrfs_LabelSummaryVrf{}
        labelSummaryVrfs.LabelSummaryVrf = append(labelSummaryVrfs.LabelSummaryVrf, child)
        return &labelSummaryVrfs.LabelSummaryVrf[len(labelSummaryVrfs.LabelSummaryVrf)-1]
    }
    return nil
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummaryVrfs.LabelSummaryVrf {
        children[labelSummaryVrfs.LabelSummaryVrf[i].GetSegmentPath()] = &labelSummaryVrfs.LabelSummaryVrf[i]
    }
    return children
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetYangName() string { return "label-summary-vrfs" }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) SetParent(parent types.Entity) { labelSummaryVrfs.parent = parent }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetParent() types.Entity { return labelSummaryVrfs.parent }

func (labelSummaryVrfs *MplsLsd_LabelSummaryVrfs) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_LabelSummaryVrfs_LabelSummaryVrf
// Dynamic label range summary by VRF
type MplsLsd_LabelSummaryVrfs_LabelSummaryVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Total labels. The type is interface{} with range: 0..4294967295.
    TotalLabels interface{}

    // Rsi connected. The type is interface{} with range: -2147483648..2147483647.
    RsiConnected interface{}

    // Owner counts. The type is slice of
    // MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount.
    OwnerCount []MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetFilter() yfilter.YFilter { return labelSummaryVrf.YFilter }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) SetFilter(yf yfilter.YFilter) { labelSummaryVrf.YFilter = yf }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "total-labels" { return "TotalLabels" }
    if yname == "rsi-connected" { return "RsiConnected" }
    if yname == "owner-count" { return "OwnerCount" }
    return ""
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetSegmentPath() string {
    return "label-summary-vrf" + "[vrf-name='" + fmt.Sprintf("%v", labelSummaryVrf.VrfName) + "']"
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "owner-count" {
        for _, c := range labelSummaryVrf.OwnerCount {
            if labelSummaryVrf.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount{}
        labelSummaryVrf.OwnerCount = append(labelSummaryVrf.OwnerCount, child)
        return &labelSummaryVrf.OwnerCount[len(labelSummaryVrf.OwnerCount)-1]
    }
    return nil
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummaryVrf.OwnerCount {
        children[labelSummaryVrf.OwnerCount[i].GetSegmentPath()] = &labelSummaryVrf.OwnerCount[i]
    }
    return children
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = labelSummaryVrf.VrfName
    leafs["vrf-name-xr"] = labelSummaryVrf.VrfNameXr
    leafs["total-labels"] = labelSummaryVrf.TotalLabels
    leafs["rsi-connected"] = labelSummaryVrf.RsiConnected
    return leafs
}

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetYangName() string { return "label-summary-vrf" }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) SetParent(parent types.Entity) { labelSummaryVrf.parent = parent }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetParent() types.Entity { return labelSummaryVrf.parent }

func (labelSummaryVrf *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf) GetParentYangName() string { return "label-summary-vrfs" }

// MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount
// Owner counts
type MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Application name. The type is string.
    ApplicationName interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // client-app identifier. The type is string.
    ApplicationInstance interface{}

    // Number of labels. The type is interface{} with range: 0..4294967295.
    NumberOfLabels interface{}
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetFilter() yfilter.YFilter { return ownerCount.YFilter }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) SetFilter(yf yfilter.YFilter) { ownerCount.YFilter = yf }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetGoName(yname string) string {
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "number-of-labels" { return "NumberOfLabels" }
    return ""
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetSegmentPath() string {
    return "owner-count"
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-type"] = ownerCount.ApplicationType
    leafs["application-name"] = ownerCount.ApplicationName
    leafs["application-role-primary"] = ownerCount.ApplicationRolePrimary
    leafs["application-instance"] = ownerCount.ApplicationInstance
    leafs["number-of-labels"] = ownerCount.NumberOfLabels
    return leafs
}

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetBundleName() string { return "cisco_ios_xr" }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetYangName() string { return "owner-count" }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) SetParent(parent types.Entity) { ownerCount.parent = parent }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetParent() types.Entity { return ownerCount.parent }

func (ownerCount *MplsLsd_LabelSummaryVrfs_LabelSummaryVrf_OwnerCount) GetParentYangName() string { return "label-summary-vrf" }

// MplsLsd_LabelRange
// Label range
type MplsLsd_LabelRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MinDynamicLabelValue interface{}

    // Maximum dynamic label value. The type is interface{} with range:
    // 0..4294967295.
    MaxDynamicLabelValue interface{}

    // Minimum static label value. The type is interface{} with range:
    // 0..4294967295.
    MinStaticLabelValue interface{}

    // Maximum static label value. The type is interface{} with range:
    // 0..4294967295.
    MaxStaticLabelValue interface{}
}

func (labelRange *MplsLsd_LabelRange) GetFilter() yfilter.YFilter { return labelRange.YFilter }

func (labelRange *MplsLsd_LabelRange) SetFilter(yf yfilter.YFilter) { labelRange.YFilter = yf }

func (labelRange *MplsLsd_LabelRange) GetGoName(yname string) string {
    if yname == "min-dynamic-label-value" { return "MinDynamicLabelValue" }
    if yname == "max-dynamic-label-value" { return "MaxDynamicLabelValue" }
    if yname == "min-static-label-value" { return "MinStaticLabelValue" }
    if yname == "max-static-label-value" { return "MaxStaticLabelValue" }
    return ""
}

func (labelRange *MplsLsd_LabelRange) GetSegmentPath() string {
    return "label-range"
}

func (labelRange *MplsLsd_LabelRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelRange *MplsLsd_LabelRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelRange *MplsLsd_LabelRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["min-dynamic-label-value"] = labelRange.MinDynamicLabelValue
    leafs["max-dynamic-label-value"] = labelRange.MaxDynamicLabelValue
    leafs["min-static-label-value"] = labelRange.MinStaticLabelValue
    leafs["max-static-label-value"] = labelRange.MaxStaticLabelValue
    return leafs
}

func (labelRange *MplsLsd_LabelRange) GetBundleName() string { return "cisco_ios_xr" }

func (labelRange *MplsLsd_LabelRange) GetYangName() string { return "label-range" }

func (labelRange *MplsLsd_LabelRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRange *MplsLsd_LabelRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRange *MplsLsd_LabelRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRange *MplsLsd_LabelRange) SetParent(parent types.Entity) { labelRange.parent = parent }

func (labelRange *MplsLsd_LabelRange) GetParent() types.Entity { return labelRange.parent }

func (labelRange *MplsLsd_LabelRange) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_RewriteSummaryVrfs
// Rewrite Summary by VRF
type MplsLsd_RewriteSummaryVrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Rewrite summary by VRF VRF-name. The type is slice of
    // MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf.
    RewriteSummaryVrf []MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetFilter() yfilter.YFilter { return rewriteSummaryVrfs.YFilter }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) SetFilter(yf yfilter.YFilter) { rewriteSummaryVrfs.YFilter = yf }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetGoName(yname string) string {
    if yname == "rewrite-summary-vrf" { return "RewriteSummaryVrf" }
    return ""
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetSegmentPath() string {
    return "rewrite-summary-vrfs"
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rewrite-summary-vrf" {
        for _, c := range rewriteSummaryVrfs.RewriteSummaryVrf {
            if rewriteSummaryVrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf{}
        rewriteSummaryVrfs.RewriteSummaryVrf = append(rewriteSummaryVrfs.RewriteSummaryVrf, child)
        return &rewriteSummaryVrfs.RewriteSummaryVrf[len(rewriteSummaryVrfs.RewriteSummaryVrf)-1]
    }
    return nil
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rewriteSummaryVrfs.RewriteSummaryVrf {
        children[rewriteSummaryVrfs.RewriteSummaryVrf[i].GetSegmentPath()] = &rewriteSummaryVrfs.RewriteSummaryVrf[i]
    }
    return children
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetYangName() string { return "rewrite-summary-vrfs" }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) SetParent(parent types.Entity) { rewriteSummaryVrfs.parent = parent }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetParent() types.Entity { return rewriteSummaryVrfs.parent }

func (rewriteSummaryVrfs *MplsLsd_RewriteSummaryVrfs) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf
// Rewrite summary by VRF VRF-name
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of label FPI. The type is interface{} with range: 0..4294967295.
    NumLabelFpi interface{}

    // Number of TE FPI. The type is interface{} with range: 0..4294967295.
    NumTefpi interface{}

    // Number of IPv4 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv4Fpi interface{}

    // Number of IPv6 FPI. The type is interface{} with range: 0..4294967295.
    NumIpv6Fpi interface{}

    // Number of PW List FPI. The type is interface{} with range: 0..4294967295.
    NumPwListTefpi interface{}

    // Number of DMTC FPI. The type is interface{} with range: 0..4294967295.
    NumDmtctefpi interface{}

    // Number of rewrites. The type is interface{} with range: 0..4294967295.
    NumRewrite interface{}

    // Total number of forward updates. The type is interface{} with range:
    // 0..4294967295.
    TotalForwardUpdate interface{}

    // Total number of forward update messages. The type is interface{} with
    // range: 0..4294967295.
    TotalForwadUpdateMessage interface{}

    // Total paths. The type is interface{} with range: 0..4294967295.
    TotalPaths interface{}

    // Total number of Traffic Eng IPv4 paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTEv4Paths interface{}

    // Total number of Traffic Eng Head paths. The type is interface{} with range:
    // 0..4294967295.
    TotalTeHeadPaths interface{}

    // Total number of Pseudo-wire paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPwPaths interface{}

    // Total number of IP Subscriber paths. The type is interface{} with range:
    // 0..4294967295.
    TotalIpSubPaths interface{}

    // Total number of IPv4 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv4RpfNeighbors interface{}

    // Total number of IPv6 RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    TotalIpv6RpfNeighbors interface{}

    // Number of rewrites with RPF Neighbors. The type is interface{} with range:
    // 0..4294967295.
    NumRewriteRpfNeighbors interface{}

    // Total number of DMTC External Interfaces. The type is interface{} with
    // range: 0..4294967295.
    TotalDmtcIntf interface{}

    // VRF Name. The type is string.
    VrfNameXr interface{}

    // Count for IPv4 paths.
    Ipv4Paths MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths

    // Count for IPv6 paths.
    Ipv6Paths MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetFilter() yfilter.YFilter { return rewriteSummaryVrf.YFilter }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) SetFilter(yf yfilter.YFilter) { rewriteSummaryVrf.YFilter = yf }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "num-label-fpi" { return "NumLabelFpi" }
    if yname == "num-tefpi" { return "NumTefpi" }
    if yname == "num-ipv4fpi" { return "NumIpv4Fpi" }
    if yname == "num-ipv6fpi" { return "NumIpv6Fpi" }
    if yname == "num-pw-list-tefpi" { return "NumPwListTefpi" }
    if yname == "num-dmtctefpi" { return "NumDmtctefpi" }
    if yname == "num-rewrite" { return "NumRewrite" }
    if yname == "total-forward-update" { return "TotalForwardUpdate" }
    if yname == "total-forwad-update-message" { return "TotalForwadUpdateMessage" }
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-t-ev4-paths" { return "TotalTEv4Paths" }
    if yname == "total-te-head-paths" { return "TotalTeHeadPaths" }
    if yname == "total-pw-paths" { return "TotalPwPaths" }
    if yname == "total-ip-sub-paths" { return "TotalIpSubPaths" }
    if yname == "total-ipv4rpf-neighbors" { return "TotalIpv4RpfNeighbors" }
    if yname == "total-ipv6rpf-neighbors" { return "TotalIpv6RpfNeighbors" }
    if yname == "num-rewrite-rpf-neighbors" { return "NumRewriteRpfNeighbors" }
    if yname == "total-dmtc-intf" { return "TotalDmtcIntf" }
    if yname == "vrf-name-xr" { return "VrfNameXr" }
    if yname == "ipv4-paths" { return "Ipv4Paths" }
    if yname == "ipv6-paths" { return "Ipv6Paths" }
    return ""
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetSegmentPath() string {
    return "rewrite-summary-vrf" + "[vrf-name='" + fmt.Sprintf("%v", rewriteSummaryVrf.VrfName) + "']"
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-paths" {
        return &rewriteSummaryVrf.Ipv4Paths
    }
    if childYangName == "ipv6-paths" {
        return &rewriteSummaryVrf.Ipv6Paths
    }
    return nil
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-paths"] = &rewriteSummaryVrf.Ipv4Paths
    children["ipv6-paths"] = &rewriteSummaryVrf.Ipv6Paths
    return children
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = rewriteSummaryVrf.VrfName
    leafs["num-label-fpi"] = rewriteSummaryVrf.NumLabelFpi
    leafs["num-tefpi"] = rewriteSummaryVrf.NumTefpi
    leafs["num-ipv4fpi"] = rewriteSummaryVrf.NumIpv4Fpi
    leafs["num-ipv6fpi"] = rewriteSummaryVrf.NumIpv6Fpi
    leafs["num-pw-list-tefpi"] = rewriteSummaryVrf.NumPwListTefpi
    leafs["num-dmtctefpi"] = rewriteSummaryVrf.NumDmtctefpi
    leafs["num-rewrite"] = rewriteSummaryVrf.NumRewrite
    leafs["total-forward-update"] = rewriteSummaryVrf.TotalForwardUpdate
    leafs["total-forwad-update-message"] = rewriteSummaryVrf.TotalForwadUpdateMessage
    leafs["total-paths"] = rewriteSummaryVrf.TotalPaths
    leafs["total-t-ev4-paths"] = rewriteSummaryVrf.TotalTEv4Paths
    leafs["total-te-head-paths"] = rewriteSummaryVrf.TotalTeHeadPaths
    leafs["total-pw-paths"] = rewriteSummaryVrf.TotalPwPaths
    leafs["total-ip-sub-paths"] = rewriteSummaryVrf.TotalIpSubPaths
    leafs["total-ipv4rpf-neighbors"] = rewriteSummaryVrf.TotalIpv4RpfNeighbors
    leafs["total-ipv6rpf-neighbors"] = rewriteSummaryVrf.TotalIpv6RpfNeighbors
    leafs["num-rewrite-rpf-neighbors"] = rewriteSummaryVrf.NumRewriteRpfNeighbors
    leafs["total-dmtc-intf"] = rewriteSummaryVrf.TotalDmtcIntf
    leafs["vrf-name-xr"] = rewriteSummaryVrf.VrfNameXr
    return leafs
}

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetBundleName() string { return "cisco_ios_xr" }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetYangName() string { return "rewrite-summary-vrf" }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) SetParent(parent types.Entity) { rewriteSummaryVrf.parent = parent }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetParent() types.Entity { return rewriteSummaryVrf.parent }

func (rewriteSummaryVrf *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf) GetParentYangName() string { return "rewrite-summary-vrfs" }

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths
// Count for IPv4 paths
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetFilter() yfilter.YFilter { return ipv4Paths.YFilter }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) SetFilter(yf yfilter.YFilter) { ipv4Paths.YFilter = yf }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetSegmentPath() string {
    return "ipv4-paths"
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv4Paths.TotalPaths
    leafs["total-backup-paths"] = ipv4Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv4Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv4Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv4Paths.TotalPopLkupPaths
    return leafs
}

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetYangName() string { return "ipv4-paths" }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) SetParent(parent types.Entity) { ipv4Paths.parent = parent }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetParent() types.Entity { return ipv4Paths.parent }

func (ipv4Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv4Paths) GetParentYangName() string { return "rewrite-summary-vrf" }

// MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths
// Count for IPv6 paths
type MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of IP paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPaths interface{}

    // Total number of non-primary backup paths. The type is interface{} with
    // range: 0..4294967295.
    TotalBackupPaths interface{}

    // Total number of remote backup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalRemoteBackupPaths interface{}

    // Total number of protected paths. The type is interface{} with range:
    // 0..4294967295.
    TotalProtectedPaths interface{}

    // Total number of Pop-and-Lookup paths. The type is interface{} with range:
    // 0..4294967295.
    TotalPopLkupPaths interface{}
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetFilter() yfilter.YFilter { return ipv6Paths.YFilter }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) SetFilter(yf yfilter.YFilter) { ipv6Paths.YFilter = yf }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetGoName(yname string) string {
    if yname == "total-paths" { return "TotalPaths" }
    if yname == "total-backup-paths" { return "TotalBackupPaths" }
    if yname == "total-remote-backup-paths" { return "TotalRemoteBackupPaths" }
    if yname == "total-protected-paths" { return "TotalProtectedPaths" }
    if yname == "total-pop-lkup-paths" { return "TotalPopLkupPaths" }
    return ""
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetSegmentPath() string {
    return "ipv6-paths"
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-paths"] = ipv6Paths.TotalPaths
    leafs["total-backup-paths"] = ipv6Paths.TotalBackupPaths
    leafs["total-remote-backup-paths"] = ipv6Paths.TotalRemoteBackupPaths
    leafs["total-protected-paths"] = ipv6Paths.TotalProtectedPaths
    leafs["total-pop-lkup-paths"] = ipv6Paths.TotalPopLkupPaths
    return leafs
}

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetYangName() string { return "ipv6-paths" }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) SetParent(parent types.Entity) { ipv6Paths.parent = parent }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetParent() types.Entity { return ipv6Paths.parent }

func (ipv6Paths *MplsLsd_RewriteSummaryVrfs_RewriteSummaryVrf_Ipv6Paths) GetParentYangName() string { return "rewrite-summary-vrf" }

// MplsLsd_Interfaces
// Table of MPLS interfaces
type MplsLsd_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for MPLS interface. The type is slice of MplsLsd_Interfaces_Interface.
    Interface []MplsLsd_Interfaces_Interface
}

func (interfaces *MplsLsd_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *MplsLsd_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *MplsLsd_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *MplsLsd_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *MplsLsd_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *MplsLsd_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *MplsLsd_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *MplsLsd_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *MplsLsd_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *MplsLsd_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *MplsLsd_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *MplsLsd_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *MplsLsd_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *MplsLsd_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *MplsLsd_Interfaces) GetParentYangName() string { return "mpls-lsd" }

// MplsLsd_Interfaces_Interface
// Data for MPLS interface
type MplsLsd_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    Interface interface{}

    // Interface state. The type is MgmtLsdIntfState.
    InterfaceState interface{}

    // Application Owner. The type is slice of
    // MplsLsd_Interfaces_Interface_ApplicationOwner.
    ApplicationOwner []MplsLsd_Interfaces_Interface_ApplicationOwner
}

func (self *MplsLsd_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *MplsLsd_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *MplsLsd_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface" { return "Interface" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "application-owner" { return "ApplicationOwner" }
    return ""
}

func (self *MplsLsd_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *MplsLsd_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-owner" {
        for _, c := range self.ApplicationOwner {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := MplsLsd_Interfaces_Interface_ApplicationOwner{}
        self.ApplicationOwner = append(self.ApplicationOwner, child)
        return &self.ApplicationOwner[len(self.ApplicationOwner)-1]
    }
    return nil
}

func (self *MplsLsd_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range self.ApplicationOwner {
        children[self.ApplicationOwner[i].GetSegmentPath()] = &self.ApplicationOwner[i]
    }
    return children
}

func (self *MplsLsd_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface"] = self.Interface
    leafs["interface-state"] = self.InterfaceState
    return leafs
}

func (self *MplsLsd_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *MplsLsd_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *MplsLsd_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *MplsLsd_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *MplsLsd_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *MplsLsd_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *MplsLsd_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *MplsLsd_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// MplsLsd_Interfaces_Interface_ApplicationOwner
// Application Owner
type MplsLsd_Interfaces_Interface_ApplicationOwner struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Application name. The type is string.
    ApplicationName interface{}

    // Application type. The type is MgmtLsdApp.
    ApplicationType interface{}

    // Primary/Backup role. The type is interface{} with range:
    // -2147483648..2147483647.
    ApplicationRolePrimary interface{}

    // Application instance Name. The type is string.
    ApplicationInstance interface{}

    // Application resource state. The type is MgmtLsdAppRsrcState.
    ResourceState interface{}
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetFilter() yfilter.YFilter { return applicationOwner.YFilter }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) SetFilter(yf yfilter.YFilter) { applicationOwner.YFilter = yf }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetGoName(yname string) string {
    if yname == "application-name" { return "ApplicationName" }
    if yname == "application-type" { return "ApplicationType" }
    if yname == "application-role-primary" { return "ApplicationRolePrimary" }
    if yname == "application-instance" { return "ApplicationInstance" }
    if yname == "resource-state" { return "ResourceState" }
    return ""
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetSegmentPath() string {
    return "application-owner"
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["application-name"] = applicationOwner.ApplicationName
    leafs["application-type"] = applicationOwner.ApplicationType
    leafs["application-role-primary"] = applicationOwner.ApplicationRolePrimary
    leafs["application-instance"] = applicationOwner.ApplicationInstance
    leafs["resource-state"] = applicationOwner.ResourceState
    return leafs
}

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetBundleName() string { return "cisco_ios_xr" }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetYangName() string { return "application-owner" }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) SetParent(parent types.Entity) { applicationOwner.parent = parent }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetParent() types.Entity { return applicationOwner.parent }

func (applicationOwner *MplsLsd_Interfaces_Interface_ApplicationOwner) GetParentYangName() string { return "interface" }

