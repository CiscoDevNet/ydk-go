// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-bfd package operational data.
// 
// This module contains definitions
// for the following management objects:
//   bfd: Bidirectional Forwarding Detection(BFD) operational data
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ip_bfd_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_bfd_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-bfd-oper bfd}", reflect.TypeOf(Bfd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-bfd-oper:bfd", reflect.TypeOf(Bfd{}))
}

// BfdSession represents BFD session type
type BfdSession string

const (
    // Session type is undefined
    BfdSession_undefined BfdSession = "undefined"

    // Session type is bundle member
    BfdSession_bundle_member BfdSession = "bundle-member"

    // Session type is bundle interface
    BfdSession_bundle_interface BfdSession = "bundle-interface"

    // Session type is state inheriting
    BfdSession_state_inheriting BfdSession = "state-inheriting"

    // Session type is bundle vlan
    BfdSession_bundle_vlan BfdSession = "bundle-vlan"

    // Session type is MPLS-TP
    BfdSession_mpls_tp BfdSession = "mpls-tp"

    // Session type is GRE tunnel
    BfdSession_gre BfdSession = "gre"

    // Session type is PW-HE
    BfdSession_pseudowire_headend BfdSession = "pseudowire-headend"

    // Session type is IP single hop
    BfdSession_ip_single_hop BfdSession = "ip-single-hop"
)

// BfdAfId represents Bfd af id
type BfdAfId string

const (
    // No Address
    BfdAfId_bfd_af_id_none BfdAfId = "bfd-af-id-none"

    // IPv4 AFI
    BfdAfId_bfd_af_id_ipv4 BfdAfId = "bfd-af-id-ipv4"

    // IPv6 AFI
    BfdAfId_bfd_af_id_ipv6 BfdAfId = "bfd-af-id-ipv6"
)

// BfdMpDownloadState represents Bfd mp download state
type BfdMpDownloadState string

const (
    // bfd mp download none
    BfdMpDownloadState_bfd_mp_download_none BfdMpDownloadState = "bfd-mp-download-none"

    // bfd mp download no lc
    BfdMpDownloadState_bfd_mp_download_no_lc BfdMpDownloadState = "bfd-mp-download-no-lc"

    // bfd mp download downloaded
    BfdMpDownloadState_bfd_mp_download_downloaded BfdMpDownloadState = "bfd-mp-download-downloaded"

    // bfd mp download ack
    BfdMpDownloadState_bfd_mp_download_ack BfdMpDownloadState = "bfd-mp-download-ack"

    // bfd mp download nack
    BfdMpDownloadState_bfd_mp_download_nack BfdMpDownloadState = "bfd-mp-download-nack"

    // bfd mp download delete
    BfdMpDownloadState_bfd_mp_download_delete BfdMpDownloadState = "bfd-mp-download-delete"
)

// BfdMgmtSessionState represents BFD session states
type BfdMgmtSessionState string

const (
    // Session in Administratively Shutdown State
    BfdMgmtSessionState_bfd_mgmt_session_state_admin_down BfdMgmtSessionState = "bfd-mgmt-session-state-admin-down"

    // Session in Down State
    BfdMgmtSessionState_bfd_mgmt_session_state_down BfdMgmtSessionState = "bfd-mgmt-session-state-down"

    // Session in Initializing State
    BfdMgmtSessionState_bfd_mgmt_session_state_init BfdMgmtSessionState = "bfd-mgmt-session-state-init"

    // Session in Up State
    BfdMgmtSessionState_bfd_mgmt_session_state_up BfdMgmtSessionState = "bfd-mgmt-session-state-up"

    // Session in Failing State
    BfdMgmtSessionState_bfd_mgmt_session_state_failing BfdMgmtSessionState = "bfd-mgmt-session-state-failing"

    // Session in Unknown State
    BfdMgmtSessionState_bfd_mgmt_session_state_unknown BfdMgmtSessionState = "bfd-mgmt-session-state-unknown"
)

// BfdMgmtSessionDiag represents BFD session diagnostic
type BfdMgmtSessionDiag string

const (
    // No diagnostic
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_none BfdMgmtSessionDiag = "bfd-mgmt-session-diag-none"

    // Control Detection Time Expired
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_control_detect_expired BfdMgmtSessionDiag = "bfd-mgmt-session-diag-control-detect-expired"

    // Echo Function Failed
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_echo_function_failed BfdMgmtSessionDiag = "bfd-mgmt-session-diag-echo-function-failed"

    // Neighbor Signaled Session Down
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_nb_or_signaled_down BfdMgmtSessionDiag = "bfd-mgmt-session-diag-nb-or-signaled-down"

    // Forwarding Plane Reset
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_fwding_plane_reset BfdMgmtSessionDiag = "bfd-mgmt-session-diag-fwding-plane-reset"

    // Path Down
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_path_down BfdMgmtSessionDiag = "bfd-mgmt-session-diag-path-down"

    // Concatenated Path Down
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_conc_path_down BfdMgmtSessionDiag = "bfd-mgmt-session-diag-conc-path-down"

    // Administratively Down
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_admin_down BfdMgmtSessionDiag = "bfd-mgmt-session-diag-admin-down"

    // Reverse Concatenated Path Down
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_rev_conc_path_down BfdMgmtSessionDiag = "bfd-mgmt-session-diag-rev-conc-path-down"

    // Unknown diagnostic state
    BfdMgmtSessionDiag_bfd_mgmt_session_diag_num BfdMgmtSessionDiag = "bfd-mgmt-session-diag-num"
)

// BfdMgmtPktDisplay represents BFD session type
type BfdMgmtPktDisplay string

const (
    // None
    BfdMgmtPktDisplay_bfd_mgmt_pkt_display_type_none BfdMgmtPktDisplay = "bfd-mgmt-pkt-display-type-none"

    // Display Type Bundle RTR Member
    BfdMgmtPktDisplay_bfd_mgmt_pkt_display_type_bob_mbr BfdMgmtPktDisplay = "bfd-mgmt-pkt-display-type-bob-mbr"

    // Display Type Enum Max Value
    BfdMgmtPktDisplay_bfd_mgmt_pkt_display_type_max BfdMgmtPktDisplay = "bfd-mgmt-pkt-display-type-max"
)

// Bfd
// Bidirectional Forwarding Detection(BFD)
// operational data
type Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of brief information about all Label BFD sessions in the System.
    LabelSessionBriefs Bfd_LabelSessionBriefs

    // Summary information of IPv4 BFD over MPLS-TE Tail.
    Ipv4BfDoMplsteTailSummary Bfd_Ipv4BfDoMplsteTailSummary

    // IPv6 single hop Counters.
    Ipv6SingleHopCounters Bfd_Ipv6SingleHopCounters

    // Counters.
    Counters Bfd_Counters

    // Table of detailed information about BFD clients.
    ClientDetails Bfd_ClientDetails

    // Summary information of BFD IPv4 singlehop sessions.
    Ipv4SingleHopSummary Bfd_Ipv4SingleHopSummary

    // Summary information of BFD IPv6 singlehop sessions.
    Ipv6SingleHopSummary Bfd_Ipv6SingleHopSummary

    // Label multipath.
    LabelMultiPaths Bfd_LabelMultiPaths

    // Table of detailed information about all IPv4 multihop BFD sessions in the
    // System .
    Ipv4MultiHopSessionDetails Bfd_Ipv4MultiHopSessionDetails

    // Table of detailed information about all IPv4 singlehop BFD sessions in the
    // System .
    Ipv4SingleHopSessionDetails Bfd_Ipv4SingleHopSessionDetails

    // Table of brief information about all IPv4 multihop BFD sessions in the
    // System.
    Ipv4MultiHopSessionBriefs Bfd_Ipv4MultiHopSessionBriefs

    // Generic summary information about BFD location.
    GenericSummaries Bfd_GenericSummaries

    // IPv6 single hop multipath.
    Ipv6SingleHopMultiPaths Bfd_Ipv6SingleHopMultiPaths

    // Table of summary information about BFD IPv4 singlehop sessions per
    // location.
    Ipv4SingleHopNodeLocationSummaries Bfd_Ipv4SingleHopNodeLocationSummaries

    // Summary information of Label BFD.
    LabelSummary Bfd_LabelSummary

    // Table of brief information about all IPv4 BFD over MPLS-TE Head sessions in
    // the System.
    Ipv4BfDoMplsteHeadSessionBriefs Bfd_Ipv4BfDoMplsteHeadSessionBriefs

    // Table of detailed information about all IPv4 BFD over MPLS-TE Tail sessions
    // in the System.
    Ipv4BfDoMplsteTailSessionDetails Bfd_Ipv4BfDoMplsteTailSessionDetails

    // Table of summary information about BFD IPv4 multihop sessions per location.
    Ipv4MultiHopNodeLocationSummaries Bfd_Ipv4MultiHopNodeLocationSummaries

    // Table of brief information about all IPv4 BFD over MPLS-TE Tail sessions in
    // the System.
    Ipv4BfDoMplsteTailSessionBriefs Bfd_Ipv4BfDoMplsteTailSessionBriefs

    // Table of summary information about BFD IPv6 multihop sessions per location.
    Ipv6MultiHopNodeLocationSummaries Bfd_Ipv6MultiHopNodeLocationSummaries

    // Summary information of BFD IPv4 multihop sessions.
    Ipv4MultiHopSummary Bfd_Ipv4MultiHopSummary

    // IPv4 single hop Counters.
    Ipv4SingleHopCounters Bfd_Ipv4SingleHopCounters

    // Table of detailed information about all IPv6 multihop BFD sessions in the
    // System .
    Ipv6MultiHopSessionDetails Bfd_Ipv6MultiHopSessionDetails

    // IPv6 multi hop multipath.
    Ipv6MultiHopMultiPaths Bfd_Ipv6MultiHopMultiPaths

    // IPv4 BFD over MPLS-TE Counters.
    Ipv4BfDoMplsteHeadCounters Bfd_Ipv4BfDoMplsteHeadCounters

    // BFD session MIB database.
    SessionMibs Bfd_SessionMibs

    // Summary information of BFD IPv6 multihop sessions.
    Ipv6MultiHopSummary Bfd_Ipv6MultiHopSummary

    // Table of summary about Label BFD sessions for location.
    LabelSummaryNodes Bfd_LabelSummaryNodes

    // Table of brief information about all IPv6 multihop BFD sessions in the
    // System.
    Ipv6MultiHopSessionBriefs Bfd_Ipv6MultiHopSessionBriefs

    // Table of brief information about singlehop IPv4 BFD sessions in the System.
    SessionBriefs Bfd_SessionBriefs

    // Table of summary information about BFD IPv6 singlehop sessions per
    // location.
    Ipv6SingleHopNodeLocationSummaries Bfd_Ipv6SingleHopNodeLocationSummaries

    // Summary information of BFD IPv4 singlehop sessions.
    Summary Bfd_Summary

    // Table of summary about IPv4 TE tail BFD sessions for location.
    Ipv4BfdMplsteTailNodeSummaries Bfd_Ipv4BfdMplsteTailNodeSummaries

    // Table of summary information about IPv4 singlehop BFD sessions for
    // location.
    Ipv4SingleHopLocationSummaries Bfd_Ipv4SingleHopLocationSummaries

    // Table of summary about IPv4 TE head BFD sessions for location.
    Ipv4BfdMplsteHeadSummaryNodes Bfd_Ipv4BfdMplsteHeadSummaryNodes

    // Table of detailed information about all Label BFD sessions in the System .
    LabelSessionDetails Bfd_LabelSessionDetails

    // Table of detailed information about all IPv6 singlehop BFD sessions in the
    // System .
    Ipv6SingleHopSessionDetails Bfd_Ipv6SingleHopSessionDetails

    // IPv4 multiple hop Counters.
    Ipv4MultiHopCounters Bfd_Ipv4MultiHopCounters

    // Table of detailed information about IPv4 singlehop BFD sessions in the
    // System .
    SessionDetails Bfd_SessionDetails

    // IPv4 single hop multipath.
    Ipv4SingleHopMultiPaths Bfd_Ipv4SingleHopMultiPaths

    // Table of brief information about all IPv4 singlehop BFD sessions in the
    // System.
    Ipv4SingleHopSessionBriefs Bfd_Ipv4SingleHopSessionBriefs

    // IPv6 multiple hop Counters.
    Ipv6MultiHopCounters Bfd_Ipv6MultiHopCounters

    // Table of summary information about BFD IPv6 singlehop sessions per
    // location.
    Ipv6SingleHopLocationSummaries Bfd_Ipv6SingleHopLocationSummaries

    // Label Counters.
    LabelCounters Bfd_LabelCounters

    // Table of detailed information about all IPv4 BFD over MPLS-TE Head sessions
    // in the System.
    Ipv4BfDoMplsteHeadSessionDetails Bfd_Ipv4BfDoMplsteHeadSessionDetails

    // Table of brief information about all BFD relations in the System.
    RelationBriefs Bfd_RelationBriefs

    // Table of Brief information about BFD clients.
    ClientBriefs Bfd_ClientBriefs

    // IPv4 BFD over MPLS-TE Head multipath.
    Ipv4BfDoMplsteHeadMultiPaths Bfd_Ipv4BfDoMplsteHeadMultiPaths

    // Table of detail information about all BFD relations in the System.
    RelationDetails Bfd_RelationDetails

    // IPv4 BFD over MPLS-TE Counters.
    Ipv4BfDoMplsteTailCounters Bfd_Ipv4BfDoMplsteTailCounters

    // Table of brief information about all IPv6 singlehop BFD sessions in the
    // System.
    Ipv6SingleHopSessionBriefs Bfd_Ipv6SingleHopSessionBriefs

    // IPv4 BFD over MPLS-TE Tail multipath.
    Ipv4BfDoMplsteTailMultiPaths Bfd_Ipv4BfDoMplsteTailMultiPaths

    // IPv4 multi-hop multipath.
    Ipv4MultiHopMultiPaths Bfd_Ipv4MultiHopMultiPaths

    // Summary information of IPv4 BFD over MPLS-TE Head.
    Ipv4BfDoMplsteHeadSummary Bfd_Ipv4BfDoMplsteHeadSummary
}

func (bfd *Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Bfd) GetGoName(yname string) string {
    if yname == "label-session-briefs" { return "LabelSessionBriefs" }
    if yname == "ipv4bf-do-mplste-tail-summary" { return "Ipv4BfDoMplsteTailSummary" }
    if yname == "ipv6-single-hop-counters" { return "Ipv6SingleHopCounters" }
    if yname == "counters" { return "Counters" }
    if yname == "client-details" { return "ClientDetails" }
    if yname == "ipv4-single-hop-summary" { return "Ipv4SingleHopSummary" }
    if yname == "ipv6-single-hop-summary" { return "Ipv6SingleHopSummary" }
    if yname == "label-multi-paths" { return "LabelMultiPaths" }
    if yname == "ipv4-multi-hop-session-details" { return "Ipv4MultiHopSessionDetails" }
    if yname == "ipv4-single-hop-session-details" { return "Ipv4SingleHopSessionDetails" }
    if yname == "ipv4-multi-hop-session-briefs" { return "Ipv4MultiHopSessionBriefs" }
    if yname == "generic-summaries" { return "GenericSummaries" }
    if yname == "ipv6-single-hop-multi-paths" { return "Ipv6SingleHopMultiPaths" }
    if yname == "ipv4-single-hop-node-location-summaries" { return "Ipv4SingleHopNodeLocationSummaries" }
    if yname == "label-summary" { return "LabelSummary" }
    if yname == "ipv4bf-do-mplste-head-session-briefs" { return "Ipv4BfDoMplsteHeadSessionBriefs" }
    if yname == "ipv4bf-do-mplste-tail-session-details" { return "Ipv4BfDoMplsteTailSessionDetails" }
    if yname == "ipv4-multi-hop-node-location-summaries" { return "Ipv4MultiHopNodeLocationSummaries" }
    if yname == "ipv4bf-do-mplste-tail-session-briefs" { return "Ipv4BfDoMplsteTailSessionBriefs" }
    if yname == "ipv6-multi-hop-node-location-summaries" { return "Ipv6MultiHopNodeLocationSummaries" }
    if yname == "ipv4-multi-hop-summary" { return "Ipv4MultiHopSummary" }
    if yname == "ipv4-single-hop-counters" { return "Ipv4SingleHopCounters" }
    if yname == "ipv6-multi-hop-session-details" { return "Ipv6MultiHopSessionDetails" }
    if yname == "ipv6-multi-hop-multi-paths" { return "Ipv6MultiHopMultiPaths" }
    if yname == "ipv4bf-do-mplste-head-counters" { return "Ipv4BfDoMplsteHeadCounters" }
    if yname == "session-mibs" { return "SessionMibs" }
    if yname == "ipv6-multi-hop-summary" { return "Ipv6MultiHopSummary" }
    if yname == "label-summary-nodes" { return "LabelSummaryNodes" }
    if yname == "ipv6-multi-hop-session-briefs" { return "Ipv6MultiHopSessionBriefs" }
    if yname == "session-briefs" { return "SessionBriefs" }
    if yname == "ipv6-single-hop-node-location-summaries" { return "Ipv6SingleHopNodeLocationSummaries" }
    if yname == "summary" { return "Summary" }
    if yname == "ipv4bfd-mplste-tail-node-summaries" { return "Ipv4BfdMplsteTailNodeSummaries" }
    if yname == "ipv4-single-hop-location-summaries" { return "Ipv4SingleHopLocationSummaries" }
    if yname == "ipv4bfd-mplste-head-summary-nodes" { return "Ipv4BfdMplsteHeadSummaryNodes" }
    if yname == "label-session-details" { return "LabelSessionDetails" }
    if yname == "ipv6-single-hop-session-details" { return "Ipv6SingleHopSessionDetails" }
    if yname == "ipv4-multi-hop-counters" { return "Ipv4MultiHopCounters" }
    if yname == "session-details" { return "SessionDetails" }
    if yname == "ipv4-single-hop-multi-paths" { return "Ipv4SingleHopMultiPaths" }
    if yname == "ipv4-single-hop-session-briefs" { return "Ipv4SingleHopSessionBriefs" }
    if yname == "ipv6-multi-hop-counters" { return "Ipv6MultiHopCounters" }
    if yname == "ipv6-single-hop-location-summaries" { return "Ipv6SingleHopLocationSummaries" }
    if yname == "label-counters" { return "LabelCounters" }
    if yname == "ipv4bf-do-mplste-head-session-details" { return "Ipv4BfDoMplsteHeadSessionDetails" }
    if yname == "relation-briefs" { return "RelationBriefs" }
    if yname == "client-briefs" { return "ClientBriefs" }
    if yname == "ipv4bf-do-mplste-head-multi-paths" { return "Ipv4BfDoMplsteHeadMultiPaths" }
    if yname == "relation-details" { return "RelationDetails" }
    if yname == "ipv4bf-do-mplste-tail-counters" { return "Ipv4BfDoMplsteTailCounters" }
    if yname == "ipv6-single-hop-session-briefs" { return "Ipv6SingleHopSessionBriefs" }
    if yname == "ipv4bf-do-mplste-tail-multi-paths" { return "Ipv4BfDoMplsteTailMultiPaths" }
    if yname == "ipv4-multi-hop-multi-paths" { return "Ipv4MultiHopMultiPaths" }
    if yname == "ipv4bf-do-mplste-head-summary" { return "Ipv4BfDoMplsteHeadSummary" }
    return ""
}

func (bfd *Bfd) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-bfd-oper:bfd"
}

func (bfd *Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-session-briefs" {
        return &bfd.LabelSessionBriefs
    }
    if childYangName == "ipv4bf-do-mplste-tail-summary" {
        return &bfd.Ipv4BfDoMplsteTailSummary
    }
    if childYangName == "ipv6-single-hop-counters" {
        return &bfd.Ipv6SingleHopCounters
    }
    if childYangName == "counters" {
        return &bfd.Counters
    }
    if childYangName == "client-details" {
        return &bfd.ClientDetails
    }
    if childYangName == "ipv4-single-hop-summary" {
        return &bfd.Ipv4SingleHopSummary
    }
    if childYangName == "ipv6-single-hop-summary" {
        return &bfd.Ipv6SingleHopSummary
    }
    if childYangName == "label-multi-paths" {
        return &bfd.LabelMultiPaths
    }
    if childYangName == "ipv4-multi-hop-session-details" {
        return &bfd.Ipv4MultiHopSessionDetails
    }
    if childYangName == "ipv4-single-hop-session-details" {
        return &bfd.Ipv4SingleHopSessionDetails
    }
    if childYangName == "ipv4-multi-hop-session-briefs" {
        return &bfd.Ipv4MultiHopSessionBriefs
    }
    if childYangName == "generic-summaries" {
        return &bfd.GenericSummaries
    }
    if childYangName == "ipv6-single-hop-multi-paths" {
        return &bfd.Ipv6SingleHopMultiPaths
    }
    if childYangName == "ipv4-single-hop-node-location-summaries" {
        return &bfd.Ipv4SingleHopNodeLocationSummaries
    }
    if childYangName == "label-summary" {
        return &bfd.LabelSummary
    }
    if childYangName == "ipv4bf-do-mplste-head-session-briefs" {
        return &bfd.Ipv4BfDoMplsteHeadSessionBriefs
    }
    if childYangName == "ipv4bf-do-mplste-tail-session-details" {
        return &bfd.Ipv4BfDoMplsteTailSessionDetails
    }
    if childYangName == "ipv4-multi-hop-node-location-summaries" {
        return &bfd.Ipv4MultiHopNodeLocationSummaries
    }
    if childYangName == "ipv4bf-do-mplste-tail-session-briefs" {
        return &bfd.Ipv4BfDoMplsteTailSessionBriefs
    }
    if childYangName == "ipv6-multi-hop-node-location-summaries" {
        return &bfd.Ipv6MultiHopNodeLocationSummaries
    }
    if childYangName == "ipv4-multi-hop-summary" {
        return &bfd.Ipv4MultiHopSummary
    }
    if childYangName == "ipv4-single-hop-counters" {
        return &bfd.Ipv4SingleHopCounters
    }
    if childYangName == "ipv6-multi-hop-session-details" {
        return &bfd.Ipv6MultiHopSessionDetails
    }
    if childYangName == "ipv6-multi-hop-multi-paths" {
        return &bfd.Ipv6MultiHopMultiPaths
    }
    if childYangName == "ipv4bf-do-mplste-head-counters" {
        return &bfd.Ipv4BfDoMplsteHeadCounters
    }
    if childYangName == "session-mibs" {
        return &bfd.SessionMibs
    }
    if childYangName == "ipv6-multi-hop-summary" {
        return &bfd.Ipv6MultiHopSummary
    }
    if childYangName == "label-summary-nodes" {
        return &bfd.LabelSummaryNodes
    }
    if childYangName == "ipv6-multi-hop-session-briefs" {
        return &bfd.Ipv6MultiHopSessionBriefs
    }
    if childYangName == "session-briefs" {
        return &bfd.SessionBriefs
    }
    if childYangName == "ipv6-single-hop-node-location-summaries" {
        return &bfd.Ipv6SingleHopNodeLocationSummaries
    }
    if childYangName == "summary" {
        return &bfd.Summary
    }
    if childYangName == "ipv4bfd-mplste-tail-node-summaries" {
        return &bfd.Ipv4BfdMplsteTailNodeSummaries
    }
    if childYangName == "ipv4-single-hop-location-summaries" {
        return &bfd.Ipv4SingleHopLocationSummaries
    }
    if childYangName == "ipv4bfd-mplste-head-summary-nodes" {
        return &bfd.Ipv4BfdMplsteHeadSummaryNodes
    }
    if childYangName == "label-session-details" {
        return &bfd.LabelSessionDetails
    }
    if childYangName == "ipv6-single-hop-session-details" {
        return &bfd.Ipv6SingleHopSessionDetails
    }
    if childYangName == "ipv4-multi-hop-counters" {
        return &bfd.Ipv4MultiHopCounters
    }
    if childYangName == "session-details" {
        return &bfd.SessionDetails
    }
    if childYangName == "ipv4-single-hop-multi-paths" {
        return &bfd.Ipv4SingleHopMultiPaths
    }
    if childYangName == "ipv4-single-hop-session-briefs" {
        return &bfd.Ipv4SingleHopSessionBriefs
    }
    if childYangName == "ipv6-multi-hop-counters" {
        return &bfd.Ipv6MultiHopCounters
    }
    if childYangName == "ipv6-single-hop-location-summaries" {
        return &bfd.Ipv6SingleHopLocationSummaries
    }
    if childYangName == "label-counters" {
        return &bfd.LabelCounters
    }
    if childYangName == "ipv4bf-do-mplste-head-session-details" {
        return &bfd.Ipv4BfDoMplsteHeadSessionDetails
    }
    if childYangName == "relation-briefs" {
        return &bfd.RelationBriefs
    }
    if childYangName == "client-briefs" {
        return &bfd.ClientBriefs
    }
    if childYangName == "ipv4bf-do-mplste-head-multi-paths" {
        return &bfd.Ipv4BfDoMplsteHeadMultiPaths
    }
    if childYangName == "relation-details" {
        return &bfd.RelationDetails
    }
    if childYangName == "ipv4bf-do-mplste-tail-counters" {
        return &bfd.Ipv4BfDoMplsteTailCounters
    }
    if childYangName == "ipv6-single-hop-session-briefs" {
        return &bfd.Ipv6SingleHopSessionBriefs
    }
    if childYangName == "ipv4bf-do-mplste-tail-multi-paths" {
        return &bfd.Ipv4BfDoMplsteTailMultiPaths
    }
    if childYangName == "ipv4-multi-hop-multi-paths" {
        return &bfd.Ipv4MultiHopMultiPaths
    }
    if childYangName == "ipv4bf-do-mplste-head-summary" {
        return &bfd.Ipv4BfDoMplsteHeadSummary
    }
    return nil
}

func (bfd *Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-session-briefs"] = &bfd.LabelSessionBriefs
    children["ipv4bf-do-mplste-tail-summary"] = &bfd.Ipv4BfDoMplsteTailSummary
    children["ipv6-single-hop-counters"] = &bfd.Ipv6SingleHopCounters
    children["counters"] = &bfd.Counters
    children["client-details"] = &bfd.ClientDetails
    children["ipv4-single-hop-summary"] = &bfd.Ipv4SingleHopSummary
    children["ipv6-single-hop-summary"] = &bfd.Ipv6SingleHopSummary
    children["label-multi-paths"] = &bfd.LabelMultiPaths
    children["ipv4-multi-hop-session-details"] = &bfd.Ipv4MultiHopSessionDetails
    children["ipv4-single-hop-session-details"] = &bfd.Ipv4SingleHopSessionDetails
    children["ipv4-multi-hop-session-briefs"] = &bfd.Ipv4MultiHopSessionBriefs
    children["generic-summaries"] = &bfd.GenericSummaries
    children["ipv6-single-hop-multi-paths"] = &bfd.Ipv6SingleHopMultiPaths
    children["ipv4-single-hop-node-location-summaries"] = &bfd.Ipv4SingleHopNodeLocationSummaries
    children["label-summary"] = &bfd.LabelSummary
    children["ipv4bf-do-mplste-head-session-briefs"] = &bfd.Ipv4BfDoMplsteHeadSessionBriefs
    children["ipv4bf-do-mplste-tail-session-details"] = &bfd.Ipv4BfDoMplsteTailSessionDetails
    children["ipv4-multi-hop-node-location-summaries"] = &bfd.Ipv4MultiHopNodeLocationSummaries
    children["ipv4bf-do-mplste-tail-session-briefs"] = &bfd.Ipv4BfDoMplsteTailSessionBriefs
    children["ipv6-multi-hop-node-location-summaries"] = &bfd.Ipv6MultiHopNodeLocationSummaries
    children["ipv4-multi-hop-summary"] = &bfd.Ipv4MultiHopSummary
    children["ipv4-single-hop-counters"] = &bfd.Ipv4SingleHopCounters
    children["ipv6-multi-hop-session-details"] = &bfd.Ipv6MultiHopSessionDetails
    children["ipv6-multi-hop-multi-paths"] = &bfd.Ipv6MultiHopMultiPaths
    children["ipv4bf-do-mplste-head-counters"] = &bfd.Ipv4BfDoMplsteHeadCounters
    children["session-mibs"] = &bfd.SessionMibs
    children["ipv6-multi-hop-summary"] = &bfd.Ipv6MultiHopSummary
    children["label-summary-nodes"] = &bfd.LabelSummaryNodes
    children["ipv6-multi-hop-session-briefs"] = &bfd.Ipv6MultiHopSessionBriefs
    children["session-briefs"] = &bfd.SessionBriefs
    children["ipv6-single-hop-node-location-summaries"] = &bfd.Ipv6SingleHopNodeLocationSummaries
    children["summary"] = &bfd.Summary
    children["ipv4bfd-mplste-tail-node-summaries"] = &bfd.Ipv4BfdMplsteTailNodeSummaries
    children["ipv4-single-hop-location-summaries"] = &bfd.Ipv4SingleHopLocationSummaries
    children["ipv4bfd-mplste-head-summary-nodes"] = &bfd.Ipv4BfdMplsteHeadSummaryNodes
    children["label-session-details"] = &bfd.LabelSessionDetails
    children["ipv6-single-hop-session-details"] = &bfd.Ipv6SingleHopSessionDetails
    children["ipv4-multi-hop-counters"] = &bfd.Ipv4MultiHopCounters
    children["session-details"] = &bfd.SessionDetails
    children["ipv4-single-hop-multi-paths"] = &bfd.Ipv4SingleHopMultiPaths
    children["ipv4-single-hop-session-briefs"] = &bfd.Ipv4SingleHopSessionBriefs
    children["ipv6-multi-hop-counters"] = &bfd.Ipv6MultiHopCounters
    children["ipv6-single-hop-location-summaries"] = &bfd.Ipv6SingleHopLocationSummaries
    children["label-counters"] = &bfd.LabelCounters
    children["ipv4bf-do-mplste-head-session-details"] = &bfd.Ipv4BfDoMplsteHeadSessionDetails
    children["relation-briefs"] = &bfd.RelationBriefs
    children["client-briefs"] = &bfd.ClientBriefs
    children["ipv4bf-do-mplste-head-multi-paths"] = &bfd.Ipv4BfDoMplsteHeadMultiPaths
    children["relation-details"] = &bfd.RelationDetails
    children["ipv4bf-do-mplste-tail-counters"] = &bfd.Ipv4BfDoMplsteTailCounters
    children["ipv6-single-hop-session-briefs"] = &bfd.Ipv6SingleHopSessionBriefs
    children["ipv4bf-do-mplste-tail-multi-paths"] = &bfd.Ipv4BfDoMplsteTailMultiPaths
    children["ipv4-multi-hop-multi-paths"] = &bfd.Ipv4MultiHopMultiPaths
    children["ipv4bf-do-mplste-head-summary"] = &bfd.Ipv4BfDoMplsteHeadSummary
    return children
}

func (bfd *Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfd *Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Bfd) GetYangName() string { return "bfd" }

func (bfd *Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Bfd) GetParentYangName() string { return "Cisco-IOS-XR-ip-bfd-oper" }

// Bfd_LabelSessionBriefs
// Table of brief information about all Label BFD
// sessions in the System
type Bfd_LabelSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single Label BFD session. The type is slice of
    // Bfd_LabelSessionBriefs_LabelSessionBrief.
    LabelSessionBrief []Bfd_LabelSessionBriefs_LabelSessionBrief
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetFilter() yfilter.YFilter { return labelSessionBriefs.YFilter }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) SetFilter(yf yfilter.YFilter) { labelSessionBriefs.YFilter = yf }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetGoName(yname string) string {
    if yname == "label-session-brief" { return "LabelSessionBrief" }
    return ""
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetSegmentPath() string {
    return "label-session-briefs"
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-session-brief" {
        for _, c := range labelSessionBriefs.LabelSessionBrief {
            if labelSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSessionBriefs_LabelSessionBrief{}
        labelSessionBriefs.LabelSessionBrief = append(labelSessionBriefs.LabelSessionBrief, child)
        return &labelSessionBriefs.LabelSessionBrief[len(labelSessionBriefs.LabelSessionBrief)-1]
    }
    return nil
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSessionBriefs.LabelSessionBrief {
        children[labelSessionBriefs.LabelSessionBrief[i].GetSegmentPath()] = &labelSessionBriefs.LabelSessionBrief[i]
    }
    return children
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetYangName() string { return "label-session-briefs" }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) SetParent(parent types.Entity) { labelSessionBriefs.parent = parent }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetParent() types.Entity { return labelSessionBriefs.parent }

func (labelSessionBriefs *Bfd_LabelSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_LabelSessionBriefs_LabelSessionBrief
// Brief information for a single Label BFD
// session
type Bfd_LabelSessionBriefs_LabelSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetFilter() yfilter.YFilter { return labelSessionBrief.YFilter }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) SetFilter(yf yfilter.YFilter) { labelSessionBrief.YFilter = yf }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetSegmentPath() string {
    return "label-session-brief"
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &labelSessionBrief.StatusBriefInformation
    }
    return nil
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &labelSessionBrief.StatusBriefInformation
    return children
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = labelSessionBrief.InterfaceName
    leafs["incoming-label"] = labelSessionBrief.IncomingLabel
    leafs["location"] = labelSessionBrief.Location
    leafs["node-id"] = labelSessionBrief.NodeId
    leafs["state"] = labelSessionBrief.State
    leafs["session-type"] = labelSessionBrief.SessionType
    leafs["session-subtype"] = labelSessionBrief.SessionSubtype
    leafs["session-flags"] = labelSessionBrief.SessionFlags
    return leafs
}

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetYangName() string { return "label-session-brief" }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) SetParent(parent types.Entity) { labelSessionBrief.parent = parent }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetParent() types.Entity { return labelSessionBrief.parent }

func (labelSessionBrief *Bfd_LabelSessionBriefs_LabelSessionBrief) GetParentYangName() string { return "label-session-briefs" }

// Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation) GetParentYangName() string { return "label-session-brief" }

// Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_LabelSessionBriefs_LabelSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailSummary
// Summary information of IPv4 BFD over MPLS-TE
// Tail
type Bfd_Ipv4BfDoMplsteTailSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4BfDoMplsteTailSummary_SessionState
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailSummary.YFilter }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailSummary.YFilter = yf }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-summary"
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4BfDoMplsteTailSummary.SessionState
    }
    return nil
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4BfDoMplsteTailSummary.SessionState
    return children
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetYangName() string { return "ipv4bf-do-mplste-tail-summary" }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) SetParent(parent types.Entity) { ipv4BfDoMplsteTailSummary.parent = parent }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetParent() types.Entity { return ipv4BfDoMplsteTailSummary.parent }

func (ipv4BfDoMplsteTailSummary *Bfd_Ipv4BfDoMplsteTailSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteTailSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4BfDoMplsteTailSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4BfDoMplsteTailSummary_SessionState) GetParentYangName() string { return "ipv4bf-do-mplste-tail-summary" }

// Bfd_Ipv6SingleHopCounters
// IPv6 single hop Counters
type Bfd_Ipv6SingleHopCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv6 single hop Packet counters.
    Ipv6SingleHopPacketCounters Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetFilter() yfilter.YFilter { return ipv6SingleHopCounters.YFilter }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) SetFilter(yf yfilter.YFilter) { ipv6SingleHopCounters.YFilter = yf }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-packet-counters" { return "Ipv6SingleHopPacketCounters" }
    return ""
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetSegmentPath() string {
    return "ipv6-single-hop-counters"
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-packet-counters" {
        return &ipv6SingleHopCounters.Ipv6SingleHopPacketCounters
    }
    return nil
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv6-single-hop-packet-counters"] = &ipv6SingleHopCounters.Ipv6SingleHopPacketCounters
    return children
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetYangName() string { return "ipv6-single-hop-counters" }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) SetParent(parent types.Entity) { ipv6SingleHopCounters.parent = parent }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetParent() types.Entity { return ipv6SingleHopCounters.parent }

func (ipv6SingleHopCounters *Bfd_Ipv6SingleHopCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters
// Table of IPv6 single hop Packet counters
type Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface IPv6 single hop Packet counters. The type is slice of
    // Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter.
    Ipv6SingleHopPacketCounter []Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetFilter() yfilter.YFilter { return ipv6SingleHopPacketCounters.YFilter }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) SetFilter(yf yfilter.YFilter) { ipv6SingleHopPacketCounters.YFilter = yf }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-packet-counter" { return "Ipv6SingleHopPacketCounter" }
    return ""
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetSegmentPath() string {
    return "ipv6-single-hop-packet-counters"
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-packet-counter" {
        for _, c := range ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter {
            if ipv6SingleHopPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter{}
        ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter = append(ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter, child)
        return &ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter[len(ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter)-1]
    }
    return nil
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter {
        children[ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter[i].GetSegmentPath()] = &ipv6SingleHopPacketCounters.Ipv6SingleHopPacketCounter[i]
    }
    return children
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetYangName() string { return "ipv6-single-hop-packet-counters" }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) SetParent(parent types.Entity) { ipv6SingleHopPacketCounters.parent = parent }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetParent() types.Entity { return ipv6SingleHopPacketCounters.parent }

func (ipv6SingleHopPacketCounters *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters) GetParentYangName() string { return "ipv6-single-hop-counters" }

// Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter
// Interface IPv6 single hop Packet counters
type Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetFilter() yfilter.YFilter { return ipv6SingleHopPacketCounter.YFilter }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) SetFilter(yf yfilter.YFilter) { ipv6SingleHopPacketCounter.YFilter = yf }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetSegmentPath() string {
    return "ipv6-single-hop-packet-counter" + "[interface-name='" + fmt.Sprintf("%v", ipv6SingleHopPacketCounter.InterfaceName) + "']"
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv6SingleHopPacketCounter.InterfaceName
    leafs["hello-transmit-count"] = ipv6SingleHopPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv6SingleHopPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv6SingleHopPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv6SingleHopPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv6SingleHopPacketCounter.DisplayType
    return leafs
}

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetYangName() string { return "ipv6-single-hop-packet-counter" }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) SetParent(parent types.Entity) { ipv6SingleHopPacketCounter.parent = parent }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetParent() types.Entity { return ipv6SingleHopPacketCounter.parent }

func (ipv6SingleHopPacketCounter *Bfd_Ipv6SingleHopCounters_Ipv6SingleHopPacketCounters_Ipv6SingleHopPacketCounter) GetParentYangName() string { return "ipv6-single-hop-packet-counters" }

// Bfd_Counters
// Counters
type Bfd_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of Packet counters.
    PacketCounters Bfd_Counters_PacketCounters
}

func (counters *Bfd_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *Bfd_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *Bfd_Counters) GetGoName(yname string) string {
    if yname == "packet-counters" { return "PacketCounters" }
    return ""
}

func (counters *Bfd_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *Bfd_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "packet-counters" {
        return &counters.PacketCounters
    }
    return nil
}

func (counters *Bfd_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["packet-counters"] = &counters.PacketCounters
    return children
}

func (counters *Bfd_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (counters *Bfd_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *Bfd_Counters) GetYangName() string { return "counters" }

func (counters *Bfd_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *Bfd_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *Bfd_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *Bfd_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *Bfd_Counters) GetParent() types.Entity { return counters.parent }

func (counters *Bfd_Counters) GetParentYangName() string { return "bfd" }

// Bfd_Counters_PacketCounters
// Table of Packet counters
type Bfd_Counters_PacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Packet counters. The type is slice of
    // Bfd_Counters_PacketCounters_PacketCounter.
    PacketCounter []Bfd_Counters_PacketCounters_PacketCounter
}

func (packetCounters *Bfd_Counters_PacketCounters) GetFilter() yfilter.YFilter { return packetCounters.YFilter }

func (packetCounters *Bfd_Counters_PacketCounters) SetFilter(yf yfilter.YFilter) { packetCounters.YFilter = yf }

func (packetCounters *Bfd_Counters_PacketCounters) GetGoName(yname string) string {
    if yname == "packet-counter" { return "PacketCounter" }
    return ""
}

func (packetCounters *Bfd_Counters_PacketCounters) GetSegmentPath() string {
    return "packet-counters"
}

func (packetCounters *Bfd_Counters_PacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "packet-counter" {
        for _, c := range packetCounters.PacketCounter {
            if packetCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Counters_PacketCounters_PacketCounter{}
        packetCounters.PacketCounter = append(packetCounters.PacketCounter, child)
        return &packetCounters.PacketCounter[len(packetCounters.PacketCounter)-1]
    }
    return nil
}

func (packetCounters *Bfd_Counters_PacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range packetCounters.PacketCounter {
        children[packetCounters.PacketCounter[i].GetSegmentPath()] = &packetCounters.PacketCounter[i]
    }
    return children
}

func (packetCounters *Bfd_Counters_PacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (packetCounters *Bfd_Counters_PacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (packetCounters *Bfd_Counters_PacketCounters) GetYangName() string { return "packet-counters" }

func (packetCounters *Bfd_Counters_PacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (packetCounters *Bfd_Counters_PacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (packetCounters *Bfd_Counters_PacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (packetCounters *Bfd_Counters_PacketCounters) SetParent(parent types.Entity) { packetCounters.parent = parent }

func (packetCounters *Bfd_Counters_PacketCounters) GetParent() types.Entity { return packetCounters.parent }

func (packetCounters *Bfd_Counters_PacketCounters) GetParentYangName() string { return "counters" }

// Bfd_Counters_PacketCounters_PacketCounter
// Interface Packet counters
type Bfd_Counters_PacketCounters_PacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetFilter() yfilter.YFilter { return packetCounter.YFilter }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) SetFilter(yf yfilter.YFilter) { packetCounter.YFilter = yf }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetSegmentPath() string {
    return "packet-counter" + "[interface-name='" + fmt.Sprintf("%v", packetCounter.InterfaceName) + "']"
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = packetCounter.InterfaceName
    leafs["hello-transmit-count"] = packetCounter.HelloTransmitCount
    leafs["hello-receive-count"] = packetCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = packetCounter.EchoTransmitCount
    leafs["echo-receive-count"] = packetCounter.EchoReceiveCount
    leafs["display-type"] = packetCounter.DisplayType
    return leafs
}

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetYangName() string { return "packet-counter" }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) SetParent(parent types.Entity) { packetCounter.parent = parent }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetParent() types.Entity { return packetCounter.parent }

func (packetCounter *Bfd_Counters_PacketCounters_PacketCounter) GetParentYangName() string { return "packet-counters" }

// Bfd_ClientDetails
// Table of detailed information about BFD clients
type Bfd_ClientDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information of client. The type is slice of
    // Bfd_ClientDetails_ClientDetail.
    ClientDetail []Bfd_ClientDetails_ClientDetail
}

func (clientDetails *Bfd_ClientDetails) GetFilter() yfilter.YFilter { return clientDetails.YFilter }

func (clientDetails *Bfd_ClientDetails) SetFilter(yf yfilter.YFilter) { clientDetails.YFilter = yf }

func (clientDetails *Bfd_ClientDetails) GetGoName(yname string) string {
    if yname == "client-detail" { return "ClientDetail" }
    return ""
}

func (clientDetails *Bfd_ClientDetails) GetSegmentPath() string {
    return "client-details"
}

func (clientDetails *Bfd_ClientDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client-detail" {
        for _, c := range clientDetails.ClientDetail {
            if clientDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_ClientDetails_ClientDetail{}
        clientDetails.ClientDetail = append(clientDetails.ClientDetail, child)
        return &clientDetails.ClientDetail[len(clientDetails.ClientDetail)-1]
    }
    return nil
}

func (clientDetails *Bfd_ClientDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clientDetails.ClientDetail {
        children[clientDetails.ClientDetail[i].GetSegmentPath()] = &clientDetails.ClientDetail[i]
    }
    return children
}

func (clientDetails *Bfd_ClientDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clientDetails *Bfd_ClientDetails) GetBundleName() string { return "cisco_ios_xr" }

func (clientDetails *Bfd_ClientDetails) GetYangName() string { return "client-details" }

func (clientDetails *Bfd_ClientDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientDetails *Bfd_ClientDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientDetails *Bfd_ClientDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientDetails *Bfd_ClientDetails) SetParent(parent types.Entity) { clientDetails.parent = parent }

func (clientDetails *Bfd_ClientDetails) GetParent() types.Entity { return clientDetails.parent }

func (clientDetails *Bfd_ClientDetails) GetParentYangName() string { return "bfd" }

// Bfd_ClientDetails_ClientDetail
// Detailed information of client
type Bfd_ClientDetails_ClientDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Client Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ClientName interface{}

    // Recreate Time in Seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    RecreateTime interface{}

    // Brief client information.
    Brief Bfd_ClientDetails_ClientDetail_Brief

    // The BFD Client Flags.
    Flags Bfd_ClientDetails_ClientDetail_Flags
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetFilter() yfilter.YFilter { return clientDetail.YFilter }

func (clientDetail *Bfd_ClientDetails_ClientDetail) SetFilter(yf yfilter.YFilter) { clientDetail.YFilter = yf }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetGoName(yname string) string {
    if yname == "client-name" { return "ClientName" }
    if yname == "recreate-time" { return "RecreateTime" }
    if yname == "brief" { return "Brief" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetSegmentPath() string {
    return "client-detail" + "[client-name='" + fmt.Sprintf("%v", clientDetail.ClientName) + "']"
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "brief" {
        return &clientDetail.Brief
    }
    if childYangName == "flags" {
        return &clientDetail.Flags
    }
    return nil
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["brief"] = &clientDetail.Brief
    children["flags"] = &clientDetail.Flags
    return children
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["client-name"] = clientDetail.ClientName
    leafs["recreate-time"] = clientDetail.RecreateTime
    return leafs
}

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetBundleName() string { return "cisco_ios_xr" }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetYangName() string { return "client-detail" }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientDetail *Bfd_ClientDetails_ClientDetail) SetParent(parent types.Entity) { clientDetail.parent = parent }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetParent() types.Entity { return clientDetail.parent }

func (clientDetail *Bfd_ClientDetails_ClientDetail) GetParentYangName() string { return "client-details" }

// Bfd_ClientDetails_ClientDetail_Brief
// Brief client information
type Bfd_ClientDetails_ClientDetail_Brief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client process name. The type is string with length: 0..257.
    NameXr interface{}

    // Location where client resides. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Number of sessions created by this client. The type is interface{} with
    // range: 0..4294967295.
    SessionCount interface{}
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetFilter() yfilter.YFilter { return brief.YFilter }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) SetFilter(yf yfilter.YFilter) { brief.YFilter = yf }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetGoName(yname string) string {
    if yname == "name-xr" { return "NameXr" }
    if yname == "node-id" { return "NodeId" }
    if yname == "session-count" { return "SessionCount" }
    return ""
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetSegmentPath() string {
    return "brief"
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name-xr"] = brief.NameXr
    leafs["node-id"] = brief.NodeId
    leafs["session-count"] = brief.SessionCount
    return leafs
}

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetBundleName() string { return "cisco_ios_xr" }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetYangName() string { return "brief" }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) SetParent(parent types.Entity) { brief.parent = parent }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetParent() types.Entity { return brief.parent }

func (brief *Bfd_ClientDetails_ClientDetail_Brief) GetParentYangName() string { return "client-detail" }

// Bfd_ClientDetails_ClientDetail_Flags
// The BFD Client Flags
type Bfd_ClientDetails_ClientDetail_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client is in Zombie State. The type is interface{} with range:
    // -2147483648..2147483647.
    IsZombieState interface{}

    // Client is in Recreate State. The type is interface{} with range:
    // -2147483648..2147483647.
    IsRecreateState interface{}
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetGoName(yname string) string {
    if yname == "is-zombie-state" { return "IsZombieState" }
    if yname == "is-recreate-state" { return "IsRecreateState" }
    return ""
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-zombie-state"] = flags.IsZombieState
    leafs["is-recreate-state"] = flags.IsRecreateState
    return leafs
}

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetYangName() string { return "flags" }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Bfd_ClientDetails_ClientDetail_Flags) GetParentYangName() string { return "client-detail" }

// Bfd_Ipv4SingleHopSummary
// Summary information of BFD IPv4 singlehop
// sessions
type Bfd_Ipv4SingleHopSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4SingleHopSummary_SessionState
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetFilter() yfilter.YFilter { return ipv4SingleHopSummary.YFilter }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) SetFilter(yf yfilter.YFilter) { ipv4SingleHopSummary.YFilter = yf }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetSegmentPath() string {
    return "ipv4-single-hop-summary"
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4SingleHopSummary.SessionState
    }
    return nil
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4SingleHopSummary.SessionState
    return children
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetYangName() string { return "ipv4-single-hop-summary" }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) SetParent(parent types.Entity) { ipv4SingleHopSummary.parent = parent }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetParent() types.Entity { return ipv4SingleHopSummary.parent }

func (ipv4SingleHopSummary *Bfd_Ipv4SingleHopSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4SingleHopSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4SingleHopSummary_SessionState) GetParentYangName() string { return "ipv4-single-hop-summary" }

// Bfd_Ipv6SingleHopSummary
// Summary information of BFD IPv6 singlehop
// sessions
type Bfd_Ipv6SingleHopSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv6SingleHopSummary_SessionState
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetFilter() yfilter.YFilter { return ipv6SingleHopSummary.YFilter }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) SetFilter(yf yfilter.YFilter) { ipv6SingleHopSummary.YFilter = yf }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetSegmentPath() string {
    return "ipv6-single-hop-summary"
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv6SingleHopSummary.SessionState
    }
    return nil
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv6SingleHopSummary.SessionState
    return children
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetYangName() string { return "ipv6-single-hop-summary" }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) SetParent(parent types.Entity) { ipv6SingleHopSummary.parent = parent }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetParent() types.Entity { return ipv6SingleHopSummary.parent }

func (ipv6SingleHopSummary *Bfd_Ipv6SingleHopSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv6SingleHopSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv6SingleHopSummary_SessionState) GetParentYangName() string { return "ipv6-single-hop-summary" }

// Bfd_LabelMultiPaths
// Label multipath
type Bfd_LabelMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label multipath table. The type is slice of
    // Bfd_LabelMultiPaths_LabelMultiPath.
    LabelMultiPath []Bfd_LabelMultiPaths_LabelMultiPath
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetFilter() yfilter.YFilter { return labelMultiPaths.YFilter }

func (labelMultiPaths *Bfd_LabelMultiPaths) SetFilter(yf yfilter.YFilter) { labelMultiPaths.YFilter = yf }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetGoName(yname string) string {
    if yname == "label-multi-path" { return "LabelMultiPath" }
    return ""
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetSegmentPath() string {
    return "label-multi-paths"
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-multi-path" {
        for _, c := range labelMultiPaths.LabelMultiPath {
            if labelMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelMultiPaths_LabelMultiPath{}
        labelMultiPaths.LabelMultiPath = append(labelMultiPaths.LabelMultiPath, child)
        return &labelMultiPaths.LabelMultiPath[len(labelMultiPaths.LabelMultiPath)-1]
    }
    return nil
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelMultiPaths.LabelMultiPath {
        children[labelMultiPaths.LabelMultiPath[i].GetSegmentPath()] = &labelMultiPaths.LabelMultiPath[i]
    }
    return children
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelMultiPaths *Bfd_LabelMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetYangName() string { return "label-multi-paths" }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelMultiPaths *Bfd_LabelMultiPaths) SetParent(parent types.Entity) { labelMultiPaths.parent = parent }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetParent() types.Entity { return labelMultiPaths.parent }

func (labelMultiPaths *Bfd_LabelMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_LabelMultiPaths_LabelMultiPath
// Label multipath table
type Bfd_LabelMultiPaths_LabelMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetFilter() yfilter.YFilter { return labelMultiPath.YFilter }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) SetFilter(yf yfilter.YFilter) { labelMultiPath.YFilter = yf }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "location" { return "Location" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetSegmentPath() string {
    return "label-multi-path"
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = labelMultiPath.InterfaceName
    leafs["incoming-label"] = labelMultiPath.IncomingLabel
    leafs["location"] = labelMultiPath.Location
    leafs["session-subtype"] = labelMultiPath.SessionSubtype
    leafs["state"] = labelMultiPath.State
    leafs["local-discriminator"] = labelMultiPath.LocalDiscriminator
    leafs["node-id"] = labelMultiPath.NodeId
    leafs["incoming-label-xr"] = labelMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = labelMultiPath.SessionInterfaceName
    return leafs
}

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetYangName() string { return "label-multi-path" }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) SetParent(parent types.Entity) { labelMultiPath.parent = parent }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetParent() types.Entity { return labelMultiPath.parent }

func (labelMultiPath *Bfd_LabelMultiPaths_LabelMultiPath) GetParentYangName() string { return "label-multi-paths" }

// Bfd_Ipv4MultiHopSessionDetails
// Table of detailed information about all IPv4
// multihop BFD sessions in the System 
type Bfd_Ipv4MultiHopSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv4 multihop BFD session. The type is
    // slice of Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail.
    Ipv4MultiHopSessionDetail []Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetFilter() yfilter.YFilter { return ipv4MultiHopSessionDetails.YFilter }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) SetFilter(yf yfilter.YFilter) { ipv4MultiHopSessionDetails.YFilter = yf }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-session-detail" { return "Ipv4MultiHopSessionDetail" }
    return ""
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetSegmentPath() string {
    return "ipv4-multi-hop-session-details"
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-session-detail" {
        for _, c := range ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail {
            if ipv4MultiHopSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail{}
        ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail = append(ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail, child)
        return &ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail[len(ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail)-1]
    }
    return nil
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail {
        children[ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail[i].GetSegmentPath()] = &ipv4MultiHopSessionDetails.Ipv4MultiHopSessionDetail[i]
    }
    return children
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetYangName() string { return "ipv4-multi-hop-session-details" }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) SetParent(parent types.Entity) { ipv4MultiHopSessionDetails.parent = parent }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetParent() types.Entity { return ipv4MultiHopSessionDetails.parent }

func (ipv4MultiHopSessionDetails *Bfd_Ipv4MultiHopSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail
// Detailed information for a single IPv4 multihop
// BFD session
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Session status information.
    StatusInformation Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetFilter() yfilter.YFilter { return ipv4MultiHopSessionDetail.YFilter }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) SetFilter(yf yfilter.YFilter) { ipv4MultiHopSessionDetail.YFilter = yf }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetSegmentPath() string {
    return "ipv4-multi-hop-session-detail"
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv4MultiHopSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv4MultiHopSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv4MultiHopSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv4MultiHopSessionDetail.OwnerInformation {
            if ipv4MultiHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation{}
        ipv4MultiHopSessionDetail.OwnerInformation = append(ipv4MultiHopSessionDetail.OwnerInformation, child)
        return &ipv4MultiHopSessionDetail.OwnerInformation[len(ipv4MultiHopSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv4MultiHopSessionDetail.AssociationInformation {
            if ipv4MultiHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation{}
        ipv4MultiHopSessionDetail.AssociationInformation = append(ipv4MultiHopSessionDetail.AssociationInformation, child)
        return &ipv4MultiHopSessionDetail.AssociationInformation[len(ipv4MultiHopSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv4MultiHopSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv4MultiHopSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv4MultiHopSessionDetail.LspPingInfo
    for i := range ipv4MultiHopSessionDetail.OwnerInformation {
        children[ipv4MultiHopSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv4MultiHopSessionDetail.OwnerInformation[i]
    }
    for i := range ipv4MultiHopSessionDetail.AssociationInformation {
        children[ipv4MultiHopSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv4MultiHopSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv4MultiHopSessionDetail.SourceAddress
    leafs["destination-address"] = ipv4MultiHopSessionDetail.DestinationAddress
    leafs["location"] = ipv4MultiHopSessionDetail.Location
    leafs["vrf-name"] = ipv4MultiHopSessionDetail.VrfName
    return leafs
}

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetYangName() string { return "ipv4-multi-hop-session-detail" }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) SetParent(parent types.Entity) { ipv4MultiHopSessionDetail.parent = parent }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetParent() types.Entity { return ipv4MultiHopSessionDetail.parent }

func (ipv4MultiHopSessionDetail *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail) GetParentYangName() string { return "ipv4-multi-hop-session-details" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation) GetParentYangName() string { return "ipv4-multi-hop-session-detail" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv4-multi-hop-session-detail" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv4-multi-hop-session-detail" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv4-multi-hop-session-detail" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv4-multi-hop-session-detail" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4MultiHopSessionDetails_Ipv4MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4SingleHopSessionDetails
// Table of detailed information about all IPv4
// singlehop BFD sessions in the System 
type Bfd_Ipv4SingleHopSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv4 singlehop BFD session. The type is
    // slice of Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail.
    Ipv4SingleHopSessionDetail []Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetFilter() yfilter.YFilter { return ipv4SingleHopSessionDetails.YFilter }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) SetFilter(yf yfilter.YFilter) { ipv4SingleHopSessionDetails.YFilter = yf }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-session-detail" { return "Ipv4SingleHopSessionDetail" }
    return ""
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetSegmentPath() string {
    return "ipv4-single-hop-session-details"
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-session-detail" {
        for _, c := range ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail {
            if ipv4SingleHopSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail{}
        ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail = append(ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail, child)
        return &ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail[len(ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail)-1]
    }
    return nil
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail {
        children[ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail[i].GetSegmentPath()] = &ipv4SingleHopSessionDetails.Ipv4SingleHopSessionDetail[i]
    }
    return children
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetYangName() string { return "ipv4-single-hop-session-details" }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) SetParent(parent types.Entity) { ipv4SingleHopSessionDetails.parent = parent }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetParent() types.Entity { return ipv4SingleHopSessionDetails.parent }

func (ipv4SingleHopSessionDetails *Bfd_Ipv4SingleHopSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail
// Detailed information for a single IPv4
// singlehop BFD session
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetFilter() yfilter.YFilter { return ipv4SingleHopSessionDetail.YFilter }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) SetFilter(yf yfilter.YFilter) { ipv4SingleHopSessionDetail.YFilter = yf }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetSegmentPath() string {
    return "ipv4-single-hop-session-detail"
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv4SingleHopSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv4SingleHopSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv4SingleHopSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv4SingleHopSessionDetail.OwnerInformation {
            if ipv4SingleHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation{}
        ipv4SingleHopSessionDetail.OwnerInformation = append(ipv4SingleHopSessionDetail.OwnerInformation, child)
        return &ipv4SingleHopSessionDetail.OwnerInformation[len(ipv4SingleHopSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv4SingleHopSessionDetail.AssociationInformation {
            if ipv4SingleHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation{}
        ipv4SingleHopSessionDetail.AssociationInformation = append(ipv4SingleHopSessionDetail.AssociationInformation, child)
        return &ipv4SingleHopSessionDetail.AssociationInformation[len(ipv4SingleHopSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv4SingleHopSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv4SingleHopSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv4SingleHopSessionDetail.LspPingInfo
    for i := range ipv4SingleHopSessionDetail.OwnerInformation {
        children[ipv4SingleHopSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv4SingleHopSessionDetail.OwnerInformation[i]
    }
    for i := range ipv4SingleHopSessionDetail.AssociationInformation {
        children[ipv4SingleHopSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv4SingleHopSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4SingleHopSessionDetail.InterfaceName
    leafs["destination-address"] = ipv4SingleHopSessionDetail.DestinationAddress
    leafs["location"] = ipv4SingleHopSessionDetail.Location
    return leafs
}

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetYangName() string { return "ipv4-single-hop-session-detail" }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) SetParent(parent types.Entity) { ipv4SingleHopSessionDetail.parent = parent }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetParent() types.Entity { return ipv4SingleHopSessionDetail.parent }

func (ipv4SingleHopSessionDetail *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail) GetParentYangName() string { return "ipv4-single-hop-session-details" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation) GetParentYangName() string { return "ipv4-single-hop-session-detail" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv4-single-hop-session-detail" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv4-single-hop-session-detail" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv4-single-hop-session-detail" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv4-single-hop-session-detail" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4SingleHopSessionDetails_Ipv4SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4MultiHopSessionBriefs
// Table of brief information about all IPv4
// multihop BFD sessions in the System
type Bfd_Ipv4MultiHopSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv4 multihop BFD session. The type is slice
    // of Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief.
    Ipv4MultiHopSessionBrief []Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetFilter() yfilter.YFilter { return ipv4MultiHopSessionBriefs.YFilter }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv4MultiHopSessionBriefs.YFilter = yf }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-session-brief" { return "Ipv4MultiHopSessionBrief" }
    return ""
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetSegmentPath() string {
    return "ipv4-multi-hop-session-briefs"
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-session-brief" {
        for _, c := range ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief {
            if ipv4MultiHopSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief{}
        ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief = append(ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief, child)
        return &ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief[len(ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief)-1]
    }
    return nil
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief {
        children[ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief[i].GetSegmentPath()] = &ipv4MultiHopSessionBriefs.Ipv4MultiHopSessionBrief[i]
    }
    return children
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetYangName() string { return "ipv4-multi-hop-session-briefs" }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) SetParent(parent types.Entity) { ipv4MultiHopSessionBriefs.parent = parent }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetParent() types.Entity { return ipv4MultiHopSessionBriefs.parent }

func (ipv4MultiHopSessionBriefs *Bfd_Ipv4MultiHopSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief
// Brief information for a single IPv4 multihop
// BFD session
type Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetFilter() yfilter.YFilter { return ipv4MultiHopSessionBrief.YFilter }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) SetFilter(yf yfilter.YFilter) { ipv4MultiHopSessionBrief.YFilter = yf }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetSegmentPath() string {
    return "ipv4-multi-hop-session-brief"
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv4MultiHopSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv4MultiHopSessionBrief.StatusBriefInformation
    return children
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv4MultiHopSessionBrief.SourceAddress
    leafs["destination-address"] = ipv4MultiHopSessionBrief.DestinationAddress
    leafs["location"] = ipv4MultiHopSessionBrief.Location
    leafs["vrf-name"] = ipv4MultiHopSessionBrief.VrfName
    leafs["node-id"] = ipv4MultiHopSessionBrief.NodeId
    leafs["state"] = ipv4MultiHopSessionBrief.State
    leafs["session-type"] = ipv4MultiHopSessionBrief.SessionType
    leafs["session-subtype"] = ipv4MultiHopSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv4MultiHopSessionBrief.SessionFlags
    return leafs
}

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetYangName() string { return "ipv4-multi-hop-session-brief" }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) SetParent(parent types.Entity) { ipv4MultiHopSessionBrief.parent = parent }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetParent() types.Entity { return ipv4MultiHopSessionBrief.parent }

func (ipv4MultiHopSessionBrief *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief) GetParentYangName() string { return "ipv4-multi-hop-session-briefs" }

// Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv4-multi-hop-session-brief" }

// Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4MultiHopSessionBriefs_Ipv4MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_GenericSummaries
// Generic summary information about BFD location
type Bfd_GenericSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic summary information for bfd location table. The type is slice of
    // Bfd_GenericSummaries_GenericSummary.
    GenericSummary []Bfd_GenericSummaries_GenericSummary
}

func (genericSummaries *Bfd_GenericSummaries) GetFilter() yfilter.YFilter { return genericSummaries.YFilter }

func (genericSummaries *Bfd_GenericSummaries) SetFilter(yf yfilter.YFilter) { genericSummaries.YFilter = yf }

func (genericSummaries *Bfd_GenericSummaries) GetGoName(yname string) string {
    if yname == "generic-summary" { return "GenericSummary" }
    return ""
}

func (genericSummaries *Bfd_GenericSummaries) GetSegmentPath() string {
    return "generic-summaries"
}

func (genericSummaries *Bfd_GenericSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-summary" {
        for _, c := range genericSummaries.GenericSummary {
            if genericSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_GenericSummaries_GenericSummary{}
        genericSummaries.GenericSummary = append(genericSummaries.GenericSummary, child)
        return &genericSummaries.GenericSummary[len(genericSummaries.GenericSummary)-1]
    }
    return nil
}

func (genericSummaries *Bfd_GenericSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range genericSummaries.GenericSummary {
        children[genericSummaries.GenericSummary[i].GetSegmentPath()] = &genericSummaries.GenericSummary[i]
    }
    return children
}

func (genericSummaries *Bfd_GenericSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (genericSummaries *Bfd_GenericSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (genericSummaries *Bfd_GenericSummaries) GetYangName() string { return "generic-summaries" }

func (genericSummaries *Bfd_GenericSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericSummaries *Bfd_GenericSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericSummaries *Bfd_GenericSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericSummaries *Bfd_GenericSummaries) SetParent(parent types.Entity) { genericSummaries.parent = parent }

func (genericSummaries *Bfd_GenericSummaries) GetParent() types.Entity { return genericSummaries.parent }

func (genericSummaries *Bfd_GenericSummaries) GetParentYangName() string { return "bfd" }

// Bfd_GenericSummaries_GenericSummary
// Generic summary information for bfd location
// table
type Bfd_GenericSummaries_GenericSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Allocated PPS value. The type is interface{} with range: 0..4294967295.
    PpsAllocatedValue interface{}

    // Allocated MP PPS value. The type is interface{} with range: 0..4294967295.
    PpsmpAllocatedValue interface{}

    // Max PPS value. The type is interface{} with range: 0..4294967295.
    PpsMaxValue interface{}

    // Max MP PPS value. The type is interface{} with range: 0..4294967295.
    PpsmpMaxValue interface{}

    // Total Session Number. The type is interface{} with range: 0..4294967295.
    TotalSessionNumber interface{}

    // MP Session Number. The type is interface{} with range: 0..4294967295.
    MpSessionNumber interface{}

    // Max Session Number. The type is interface{} with range: 0..4294967295.
    MaxSessionNumber interface{}

    // All PPS percentage. The type is interface{} with range: 0..4294967295.
    // Units are percentage.
    PpsAllPercentage interface{}

    // MP PPS percentage. The type is interface{} with range: 0..4294967295. Units
    // are percentage.
    PpsmpPercentage interface{}
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetFilter() yfilter.YFilter { return genericSummary.YFilter }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) SetFilter(yf yfilter.YFilter) { genericSummary.YFilter = yf }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetGoName(yname string) string {
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "pps-allocated-value" { return "PpsAllocatedValue" }
    if yname == "ppsmp-allocated-value" { return "PpsmpAllocatedValue" }
    if yname == "pps-max-value" { return "PpsMaxValue" }
    if yname == "ppsmp-max-value" { return "PpsmpMaxValue" }
    if yname == "total-session-number" { return "TotalSessionNumber" }
    if yname == "mp-session-number" { return "MpSessionNumber" }
    if yname == "max-session-number" { return "MaxSessionNumber" }
    if yname == "pps-all-percentage" { return "PpsAllPercentage" }
    if yname == "ppsmp-percentage" { return "PpsmpPercentage" }
    return ""
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetSegmentPath() string {
    return "generic-summary" + "[location='" + fmt.Sprintf("%v", genericSummary.Location) + "']"
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location"] = genericSummary.Location
    leafs["node-id"] = genericSummary.NodeId
    leafs["pps-allocated-value"] = genericSummary.PpsAllocatedValue
    leafs["ppsmp-allocated-value"] = genericSummary.PpsmpAllocatedValue
    leafs["pps-max-value"] = genericSummary.PpsMaxValue
    leafs["ppsmp-max-value"] = genericSummary.PpsmpMaxValue
    leafs["total-session-number"] = genericSummary.TotalSessionNumber
    leafs["mp-session-number"] = genericSummary.MpSessionNumber
    leafs["max-session-number"] = genericSummary.MaxSessionNumber
    leafs["pps-all-percentage"] = genericSummary.PpsAllPercentage
    leafs["ppsmp-percentage"] = genericSummary.PpsmpPercentage
    return leafs
}

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetBundleName() string { return "cisco_ios_xr" }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetYangName() string { return "generic-summary" }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) SetParent(parent types.Entity) { genericSummary.parent = parent }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetParent() types.Entity { return genericSummary.parent }

func (genericSummary *Bfd_GenericSummaries_GenericSummary) GetParentYangName() string { return "generic-summaries" }

// Bfd_Ipv6SingleHopMultiPaths
// IPv6 single hop multipath
type Bfd_Ipv6SingleHopMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 single hop multipath table. The type is slice of
    // Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath.
    Ipv6SingleHopMultiPath []Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetFilter() yfilter.YFilter { return ipv6SingleHopMultiPaths.YFilter }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) SetFilter(yf yfilter.YFilter) { ipv6SingleHopMultiPaths.YFilter = yf }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-multi-path" { return "Ipv6SingleHopMultiPath" }
    return ""
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetSegmentPath() string {
    return "ipv6-single-hop-multi-paths"
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-multi-path" {
        for _, c := range ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath {
            if ipv6SingleHopMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath{}
        ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath = append(ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath, child)
        return &ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath[len(ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath)-1]
    }
    return nil
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath {
        children[ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath[i].GetSegmentPath()] = &ipv6SingleHopMultiPaths.Ipv6SingleHopMultiPath[i]
    }
    return children
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetYangName() string { return "ipv6-single-hop-multi-paths" }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) SetParent(parent types.Entity) { ipv6SingleHopMultiPaths.parent = parent }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetParent() types.Entity { return ipv6SingleHopMultiPaths.parent }

func (ipv6SingleHopMultiPaths *Bfd_Ipv6SingleHopMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath
// IPv6 single hop multipath table
type Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetFilter() yfilter.YFilter { return ipv6SingleHopMultiPath.YFilter }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) SetFilter(yf yfilter.YFilter) { ipv6SingleHopMultiPath.YFilter = yf }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetSegmentPath() string {
    return "ipv6-single-hop-multi-path"
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv6SingleHopMultiPath.InterfaceName
    leafs["destination-address"] = ipv6SingleHopMultiPath.DestinationAddress
    leafs["location"] = ipv6SingleHopMultiPath.Location
    leafs["session-subtype"] = ipv6SingleHopMultiPath.SessionSubtype
    leafs["state"] = ipv6SingleHopMultiPath.State
    leafs["local-discriminator"] = ipv6SingleHopMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv6SingleHopMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv6SingleHopMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv6SingleHopMultiPath.SessionInterfaceName
    return leafs
}

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetYangName() string { return "ipv6-single-hop-multi-path" }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) SetParent(parent types.Entity) { ipv6SingleHopMultiPath.parent = parent }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetParent() types.Entity { return ipv6SingleHopMultiPath.parent }

func (ipv6SingleHopMultiPath *Bfd_Ipv6SingleHopMultiPaths_Ipv6SingleHopMultiPath) GetParentYangName() string { return "ipv6-single-hop-multi-paths" }

// Bfd_Ipv4SingleHopNodeLocationSummaries
// Table of summary information about BFD IPv4
// singlehop sessions per location
type Bfd_Ipv4SingleHopNodeLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv4 singlehop sessions for location. The type
    // is slice of
    // Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary.
    Ipv4SingleHopNodeLocationSummary []Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetFilter() yfilter.YFilter { return ipv4SingleHopNodeLocationSummaries.YFilter }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv4SingleHopNodeLocationSummaries.YFilter = yf }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-node-location-summary" { return "Ipv4SingleHopNodeLocationSummary" }
    return ""
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetSegmentPath() string {
    return "ipv4-single-hop-node-location-summaries"
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-node-location-summary" {
        for _, c := range ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary {
            if ipv4SingleHopNodeLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary{}
        ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary = append(ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary, child)
        return &ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary[len(ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary)-1]
    }
    return nil
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary {
        children[ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary[i].GetSegmentPath()] = &ipv4SingleHopNodeLocationSummaries.Ipv4SingleHopNodeLocationSummary[i]
    }
    return children
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetYangName() string { return "ipv4-single-hop-node-location-summaries" }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) SetParent(parent types.Entity) { ipv4SingleHopNodeLocationSummaries.parent = parent }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetParent() types.Entity { return ipv4SingleHopNodeLocationSummaries.parent }

func (ipv4SingleHopNodeLocationSummaries *Bfd_Ipv4SingleHopNodeLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary
// Summary information for BFD IPv4 singlehop
// sessions for location
type Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetFilter() yfilter.YFilter { return ipv4SingleHopNodeLocationSummary.YFilter }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) SetFilter(yf yfilter.YFilter) { ipv4SingleHopNodeLocationSummary.YFilter = yf }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetGoName(yname string) string {
    if yname == "location" { return "Location" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetSegmentPath() string {
    return "ipv4-single-hop-node-location-summary" + "[location='" + fmt.Sprintf("%v", ipv4SingleHopNodeLocationSummary.Location) + "']"
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4SingleHopNodeLocationSummary.SessionState
    }
    return nil
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4SingleHopNodeLocationSummary.SessionState
    return children
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location"] = ipv4SingleHopNodeLocationSummary.Location
    return leafs
}

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetYangName() string { return "ipv4-single-hop-node-location-summary" }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) SetParent(parent types.Entity) { ipv4SingleHopNodeLocationSummary.parent = parent }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetParent() types.Entity { return ipv4SingleHopNodeLocationSummary.parent }

func (ipv4SingleHopNodeLocationSummary *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary) GetParentYangName() string { return "ipv4-single-hop-node-location-summaries" }

// Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4SingleHopNodeLocationSummaries_Ipv4SingleHopNodeLocationSummary_SessionState) GetParentYangName() string { return "ipv4-single-hop-node-location-summary" }

// Bfd_LabelSummary
// Summary information of Label BFD
type Bfd_LabelSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_LabelSummary_SessionState
}

func (labelSummary *Bfd_LabelSummary) GetFilter() yfilter.YFilter { return labelSummary.YFilter }

func (labelSummary *Bfd_LabelSummary) SetFilter(yf yfilter.YFilter) { labelSummary.YFilter = yf }

func (labelSummary *Bfd_LabelSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (labelSummary *Bfd_LabelSummary) GetSegmentPath() string {
    return "label-summary"
}

func (labelSummary *Bfd_LabelSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &labelSummary.SessionState
    }
    return nil
}

func (labelSummary *Bfd_LabelSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &labelSummary.SessionState
    return children
}

func (labelSummary *Bfd_LabelSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSummary *Bfd_LabelSummary) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummary *Bfd_LabelSummary) GetYangName() string { return "label-summary" }

func (labelSummary *Bfd_LabelSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummary *Bfd_LabelSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummary *Bfd_LabelSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummary *Bfd_LabelSummary) SetParent(parent types.Entity) { labelSummary.parent = parent }

func (labelSummary *Bfd_LabelSummary) GetParent() types.Entity { return labelSummary.parent }

func (labelSummary *Bfd_LabelSummary) GetParentYangName() string { return "bfd" }

// Bfd_LabelSummary_SessionState
// Statistics of states for sessions
type Bfd_LabelSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_LabelSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_LabelSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_LabelSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_LabelSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_LabelSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_LabelSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_LabelSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_LabelSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_LabelSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_LabelSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_LabelSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_LabelSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_LabelSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_LabelSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_LabelSummary_SessionState) GetParentYangName() string { return "label-summary" }

// Bfd_Ipv4BfDoMplsteHeadSessionBriefs
// Table of brief information about all IPv4 BFD
// over MPLS-TE Head sessions in the System
type Bfd_Ipv4BfDoMplsteHeadSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv4 BFD over MPLS-TE Head session. The type
    // is slice of
    // Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief.
    Ipv4BfDoMplsteHeadSessionBrief []Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadSessionBriefs.YFilter }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadSessionBriefs.YFilter = yf }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-head-session-brief" { return "Ipv4BfDoMplsteHeadSessionBrief" }
    return ""
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-session-briefs"
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-head-session-brief" {
        for _, c := range ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief {
            if ipv4BfDoMplsteHeadSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief{}
        ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief = append(ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief, child)
        return &ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief[len(ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief)-1]
    }
    return nil
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief {
        children[ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadSessionBriefs.Ipv4BfDoMplsteHeadSessionBrief[i]
    }
    return children
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetYangName() string { return "ipv4bf-do-mplste-head-session-briefs" }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadSessionBriefs.parent = parent }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetParent() types.Entity { return ipv4BfDoMplsteHeadSessionBriefs.parent }

func (ipv4BfDoMplsteHeadSessionBriefs *Bfd_Ipv4BfDoMplsteHeadSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief
// Brief information for a single IPv4 BFD over
// MPLS-TE Head session
type Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadSessionBrief.YFilter }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadSessionBrief.YFilter = yf }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-session-brief"
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv4BfDoMplsteHeadSessionBrief.StatusBriefInformation
    return children
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4BfDoMplsteHeadSessionBrief.InterfaceName
    leafs["vrf-name"] = ipv4BfDoMplsteHeadSessionBrief.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteHeadSessionBrief.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteHeadSessionBrief.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteHeadSessionBrief.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteHeadSessionBrief.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteHeadSessionBrief.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteHeadSessionBrief.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteHeadSessionBrief.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteHeadSessionBrief.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteHeadSessionBrief.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteHeadSessionBrief.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteHeadSessionBrief.FecCtype
    leafs["location"] = ipv4BfDoMplsteHeadSessionBrief.Location
    leafs["node-id"] = ipv4BfDoMplsteHeadSessionBrief.NodeId
    leafs["state"] = ipv4BfDoMplsteHeadSessionBrief.State
    leafs["session-type"] = ipv4BfDoMplsteHeadSessionBrief.SessionType
    leafs["session-subtype"] = ipv4BfDoMplsteHeadSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv4BfDoMplsteHeadSessionBrief.SessionFlags
    return leafs
}

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetYangName() string { return "ipv4bf-do-mplste-head-session-brief" }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadSessionBrief.parent = parent }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetParent() types.Entity { return ipv4BfDoMplsteHeadSessionBrief.parent }

func (ipv4BfDoMplsteHeadSessionBrief *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-briefs" }

// Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-brief" }

// Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionBriefs_Ipv4BfDoMplsteHeadSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails
// Table of detailed information about all IPv4 BFD
// over MPLS-TE Tail sessions in the System
type Bfd_Ipv4BfDoMplsteTailSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv4 BFD over MPLS-TE Tail session. The
    // type is slice of
    // Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail.
    Ipv4BfDoMplsteTailSessionDetail []Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailSessionDetails.YFilter }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailSessionDetails.YFilter = yf }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-tail-session-detail" { return "Ipv4BfDoMplsteTailSessionDetail" }
    return ""
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-session-details"
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-tail-session-detail" {
        for _, c := range ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail {
            if ipv4BfDoMplsteTailSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail{}
        ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail = append(ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail, child)
        return &ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail[len(ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail)-1]
    }
    return nil
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail {
        children[ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail[i].GetSegmentPath()] = &ipv4BfDoMplsteTailSessionDetails.Ipv4BfDoMplsteTailSessionDetail[i]
    }
    return children
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetYangName() string { return "ipv4bf-do-mplste-tail-session-details" }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) SetParent(parent types.Entity) { ipv4BfDoMplsteTailSessionDetails.parent = parent }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetParent() types.Entity { return ipv4BfDoMplsteTailSessionDetails.parent }

func (ipv4BfDoMplsteTailSessionDetails *Bfd_Ipv4BfDoMplsteTailSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail
// Detailed information for a single IPv4 BFD over
// MPLS-TE Tail session
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailSessionDetail.YFilter }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailSessionDetail.YFilter = yf }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-session-detail"
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv4BfDoMplsteTailSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv4BfDoMplsteTailSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv4BfDoMplsteTailSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv4BfDoMplsteTailSessionDetail.OwnerInformation {
            if ipv4BfDoMplsteTailSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation{}
        ipv4BfDoMplsteTailSessionDetail.OwnerInformation = append(ipv4BfDoMplsteTailSessionDetail.OwnerInformation, child)
        return &ipv4BfDoMplsteTailSessionDetail.OwnerInformation[len(ipv4BfDoMplsteTailSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv4BfDoMplsteTailSessionDetail.AssociationInformation {
            if ipv4BfDoMplsteTailSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation{}
        ipv4BfDoMplsteTailSessionDetail.AssociationInformation = append(ipv4BfDoMplsteTailSessionDetail.AssociationInformation, child)
        return &ipv4BfDoMplsteTailSessionDetail.AssociationInformation[len(ipv4BfDoMplsteTailSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv4BfDoMplsteTailSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv4BfDoMplsteTailSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv4BfDoMplsteTailSessionDetail.LspPingInfo
    for i := range ipv4BfDoMplsteTailSessionDetail.OwnerInformation {
        children[ipv4BfDoMplsteTailSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv4BfDoMplsteTailSessionDetail.OwnerInformation[i]
    }
    for i := range ipv4BfDoMplsteTailSessionDetail.AssociationInformation {
        children[ipv4BfDoMplsteTailSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv4BfDoMplsteTailSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = ipv4BfDoMplsteTailSessionDetail.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteTailSessionDetail.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteTailSessionDetail.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteTailSessionDetail.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteTailSessionDetail.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteTailSessionDetail.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteTailSessionDetail.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteTailSessionDetail.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteTailSessionDetail.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteTailSessionDetail.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteTailSessionDetail.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteTailSessionDetail.FecCtype
    leafs["location"] = ipv4BfDoMplsteTailSessionDetail.Location
    return leafs
}

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) SetParent(parent types.Entity) { ipv4BfDoMplsteTailSessionDetail.parent = parent }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetParent() types.Entity { return ipv4BfDoMplsteTailSessionDetail.parent }

func (ipv4BfDoMplsteTailSessionDetail *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-details" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-detail" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteTailSessionDetails_Ipv4BfDoMplsteTailSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4MultiHopNodeLocationSummaries
// Table of summary information about BFD IPv4
// multihop sessions per location
type Bfd_Ipv4MultiHopNodeLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv4 multihop sessions for location. The type
    // is slice of
    // Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary.
    Ipv4MultiHopNodeLocationSummary []Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetFilter() yfilter.YFilter { return ipv4MultiHopNodeLocationSummaries.YFilter }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv4MultiHopNodeLocationSummaries.YFilter = yf }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-node-location-summary" { return "Ipv4MultiHopNodeLocationSummary" }
    return ""
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetSegmentPath() string {
    return "ipv4-multi-hop-node-location-summaries"
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-node-location-summary" {
        for _, c := range ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary {
            if ipv4MultiHopNodeLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary{}
        ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary = append(ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary, child)
        return &ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary[len(ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary)-1]
    }
    return nil
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary {
        children[ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary[i].GetSegmentPath()] = &ipv4MultiHopNodeLocationSummaries.Ipv4MultiHopNodeLocationSummary[i]
    }
    return children
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetYangName() string { return "ipv4-multi-hop-node-location-summaries" }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) SetParent(parent types.Entity) { ipv4MultiHopNodeLocationSummaries.parent = parent }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetParent() types.Entity { return ipv4MultiHopNodeLocationSummaries.parent }

func (ipv4MultiHopNodeLocationSummaries *Bfd_Ipv4MultiHopNodeLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary
// Summary information for BFD IPv4 multihop
// sessions for location
type Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetFilter() yfilter.YFilter { return ipv4MultiHopNodeLocationSummary.YFilter }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) SetFilter(yf yfilter.YFilter) { ipv4MultiHopNodeLocationSummary.YFilter = yf }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetGoName(yname string) string {
    if yname == "location" { return "Location" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetSegmentPath() string {
    return "ipv4-multi-hop-node-location-summary" + "[location='" + fmt.Sprintf("%v", ipv4MultiHopNodeLocationSummary.Location) + "']"
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4MultiHopNodeLocationSummary.SessionState
    }
    return nil
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4MultiHopNodeLocationSummary.SessionState
    return children
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location"] = ipv4MultiHopNodeLocationSummary.Location
    return leafs
}

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetYangName() string { return "ipv4-multi-hop-node-location-summary" }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) SetParent(parent types.Entity) { ipv4MultiHopNodeLocationSummary.parent = parent }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetParent() types.Entity { return ipv4MultiHopNodeLocationSummary.parent }

func (ipv4MultiHopNodeLocationSummary *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary) GetParentYangName() string { return "ipv4-multi-hop-node-location-summaries" }

// Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4MultiHopNodeLocationSummaries_Ipv4MultiHopNodeLocationSummary_SessionState) GetParentYangName() string { return "ipv4-multi-hop-node-location-summary" }

// Bfd_Ipv4BfDoMplsteTailSessionBriefs
// Table of brief information about all IPv4 BFD
// over MPLS-TE Tail sessions in the System
type Bfd_Ipv4BfDoMplsteTailSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv4 BFD over MPLS-TE session. The type is
    // slice of
    // Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief.
    Ipv4BfDoMplsteTailSessionBrief []Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailSessionBriefs.YFilter }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailSessionBriefs.YFilter = yf }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-tail-session-brief" { return "Ipv4BfDoMplsteTailSessionBrief" }
    return ""
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-session-briefs"
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-tail-session-brief" {
        for _, c := range ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief {
            if ipv4BfDoMplsteTailSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief{}
        ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief = append(ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief, child)
        return &ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief[len(ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief)-1]
    }
    return nil
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief {
        children[ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief[i].GetSegmentPath()] = &ipv4BfDoMplsteTailSessionBriefs.Ipv4BfDoMplsteTailSessionBrief[i]
    }
    return children
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetYangName() string { return "ipv4bf-do-mplste-tail-session-briefs" }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) SetParent(parent types.Entity) { ipv4BfDoMplsteTailSessionBriefs.parent = parent }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetParent() types.Entity { return ipv4BfDoMplsteTailSessionBriefs.parent }

func (ipv4BfDoMplsteTailSessionBriefs *Bfd_Ipv4BfDoMplsteTailSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief
// Brief information for a single IPv4 BFD over
// MPLS-TE session
type Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailSessionBrief.YFilter }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailSessionBrief.YFilter = yf }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-session-brief"
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv4BfDoMplsteTailSessionBrief.StatusBriefInformation
    return children
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = ipv4BfDoMplsteTailSessionBrief.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteTailSessionBrief.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteTailSessionBrief.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteTailSessionBrief.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteTailSessionBrief.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteTailSessionBrief.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteTailSessionBrief.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteTailSessionBrief.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteTailSessionBrief.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteTailSessionBrief.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteTailSessionBrief.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteTailSessionBrief.FecCtype
    leafs["location"] = ipv4BfDoMplsteTailSessionBrief.Location
    leafs["node-id"] = ipv4BfDoMplsteTailSessionBrief.NodeId
    leafs["state"] = ipv4BfDoMplsteTailSessionBrief.State
    leafs["session-type"] = ipv4BfDoMplsteTailSessionBrief.SessionType
    leafs["session-subtype"] = ipv4BfDoMplsteTailSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv4BfDoMplsteTailSessionBrief.SessionFlags
    return leafs
}

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetYangName() string { return "ipv4bf-do-mplste-tail-session-brief" }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) SetParent(parent types.Entity) { ipv4BfDoMplsteTailSessionBrief.parent = parent }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetParent() types.Entity { return ipv4BfDoMplsteTailSessionBrief.parent }

func (ipv4BfDoMplsteTailSessionBrief *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-briefs" }

// Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv4bf-do-mplste-tail-session-brief" }

// Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteTailSessionBriefs_Ipv4BfDoMplsteTailSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6MultiHopNodeLocationSummaries
// Table of summary information about BFD IPv6
// multihop sessions per location
type Bfd_Ipv6MultiHopNodeLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv6 multihop sessions for location. The type
    // is slice of
    // Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary.
    Ipv6MultiHopNodeLocationSummary []Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetFilter() yfilter.YFilter { return ipv6MultiHopNodeLocationSummaries.YFilter }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv6MultiHopNodeLocationSummaries.YFilter = yf }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-node-location-summary" { return "Ipv6MultiHopNodeLocationSummary" }
    return ""
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetSegmentPath() string {
    return "ipv6-multi-hop-node-location-summaries"
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-node-location-summary" {
        for _, c := range ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary {
            if ipv6MultiHopNodeLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary{}
        ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary = append(ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary, child)
        return &ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary[len(ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary)-1]
    }
    return nil
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary {
        children[ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary[i].GetSegmentPath()] = &ipv6MultiHopNodeLocationSummaries.Ipv6MultiHopNodeLocationSummary[i]
    }
    return children
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetYangName() string { return "ipv6-multi-hop-node-location-summaries" }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) SetParent(parent types.Entity) { ipv6MultiHopNodeLocationSummaries.parent = parent }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetParent() types.Entity { return ipv6MultiHopNodeLocationSummaries.parent }

func (ipv6MultiHopNodeLocationSummaries *Bfd_Ipv6MultiHopNodeLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary
// Summary information for BFD IPv6 multihop
// sessions for location
type Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetFilter() yfilter.YFilter { return ipv6MultiHopNodeLocationSummary.YFilter }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) SetFilter(yf yfilter.YFilter) { ipv6MultiHopNodeLocationSummary.YFilter = yf }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetGoName(yname string) string {
    if yname == "location" { return "Location" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetSegmentPath() string {
    return "ipv6-multi-hop-node-location-summary" + "[location='" + fmt.Sprintf("%v", ipv6MultiHopNodeLocationSummary.Location) + "']"
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv6MultiHopNodeLocationSummary.SessionState
    }
    return nil
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv6MultiHopNodeLocationSummary.SessionState
    return children
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location"] = ipv6MultiHopNodeLocationSummary.Location
    return leafs
}

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetYangName() string { return "ipv6-multi-hop-node-location-summary" }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) SetParent(parent types.Entity) { ipv6MultiHopNodeLocationSummary.parent = parent }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetParent() types.Entity { return ipv6MultiHopNodeLocationSummary.parent }

func (ipv6MultiHopNodeLocationSummary *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary) GetParentYangName() string { return "ipv6-multi-hop-node-location-summaries" }

// Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv6MultiHopNodeLocationSummaries_Ipv6MultiHopNodeLocationSummary_SessionState) GetParentYangName() string { return "ipv6-multi-hop-node-location-summary" }

// Bfd_Ipv4MultiHopSummary
// Summary information of BFD IPv4 multihop
// sessions
type Bfd_Ipv4MultiHopSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4MultiHopSummary_SessionState
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetFilter() yfilter.YFilter { return ipv4MultiHopSummary.YFilter }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) SetFilter(yf yfilter.YFilter) { ipv4MultiHopSummary.YFilter = yf }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetSegmentPath() string {
    return "ipv4-multi-hop-summary"
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4MultiHopSummary.SessionState
    }
    return nil
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4MultiHopSummary.SessionState
    return children
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetYangName() string { return "ipv4-multi-hop-summary" }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) SetParent(parent types.Entity) { ipv4MultiHopSummary.parent = parent }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetParent() types.Entity { return ipv4MultiHopSummary.parent }

func (ipv4MultiHopSummary *Bfd_Ipv4MultiHopSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4MultiHopSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4MultiHopSummary_SessionState) GetParentYangName() string { return "ipv4-multi-hop-summary" }

// Bfd_Ipv4SingleHopCounters
// IPv4 single hop Counters
type Bfd_Ipv4SingleHopCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv4 single hop Packet counters.
    Ipv4SingleHopPacketCounters Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetFilter() yfilter.YFilter { return ipv4SingleHopCounters.YFilter }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) SetFilter(yf yfilter.YFilter) { ipv4SingleHopCounters.YFilter = yf }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-packet-counters" { return "Ipv4SingleHopPacketCounters" }
    return ""
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetSegmentPath() string {
    return "ipv4-single-hop-counters"
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-packet-counters" {
        return &ipv4SingleHopCounters.Ipv4SingleHopPacketCounters
    }
    return nil
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-single-hop-packet-counters"] = &ipv4SingleHopCounters.Ipv4SingleHopPacketCounters
    return children
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetYangName() string { return "ipv4-single-hop-counters" }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) SetParent(parent types.Entity) { ipv4SingleHopCounters.parent = parent }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetParent() types.Entity { return ipv4SingleHopCounters.parent }

func (ipv4SingleHopCounters *Bfd_Ipv4SingleHopCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters
// Table of IPv4 single hop Packet counters
type Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface IPv4 single hop Packet counters. The type is slice of
    // Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter.
    Ipv4SingleHopPacketCounter []Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetFilter() yfilter.YFilter { return ipv4SingleHopPacketCounters.YFilter }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) SetFilter(yf yfilter.YFilter) { ipv4SingleHopPacketCounters.YFilter = yf }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-packet-counter" { return "Ipv4SingleHopPacketCounter" }
    return ""
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetSegmentPath() string {
    return "ipv4-single-hop-packet-counters"
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-packet-counter" {
        for _, c := range ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter {
            if ipv4SingleHopPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter{}
        ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter = append(ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter, child)
        return &ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter[len(ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter)-1]
    }
    return nil
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter {
        children[ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter[i].GetSegmentPath()] = &ipv4SingleHopPacketCounters.Ipv4SingleHopPacketCounter[i]
    }
    return children
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetYangName() string { return "ipv4-single-hop-packet-counters" }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) SetParent(parent types.Entity) { ipv4SingleHopPacketCounters.parent = parent }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetParent() types.Entity { return ipv4SingleHopPacketCounters.parent }

func (ipv4SingleHopPacketCounters *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters) GetParentYangName() string { return "ipv4-single-hop-counters" }

// Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter
// Interface IPv4 single hop Packet counters
type Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetFilter() yfilter.YFilter { return ipv4SingleHopPacketCounter.YFilter }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) SetFilter(yf yfilter.YFilter) { ipv4SingleHopPacketCounter.YFilter = yf }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetSegmentPath() string {
    return "ipv4-single-hop-packet-counter" + "[interface-name='" + fmt.Sprintf("%v", ipv4SingleHopPacketCounter.InterfaceName) + "']"
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4SingleHopPacketCounter.InterfaceName
    leafs["hello-transmit-count"] = ipv4SingleHopPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv4SingleHopPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv4SingleHopPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv4SingleHopPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv4SingleHopPacketCounter.DisplayType
    return leafs
}

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetYangName() string { return "ipv4-single-hop-packet-counter" }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) SetParent(parent types.Entity) { ipv4SingleHopPacketCounter.parent = parent }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetParent() types.Entity { return ipv4SingleHopPacketCounter.parent }

func (ipv4SingleHopPacketCounter *Bfd_Ipv4SingleHopCounters_Ipv4SingleHopPacketCounters_Ipv4SingleHopPacketCounter) GetParentYangName() string { return "ipv4-single-hop-packet-counters" }

// Bfd_Ipv6MultiHopSessionDetails
// Table of detailed information about all IPv6
// multihop BFD sessions in the System 
type Bfd_Ipv6MultiHopSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv6 multihop BFD session. The type is
    // slice of Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail.
    Ipv6MultiHopSessionDetail []Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetFilter() yfilter.YFilter { return ipv6MultiHopSessionDetails.YFilter }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) SetFilter(yf yfilter.YFilter) { ipv6MultiHopSessionDetails.YFilter = yf }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-session-detail" { return "Ipv6MultiHopSessionDetail" }
    return ""
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetSegmentPath() string {
    return "ipv6-multi-hop-session-details"
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-session-detail" {
        for _, c := range ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail {
            if ipv6MultiHopSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail{}
        ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail = append(ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail, child)
        return &ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail[len(ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail)-1]
    }
    return nil
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail {
        children[ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail[i].GetSegmentPath()] = &ipv6MultiHopSessionDetails.Ipv6MultiHopSessionDetail[i]
    }
    return children
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetYangName() string { return "ipv6-multi-hop-session-details" }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) SetParent(parent types.Entity) { ipv6MultiHopSessionDetails.parent = parent }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetParent() types.Entity { return ipv6MultiHopSessionDetails.parent }

func (ipv6MultiHopSessionDetails *Bfd_Ipv6MultiHopSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail
// Detailed information for a single IPv6 multihop
// BFD session
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Session status information.
    StatusInformation Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetFilter() yfilter.YFilter { return ipv6MultiHopSessionDetail.YFilter }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) SetFilter(yf yfilter.YFilter) { ipv6MultiHopSessionDetail.YFilter = yf }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetSegmentPath() string {
    return "ipv6-multi-hop-session-detail"
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv6MultiHopSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv6MultiHopSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv6MultiHopSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv6MultiHopSessionDetail.OwnerInformation {
            if ipv6MultiHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation{}
        ipv6MultiHopSessionDetail.OwnerInformation = append(ipv6MultiHopSessionDetail.OwnerInformation, child)
        return &ipv6MultiHopSessionDetail.OwnerInformation[len(ipv6MultiHopSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv6MultiHopSessionDetail.AssociationInformation {
            if ipv6MultiHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation{}
        ipv6MultiHopSessionDetail.AssociationInformation = append(ipv6MultiHopSessionDetail.AssociationInformation, child)
        return &ipv6MultiHopSessionDetail.AssociationInformation[len(ipv6MultiHopSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv6MultiHopSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv6MultiHopSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv6MultiHopSessionDetail.LspPingInfo
    for i := range ipv6MultiHopSessionDetail.OwnerInformation {
        children[ipv6MultiHopSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv6MultiHopSessionDetail.OwnerInformation[i]
    }
    for i := range ipv6MultiHopSessionDetail.AssociationInformation {
        children[ipv6MultiHopSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv6MultiHopSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv6MultiHopSessionDetail.SourceAddress
    leafs["destination-address"] = ipv6MultiHopSessionDetail.DestinationAddress
    leafs["location"] = ipv6MultiHopSessionDetail.Location
    leafs["vrf-name"] = ipv6MultiHopSessionDetail.VrfName
    return leafs
}

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetYangName() string { return "ipv6-multi-hop-session-detail" }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) SetParent(parent types.Entity) { ipv6MultiHopSessionDetail.parent = parent }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetParent() types.Entity { return ipv6MultiHopSessionDetail.parent }

func (ipv6MultiHopSessionDetail *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail) GetParentYangName() string { return "ipv6-multi-hop-session-details" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation) GetParentYangName() string { return "ipv6-multi-hop-session-detail" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv6-multi-hop-session-detail" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv6-multi-hop-session-detail" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv6-multi-hop-session-detail" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv6-multi-hop-session-detail" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv6MultiHopSessionDetails_Ipv6MultiHopSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv6MultiHopMultiPaths
// IPv6 multi hop multipath
type Bfd_Ipv6MultiHopMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv6 multihop multipath table. The type is slice of
    // Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath.
    Ipv6MultiHopMultiPath []Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetFilter() yfilter.YFilter { return ipv6MultiHopMultiPaths.YFilter }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) SetFilter(yf yfilter.YFilter) { ipv6MultiHopMultiPaths.YFilter = yf }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-multi-path" { return "Ipv6MultiHopMultiPath" }
    return ""
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetSegmentPath() string {
    return "ipv6-multi-hop-multi-paths"
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-multi-path" {
        for _, c := range ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath {
            if ipv6MultiHopMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath{}
        ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath = append(ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath, child)
        return &ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath[len(ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath)-1]
    }
    return nil
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath {
        children[ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath[i].GetSegmentPath()] = &ipv6MultiHopMultiPaths.Ipv6MultiHopMultiPath[i]
    }
    return children
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetYangName() string { return "ipv6-multi-hop-multi-paths" }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) SetParent(parent types.Entity) { ipv6MultiHopMultiPaths.parent = parent }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetParent() types.Entity { return ipv6MultiHopMultiPaths.parent }

func (ipv6MultiHopMultiPaths *Bfd_Ipv6MultiHopMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath
// IPv6 multihop multipath table
type Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetFilter() yfilter.YFilter { return ipv6MultiHopMultiPath.YFilter }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) SetFilter(yf yfilter.YFilter) { ipv6MultiHopMultiPath.YFilter = yf }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetSegmentPath() string {
    return "ipv6-multi-hop-multi-path"
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv6MultiHopMultiPath.SourceAddress
    leafs["destination-address"] = ipv6MultiHopMultiPath.DestinationAddress
    leafs["location"] = ipv6MultiHopMultiPath.Location
    leafs["vrf-name"] = ipv6MultiHopMultiPath.VrfName
    leafs["session-subtype"] = ipv6MultiHopMultiPath.SessionSubtype
    leafs["state"] = ipv6MultiHopMultiPath.State
    leafs["local-discriminator"] = ipv6MultiHopMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv6MultiHopMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv6MultiHopMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv6MultiHopMultiPath.SessionInterfaceName
    return leafs
}

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetYangName() string { return "ipv6-multi-hop-multi-path" }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) SetParent(parent types.Entity) { ipv6MultiHopMultiPath.parent = parent }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetParent() types.Entity { return ipv6MultiHopMultiPath.parent }

func (ipv6MultiHopMultiPath *Bfd_Ipv6MultiHopMultiPaths_Ipv6MultiHopMultiPath) GetParentYangName() string { return "ipv6-multi-hop-multi-paths" }

// Bfd_Ipv4BfDoMplsteHeadCounters
// IPv4 BFD over MPLS-TE Counters
type Bfd_Ipv4BfDoMplsteHeadCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv4 BFD over MPLS-TE Packet counters.
    Ipv4BfDoMplsteHeadPacketCounters Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadCounters.YFilter }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadCounters.YFilter = yf }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-head-packet-counters" { return "Ipv4BfDoMplsteHeadPacketCounters" }
    return ""
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-counters"
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-head-packet-counters" {
        return &ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters
    }
    return nil
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4bf-do-mplste-head-packet-counters"] = &ipv4BfDoMplsteHeadCounters.Ipv4BfDoMplsteHeadPacketCounters
    return children
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetYangName() string { return "ipv4bf-do-mplste-head-counters" }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadCounters.parent = parent }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetParent() types.Entity { return ipv4BfDoMplsteHeadCounters.parent }

func (ipv4BfDoMplsteHeadCounters *Bfd_Ipv4BfDoMplsteHeadCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters
// Table of IPv4 BFD over MPLS-TE Packet counters
type Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface  IPv4 BFD over MPLS-TE Packet counters. The type is slice of
    // Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter.
    Ipv4BfDoMplsteHeadPacketCounter []Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadPacketCounters.YFilter }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadPacketCounters.YFilter = yf }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-head-packet-counter" { return "Ipv4BfDoMplsteHeadPacketCounter" }
    return ""
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-packet-counters"
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-head-packet-counter" {
        for _, c := range ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter {
            if ipv4BfDoMplsteHeadPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter{}
        ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter = append(ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter, child)
        return &ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter[len(ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter)-1]
    }
    return nil
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter {
        children[ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadPacketCounters.Ipv4BfDoMplsteHeadPacketCounter[i]
    }
    return children
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetYangName() string { return "ipv4bf-do-mplste-head-packet-counters" }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadPacketCounters.parent = parent }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetParent() types.Entity { return ipv4BfDoMplsteHeadPacketCounters.parent }

func (ipv4BfDoMplsteHeadPacketCounters *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters) GetParentYangName() string { return "ipv4bf-do-mplste-head-counters" }

// Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter
// Interface  IPv4 BFD over MPLS-TE Packet
// counters
type Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadPacketCounter.YFilter }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadPacketCounter.YFilter = yf }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "location" { return "Location" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-packet-counter"
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4BfDoMplsteHeadPacketCounter.InterfaceName
    leafs["location"] = ipv4BfDoMplsteHeadPacketCounter.Location
    leafs["hello-transmit-count"] = ipv4BfDoMplsteHeadPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv4BfDoMplsteHeadPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv4BfDoMplsteHeadPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv4BfDoMplsteHeadPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv4BfDoMplsteHeadPacketCounter.DisplayType
    return leafs
}

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetYangName() string { return "ipv4bf-do-mplste-head-packet-counter" }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadPacketCounter.parent = parent }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetParent() types.Entity { return ipv4BfDoMplsteHeadPacketCounter.parent }

func (ipv4BfDoMplsteHeadPacketCounter *Bfd_Ipv4BfDoMplsteHeadCounters_Ipv4BfDoMplsteHeadPacketCounters_Ipv4BfDoMplsteHeadPacketCounter) GetParentYangName() string { return "ipv4bf-do-mplste-head-packet-counters" }

// Bfd_SessionMibs
// BFD session MIB database
type Bfd_SessionMibs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for BFD session MIB. The type is slice of
    // Bfd_SessionMibs_SessionMib.
    SessionMib []Bfd_SessionMibs_SessionMib
}

func (sessionMibs *Bfd_SessionMibs) GetFilter() yfilter.YFilter { return sessionMibs.YFilter }

func (sessionMibs *Bfd_SessionMibs) SetFilter(yf yfilter.YFilter) { sessionMibs.YFilter = yf }

func (sessionMibs *Bfd_SessionMibs) GetGoName(yname string) string {
    if yname == "session-mib" { return "SessionMib" }
    return ""
}

func (sessionMibs *Bfd_SessionMibs) GetSegmentPath() string {
    return "session-mibs"
}

func (sessionMibs *Bfd_SessionMibs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-mib" {
        for _, c := range sessionMibs.SessionMib {
            if sessionMibs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionMibs_SessionMib{}
        sessionMibs.SessionMib = append(sessionMibs.SessionMib, child)
        return &sessionMibs.SessionMib[len(sessionMibs.SessionMib)-1]
    }
    return nil
}

func (sessionMibs *Bfd_SessionMibs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionMibs.SessionMib {
        children[sessionMibs.SessionMib[i].GetSegmentPath()] = &sessionMibs.SessionMib[i]
    }
    return children
}

func (sessionMibs *Bfd_SessionMibs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionMibs *Bfd_SessionMibs) GetBundleName() string { return "cisco_ios_xr" }

func (sessionMibs *Bfd_SessionMibs) GetYangName() string { return "session-mibs" }

func (sessionMibs *Bfd_SessionMibs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionMibs *Bfd_SessionMibs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionMibs *Bfd_SessionMibs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionMibs *Bfd_SessionMibs) SetParent(parent types.Entity) { sessionMibs.parent = parent }

func (sessionMibs *Bfd_SessionMibs) GetParent() types.Entity { return sessionMibs.parent }

func (sessionMibs *Bfd_SessionMibs) GetParentYangName() string { return "bfd" }

// Bfd_SessionMibs_SessionMib
// Brief information for BFD session MIB
type Bfd_SessionMibs_SessionMib struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Sesison Discr . The type is interface{} with
    // range: -2147483648..2147483647.
    Discriminator interface{}

    // Sessions' Local Discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Sessions' Remote Discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Session BFD Version. The type is interface{} with range: 0..4294967295.
    Sessionversion interface{}

    // Session State. The type is interface{} with range: 0..4294967295.
    SessionState interface{}

    // Trap Generator Bitmap. The type is interface{} with range: 0..4294967295.
    TrapBitmap interface{}

    // Packet In Counter. The type is interface{} with range:
    // 0..18446744073709551615.
    PktIn interface{}

    // Packet Out Counter. The type is interface{} with range:
    // 0..18446744073709551615.
    PktOut interface{}

    // Last Session Up Time (seconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    LastUpTimeSec interface{}

    // Last Session Up Time (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    LastUpTimeNsec interface{}

    // Last Session Down Time (seconds). The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    LastDownTimeSec interface{}

    // Last Session Down Time (nanoseconds). The type is interface{} with range:
    // 0..4294967295. Units are nanosecond.
    LastDownTimeNsec interface{}

    // Last Session Down Diag. The type is BfdMgmtSessionDiag.
    LastDownDiag interface{}

    // Up Count. The type is interface{} with range: 0..4294967295.
    UpCounter interface{}

    // Last Time Session Info Queried. The type is interface{} with range:
    // 0..18446744073709551615.
    LastTimeCached interface{}

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    IntHandle interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Desired Min TX Interval. The type is interface{} with range: 0..4294967295.
    DesiredMinTxInterval interface{}

    // Required Min RX Interval. The type is interface{} with range:
    // 0..4294967295.
    RequiredMinRxInterval interface{}

    // Required Min RX Echo Interval. The type is interface{} with range:
    // 0..4294967295.
    RequiredMinRxEchoInterval interface{}

    // Session Destination address.
    DestAddress Bfd_SessionMibs_SessionMib_DestAddress
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetFilter() yfilter.YFilter { return sessionMib.YFilter }

func (sessionMib *Bfd_SessionMibs_SessionMib) SetFilter(yf yfilter.YFilter) { sessionMib.YFilter = yf }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetGoName(yname string) string {
    if yname == "discriminator" { return "Discriminator" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "sessionversion" { return "Sessionversion" }
    if yname == "session-state" { return "SessionState" }
    if yname == "trap-bitmap" { return "TrapBitmap" }
    if yname == "pkt-in" { return "PktIn" }
    if yname == "pkt-out" { return "PktOut" }
    if yname == "last-up-time-sec" { return "LastUpTimeSec" }
    if yname == "last-up-time-nsec" { return "LastUpTimeNsec" }
    if yname == "last-down-time-sec" { return "LastDownTimeSec" }
    if yname == "last-down-time-nsec" { return "LastDownTimeNsec" }
    if yname == "last-down-diag" { return "LastDownDiag" }
    if yname == "up-counter" { return "UpCounter" }
    if yname == "last-time-cached" { return "LastTimeCached" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "int-handle" { return "IntHandle" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "desired-min-tx-interval" { return "DesiredMinTxInterval" }
    if yname == "required-min-rx-interval" { return "RequiredMinRxInterval" }
    if yname == "required-min-rx-echo-interval" { return "RequiredMinRxEchoInterval" }
    if yname == "dest-address" { return "DestAddress" }
    return ""
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetSegmentPath() string {
    return "session-mib" + "[discriminator='" + fmt.Sprintf("%v", sessionMib.Discriminator) + "']"
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "dest-address" {
        return &sessionMib.DestAddress
    }
    return nil
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["dest-address"] = &sessionMib.DestAddress
    return children
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["discriminator"] = sessionMib.Discriminator
    leafs["local-discriminator"] = sessionMib.LocalDiscriminator
    leafs["remote-discriminator"] = sessionMib.RemoteDiscriminator
    leafs["sessionversion"] = sessionMib.Sessionversion
    leafs["session-state"] = sessionMib.SessionState
    leafs["trap-bitmap"] = sessionMib.TrapBitmap
    leafs["pkt-in"] = sessionMib.PktIn
    leafs["pkt-out"] = sessionMib.PktOut
    leafs["last-up-time-sec"] = sessionMib.LastUpTimeSec
    leafs["last-up-time-nsec"] = sessionMib.LastUpTimeNsec
    leafs["last-down-time-sec"] = sessionMib.LastDownTimeSec
    leafs["last-down-time-nsec"] = sessionMib.LastDownTimeNsec
    leafs["last-down-diag"] = sessionMib.LastDownDiag
    leafs["up-counter"] = sessionMib.UpCounter
    leafs["last-time-cached"] = sessionMib.LastTimeCached
    leafs["interface-name"] = sessionMib.InterfaceName
    leafs["int-handle"] = sessionMib.IntHandle
    leafs["detection-multiplier"] = sessionMib.DetectionMultiplier
    leafs["desired-min-tx-interval"] = sessionMib.DesiredMinTxInterval
    leafs["required-min-rx-interval"] = sessionMib.RequiredMinRxInterval
    leafs["required-min-rx-echo-interval"] = sessionMib.RequiredMinRxEchoInterval
    return leafs
}

func (sessionMib *Bfd_SessionMibs_SessionMib) GetBundleName() string { return "cisco_ios_xr" }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetYangName() string { return "session-mib" }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionMib *Bfd_SessionMibs_SessionMib) SetParent(parent types.Entity) { sessionMib.parent = parent }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetParent() types.Entity { return sessionMib.parent }

func (sessionMib *Bfd_SessionMibs_SessionMib) GetParentYangName() string { return "session-mibs" }

// Bfd_SessionMibs_SessionMib_DestAddress
// Session Destination address
type Bfd_SessionMibs_SessionMib_DestAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetFilter() yfilter.YFilter { return destAddress.YFilter }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) SetFilter(yf yfilter.YFilter) { destAddress.YFilter = yf }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetSegmentPath() string {
    return "dest-address"
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = destAddress.Afi
    leafs["dummy"] = destAddress.Dummy
    leafs["ipv4"] = destAddress.Ipv4
    leafs["ipv6"] = destAddress.Ipv6
    return leafs
}

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetYangName() string { return "dest-address" }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) SetParent(parent types.Entity) { destAddress.parent = parent }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetParent() types.Entity { return destAddress.parent }

func (destAddress *Bfd_SessionMibs_SessionMib_DestAddress) GetParentYangName() string { return "session-mib" }

// Bfd_Ipv6MultiHopSummary
// Summary information of BFD IPv6 multihop
// sessions
type Bfd_Ipv6MultiHopSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv6MultiHopSummary_SessionState
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetFilter() yfilter.YFilter { return ipv6MultiHopSummary.YFilter }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) SetFilter(yf yfilter.YFilter) { ipv6MultiHopSummary.YFilter = yf }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetSegmentPath() string {
    return "ipv6-multi-hop-summary"
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv6MultiHopSummary.SessionState
    }
    return nil
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv6MultiHopSummary.SessionState
    return children
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetYangName() string { return "ipv6-multi-hop-summary" }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) SetParent(parent types.Entity) { ipv6MultiHopSummary.parent = parent }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetParent() types.Entity { return ipv6MultiHopSummary.parent }

func (ipv6MultiHopSummary *Bfd_Ipv6MultiHopSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv6MultiHopSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv6MultiHopSummary_SessionState) GetParentYangName() string { return "ipv6-multi-hop-summary" }

// Bfd_LabelSummaryNodes
// Table of summary about Label BFD sessions for
// location
type Bfd_LabelSummaryNodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of Label BFD . The type is slice of
    // Bfd_LabelSummaryNodes_LabelSummaryNode.
    LabelSummaryNode []Bfd_LabelSummaryNodes_LabelSummaryNode
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetFilter() yfilter.YFilter { return labelSummaryNodes.YFilter }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) SetFilter(yf yfilter.YFilter) { labelSummaryNodes.YFilter = yf }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetGoName(yname string) string {
    if yname == "label-summary-node" { return "LabelSummaryNode" }
    return ""
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetSegmentPath() string {
    return "label-summary-nodes"
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-summary-node" {
        for _, c := range labelSummaryNodes.LabelSummaryNode {
            if labelSummaryNodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSummaryNodes_LabelSummaryNode{}
        labelSummaryNodes.LabelSummaryNode = append(labelSummaryNodes.LabelSummaryNode, child)
        return &labelSummaryNodes.LabelSummaryNode[len(labelSummaryNodes.LabelSummaryNode)-1]
    }
    return nil
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSummaryNodes.LabelSummaryNode {
        children[labelSummaryNodes.LabelSummaryNode[i].GetSegmentPath()] = &labelSummaryNodes.LabelSummaryNode[i]
    }
    return children
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetYangName() string { return "label-summary-nodes" }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) SetParent(parent types.Entity) { labelSummaryNodes.parent = parent }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetParent() types.Entity { return labelSummaryNodes.parent }

func (labelSummaryNodes *Bfd_LabelSummaryNodes) GetParentYangName() string { return "bfd" }

// Bfd_LabelSummaryNodes_LabelSummaryNode
// Summary of Label BFD 
type Bfd_LabelSummaryNodes_LabelSummaryNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    LocationName interface{}

    // Statistics of states for sessions.
    SessionState Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetFilter() yfilter.YFilter { return labelSummaryNode.YFilter }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) SetFilter(yf yfilter.YFilter) { labelSummaryNode.YFilter = yf }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetGoName(yname string) string {
    if yname == "location-name" { return "LocationName" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetSegmentPath() string {
    return "label-summary-node" + "[location-name='" + fmt.Sprintf("%v", labelSummaryNode.LocationName) + "']"
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &labelSummaryNode.SessionState
    }
    return nil
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &labelSummaryNode.SessionState
    return children
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location-name"] = labelSummaryNode.LocationName
    return leafs
}

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetBundleName() string { return "cisco_ios_xr" }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetYangName() string { return "label-summary-node" }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) SetParent(parent types.Entity) { labelSummaryNode.parent = parent }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetParent() types.Entity { return labelSummaryNode.parent }

func (labelSummaryNode *Bfd_LabelSummaryNodes_LabelSummaryNode) GetParentYangName() string { return "label-summary-nodes" }

// Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState
// Statistics of states for sessions
type Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_LabelSummaryNodes_LabelSummaryNode_SessionState) GetParentYangName() string { return "label-summary-node" }

// Bfd_Ipv6MultiHopSessionBriefs
// Table of brief information about all IPv6
// multihop BFD sessions in the System
type Bfd_Ipv6MultiHopSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv6 multihop BFD session. The type is slice
    // of Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief.
    Ipv6MultiHopSessionBrief []Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetFilter() yfilter.YFilter { return ipv6MultiHopSessionBriefs.YFilter }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv6MultiHopSessionBriefs.YFilter = yf }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-session-brief" { return "Ipv6MultiHopSessionBrief" }
    return ""
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetSegmentPath() string {
    return "ipv6-multi-hop-session-briefs"
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-session-brief" {
        for _, c := range ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief {
            if ipv6MultiHopSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief{}
        ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief = append(ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief, child)
        return &ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief[len(ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief)-1]
    }
    return nil
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief {
        children[ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief[i].GetSegmentPath()] = &ipv6MultiHopSessionBriefs.Ipv6MultiHopSessionBrief[i]
    }
    return children
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetYangName() string { return "ipv6-multi-hop-session-briefs" }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) SetParent(parent types.Entity) { ipv6MultiHopSessionBriefs.parent = parent }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetParent() types.Entity { return ipv6MultiHopSessionBriefs.parent }

func (ipv6MultiHopSessionBriefs *Bfd_Ipv6MultiHopSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief
// Brief information for a single IPv6 multihop
// BFD session
type Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetFilter() yfilter.YFilter { return ipv6MultiHopSessionBrief.YFilter }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) SetFilter(yf yfilter.YFilter) { ipv6MultiHopSessionBrief.YFilter = yf }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetSegmentPath() string {
    return "ipv6-multi-hop-session-brief"
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv6MultiHopSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv6MultiHopSessionBrief.StatusBriefInformation
    return children
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv6MultiHopSessionBrief.SourceAddress
    leafs["destination-address"] = ipv6MultiHopSessionBrief.DestinationAddress
    leafs["location"] = ipv6MultiHopSessionBrief.Location
    leafs["vrf-name"] = ipv6MultiHopSessionBrief.VrfName
    leafs["node-id"] = ipv6MultiHopSessionBrief.NodeId
    leafs["state"] = ipv6MultiHopSessionBrief.State
    leafs["session-type"] = ipv6MultiHopSessionBrief.SessionType
    leafs["session-subtype"] = ipv6MultiHopSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv6MultiHopSessionBrief.SessionFlags
    return leafs
}

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetYangName() string { return "ipv6-multi-hop-session-brief" }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) SetParent(parent types.Entity) { ipv6MultiHopSessionBrief.parent = parent }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetParent() types.Entity { return ipv6MultiHopSessionBrief.parent }

func (ipv6MultiHopSessionBrief *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief) GetParentYangName() string { return "ipv6-multi-hop-session-briefs" }

// Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv6-multi-hop-session-brief" }

// Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv6MultiHopSessionBriefs_Ipv6MultiHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_SessionBriefs
// Table of brief information about singlehop IPv4
// BFD sessions in the System
type Bfd_SessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv4 singlehop BFD session. The type is
    // slice of Bfd_SessionBriefs_SessionBrief.
    SessionBrief []Bfd_SessionBriefs_SessionBrief
}

func (sessionBriefs *Bfd_SessionBriefs) GetFilter() yfilter.YFilter { return sessionBriefs.YFilter }

func (sessionBriefs *Bfd_SessionBriefs) SetFilter(yf yfilter.YFilter) { sessionBriefs.YFilter = yf }

func (sessionBriefs *Bfd_SessionBriefs) GetGoName(yname string) string {
    if yname == "session-brief" { return "SessionBrief" }
    return ""
}

func (sessionBriefs *Bfd_SessionBriefs) GetSegmentPath() string {
    return "session-briefs"
}

func (sessionBriefs *Bfd_SessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-brief" {
        for _, c := range sessionBriefs.SessionBrief {
            if sessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionBriefs_SessionBrief{}
        sessionBriefs.SessionBrief = append(sessionBriefs.SessionBrief, child)
        return &sessionBriefs.SessionBrief[len(sessionBriefs.SessionBrief)-1]
    }
    return nil
}

func (sessionBriefs *Bfd_SessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionBriefs.SessionBrief {
        children[sessionBriefs.SessionBrief[i].GetSegmentPath()] = &sessionBriefs.SessionBrief[i]
    }
    return children
}

func (sessionBriefs *Bfd_SessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionBriefs *Bfd_SessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBriefs *Bfd_SessionBriefs) GetYangName() string { return "session-briefs" }

func (sessionBriefs *Bfd_SessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBriefs *Bfd_SessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBriefs *Bfd_SessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBriefs *Bfd_SessionBriefs) SetParent(parent types.Entity) { sessionBriefs.parent = parent }

func (sessionBriefs *Bfd_SessionBriefs) GetParent() types.Entity { return sessionBriefs.parent }

func (sessionBriefs *Bfd_SessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_SessionBriefs_SessionBrief
// Brief information for a single IPv4 singlehop
// BFD session
type Bfd_SessionBriefs_SessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_SessionBriefs_SessionBrief_StatusBriefInformation
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetFilter() yfilter.YFilter { return sessionBrief.YFilter }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) SetFilter(yf yfilter.YFilter) { sessionBrief.YFilter = yf }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetSegmentPath() string {
    return "session-brief"
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &sessionBrief.StatusBriefInformation
    }
    return nil
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &sessionBrief.StatusBriefInformation
    return children
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = sessionBrief.InterfaceName
    leafs["destination-address"] = sessionBrief.DestinationAddress
    leafs["location"] = sessionBrief.Location
    leafs["node-id"] = sessionBrief.NodeId
    leafs["state"] = sessionBrief.State
    leafs["session-type"] = sessionBrief.SessionType
    leafs["session-subtype"] = sessionBrief.SessionSubtype
    leafs["session-flags"] = sessionBrief.SessionFlags
    return leafs
}

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetYangName() string { return "session-brief" }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) SetParent(parent types.Entity) { sessionBrief.parent = parent }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetParent() types.Entity { return sessionBrief.parent }

func (sessionBrief *Bfd_SessionBriefs_SessionBrief) GetParentYangName() string { return "session-briefs" }

// Bfd_SessionBriefs_SessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_SessionBriefs_SessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation) GetParentYangName() string { return "session-brief" }

// Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_SessionBriefs_SessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6SingleHopNodeLocationSummaries
// Table of summary information about BFD IPv6
// singlehop sessions per location
type Bfd_Ipv6SingleHopNodeLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv6 singlehop sessions for location. The type
    // is slice of
    // Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary.
    Ipv6SingleHopNodeLocationSummary []Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetFilter() yfilter.YFilter { return ipv6SingleHopNodeLocationSummaries.YFilter }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv6SingleHopNodeLocationSummaries.YFilter = yf }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-node-location-summary" { return "Ipv6SingleHopNodeLocationSummary" }
    return ""
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetSegmentPath() string {
    return "ipv6-single-hop-node-location-summaries"
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-node-location-summary" {
        for _, c := range ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary {
            if ipv6SingleHopNodeLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary{}
        ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary = append(ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary, child)
        return &ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary[len(ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary)-1]
    }
    return nil
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary {
        children[ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary[i].GetSegmentPath()] = &ipv6SingleHopNodeLocationSummaries.Ipv6SingleHopNodeLocationSummary[i]
    }
    return children
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetYangName() string { return "ipv6-single-hop-node-location-summaries" }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) SetParent(parent types.Entity) { ipv6SingleHopNodeLocationSummaries.parent = parent }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetParent() types.Entity { return ipv6SingleHopNodeLocationSummaries.parent }

func (ipv6SingleHopNodeLocationSummaries *Bfd_Ipv6SingleHopNodeLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary
// Summary information for BFD IPv6 singlehop
// sessions for location
type Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetFilter() yfilter.YFilter { return ipv6SingleHopNodeLocationSummary.YFilter }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) SetFilter(yf yfilter.YFilter) { ipv6SingleHopNodeLocationSummary.YFilter = yf }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetGoName(yname string) string {
    if yname == "location" { return "Location" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetSegmentPath() string {
    return "ipv6-single-hop-node-location-summary" + "[location='" + fmt.Sprintf("%v", ipv6SingleHopNodeLocationSummary.Location) + "']"
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv6SingleHopNodeLocationSummary.SessionState
    }
    return nil
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv6SingleHopNodeLocationSummary.SessionState
    return children
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location"] = ipv6SingleHopNodeLocationSummary.Location
    return leafs
}

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetYangName() string { return "ipv6-single-hop-node-location-summary" }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) SetParent(parent types.Entity) { ipv6SingleHopNodeLocationSummary.parent = parent }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetParent() types.Entity { return ipv6SingleHopNodeLocationSummary.parent }

func (ipv6SingleHopNodeLocationSummary *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary) GetParentYangName() string { return "ipv6-single-hop-node-location-summaries" }

// Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv6SingleHopNodeLocationSummaries_Ipv6SingleHopNodeLocationSummary_SessionState) GetParentYangName() string { return "ipv6-single-hop-node-location-summary" }

// Bfd_Summary
// Summary information of BFD IPv4 singlehop
// sessions
type Bfd_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Summary_SessionState
}

func (summary *Bfd_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Bfd_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Bfd_Summary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (summary *Bfd_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Bfd_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &summary.SessionState
    }
    return nil
}

func (summary *Bfd_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &summary.SessionState
    return children
}

func (summary *Bfd_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Bfd_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Bfd_Summary) GetYangName() string { return "summary" }

func (summary *Bfd_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Bfd_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Bfd_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Bfd_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Bfd_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Bfd_Summary) GetParentYangName() string { return "bfd" }

// Bfd_Summary_SessionState
// Statistics of states for sessions
type Bfd_Summary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Summary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Summary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Summary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Summary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Summary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Summary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Summary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Summary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Summary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Summary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Summary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Summary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Summary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Summary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Summary_SessionState) GetParentYangName() string { return "summary" }

// Bfd_Ipv4BfdMplsteTailNodeSummaries
// Table of summary about IPv4 TE tail BFD sessions
// for location
type Bfd_Ipv4BfdMplsteTailNodeSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of IPv4 BFD over MPLS-TE tail. The type is slice of
    // Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary.
    Ipv4BfdMplsteTailNodeSummary []Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetFilter() yfilter.YFilter { return ipv4BfdMplsteTailNodeSummaries.YFilter }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) SetFilter(yf yfilter.YFilter) { ipv4BfdMplsteTailNodeSummaries.YFilter = yf }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetGoName(yname string) string {
    if yname == "ipv4bfd-mplste-tail-node-summary" { return "Ipv4BfdMplsteTailNodeSummary" }
    return ""
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetSegmentPath() string {
    return "ipv4bfd-mplste-tail-node-summaries"
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bfd-mplste-tail-node-summary" {
        for _, c := range ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary {
            if ipv4BfdMplsteTailNodeSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary{}
        ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary = append(ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary, child)
        return &ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary[len(ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary)-1]
    }
    return nil
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary {
        children[ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary[i].GetSegmentPath()] = &ipv4BfdMplsteTailNodeSummaries.Ipv4BfdMplsteTailNodeSummary[i]
    }
    return children
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetYangName() string { return "ipv4bfd-mplste-tail-node-summaries" }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) SetParent(parent types.Entity) { ipv4BfdMplsteTailNodeSummaries.parent = parent }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetParent() types.Entity { return ipv4BfdMplsteTailNodeSummaries.parent }

func (ipv4BfdMplsteTailNodeSummaries *Bfd_Ipv4BfdMplsteTailNodeSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary
// Summary of IPv4 BFD over MPLS-TE tail
type Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    LocationName interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetFilter() yfilter.YFilter { return ipv4BfdMplsteTailNodeSummary.YFilter }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) SetFilter(yf yfilter.YFilter) { ipv4BfdMplsteTailNodeSummary.YFilter = yf }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetGoName(yname string) string {
    if yname == "location-name" { return "LocationName" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetSegmentPath() string {
    return "ipv4bfd-mplste-tail-node-summary" + "[location-name='" + fmt.Sprintf("%v", ipv4BfdMplsteTailNodeSummary.LocationName) + "']"
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4BfdMplsteTailNodeSummary.SessionState
    }
    return nil
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4BfdMplsteTailNodeSummary.SessionState
    return children
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location-name"] = ipv4BfdMplsteTailNodeSummary.LocationName
    return leafs
}

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetYangName() string { return "ipv4bfd-mplste-tail-node-summary" }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) SetParent(parent types.Entity) { ipv4BfdMplsteTailNodeSummary.parent = parent }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetParent() types.Entity { return ipv4BfdMplsteTailNodeSummary.parent }

func (ipv4BfdMplsteTailNodeSummary *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary) GetParentYangName() string { return "ipv4bfd-mplste-tail-node-summaries" }

// Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4BfdMplsteTailNodeSummaries_Ipv4BfdMplsteTailNodeSummary_SessionState) GetParentYangName() string { return "ipv4bfd-mplste-tail-node-summary" }

// Bfd_Ipv4SingleHopLocationSummaries
// Table of summary information about IPv4
// singlehop BFD sessions for location
type Bfd_Ipv4SingleHopLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv4 singlehop sessions for location. The type
    // is slice of
    // Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary.
    Ipv4SingleHopLocationSummary []Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetFilter() yfilter.YFilter { return ipv4SingleHopLocationSummaries.YFilter }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv4SingleHopLocationSummaries.YFilter = yf }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-location-summary" { return "Ipv4SingleHopLocationSummary" }
    return ""
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetSegmentPath() string {
    return "ipv4-single-hop-location-summaries"
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-location-summary" {
        for _, c := range ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary {
            if ipv4SingleHopLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary{}
        ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary = append(ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary, child)
        return &ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary[len(ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary)-1]
    }
    return nil
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary {
        children[ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary[i].GetSegmentPath()] = &ipv4SingleHopLocationSummaries.Ipv4SingleHopLocationSummary[i]
    }
    return children
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetYangName() string { return "ipv4-single-hop-location-summaries" }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) SetParent(parent types.Entity) { ipv4SingleHopLocationSummaries.parent = parent }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetParent() types.Entity { return ipv4SingleHopLocationSummaries.parent }

func (ipv4SingleHopLocationSummaries *Bfd_Ipv4SingleHopLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary
// Summary information for BFD IPv4 singlehop
// sessions for location
type Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    LocationName interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetFilter() yfilter.YFilter { return ipv4SingleHopLocationSummary.YFilter }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) SetFilter(yf yfilter.YFilter) { ipv4SingleHopLocationSummary.YFilter = yf }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetGoName(yname string) string {
    if yname == "location-name" { return "LocationName" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetSegmentPath() string {
    return "ipv4-single-hop-location-summary" + "[location-name='" + fmt.Sprintf("%v", ipv4SingleHopLocationSummary.LocationName) + "']"
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4SingleHopLocationSummary.SessionState
    }
    return nil
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4SingleHopLocationSummary.SessionState
    return children
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location-name"] = ipv4SingleHopLocationSummary.LocationName
    return leafs
}

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetYangName() string { return "ipv4-single-hop-location-summary" }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) SetParent(parent types.Entity) { ipv4SingleHopLocationSummary.parent = parent }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetParent() types.Entity { return ipv4SingleHopLocationSummary.parent }

func (ipv4SingleHopLocationSummary *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary) GetParentYangName() string { return "ipv4-single-hop-location-summaries" }

// Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4SingleHopLocationSummaries_Ipv4SingleHopLocationSummary_SessionState) GetParentYangName() string { return "ipv4-single-hop-location-summary" }

// Bfd_Ipv4BfdMplsteHeadSummaryNodes
// Table of summary about IPv4 TE head BFD sessions
// for location
type Bfd_Ipv4BfdMplsteHeadSummaryNodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of IPv4 BFD over MPLS-TE head. The type is slice of
    // Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode.
    Ipv4BfdMplsteHeadSummaryNode []Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetFilter() yfilter.YFilter { return ipv4BfdMplsteHeadSummaryNodes.YFilter }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) SetFilter(yf yfilter.YFilter) { ipv4BfdMplsteHeadSummaryNodes.YFilter = yf }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetGoName(yname string) string {
    if yname == "ipv4bfd-mplste-head-summary-node" { return "Ipv4BfdMplsteHeadSummaryNode" }
    return ""
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetSegmentPath() string {
    return "ipv4bfd-mplste-head-summary-nodes"
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bfd-mplste-head-summary-node" {
        for _, c := range ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode {
            if ipv4BfdMplsteHeadSummaryNodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode{}
        ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode = append(ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode, child)
        return &ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode[len(ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode)-1]
    }
    return nil
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode {
        children[ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode[i].GetSegmentPath()] = &ipv4BfdMplsteHeadSummaryNodes.Ipv4BfdMplsteHeadSummaryNode[i]
    }
    return children
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetYangName() string { return "ipv4bfd-mplste-head-summary-nodes" }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) SetParent(parent types.Entity) { ipv4BfdMplsteHeadSummaryNodes.parent = parent }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetParent() types.Entity { return ipv4BfdMplsteHeadSummaryNodes.parent }

func (ipv4BfdMplsteHeadSummaryNodes *Bfd_Ipv4BfdMplsteHeadSummaryNodes) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode
// Summary of IPv4 BFD over MPLS-TE head
type Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    LocationName interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetFilter() yfilter.YFilter { return ipv4BfdMplsteHeadSummaryNode.YFilter }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) SetFilter(yf yfilter.YFilter) { ipv4BfdMplsteHeadSummaryNode.YFilter = yf }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetGoName(yname string) string {
    if yname == "location-name" { return "LocationName" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetSegmentPath() string {
    return "ipv4bfd-mplste-head-summary-node" + "[location-name='" + fmt.Sprintf("%v", ipv4BfdMplsteHeadSummaryNode.LocationName) + "']"
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4BfdMplsteHeadSummaryNode.SessionState
    }
    return nil
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4BfdMplsteHeadSummaryNode.SessionState
    return children
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location-name"] = ipv4BfdMplsteHeadSummaryNode.LocationName
    return leafs
}

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetYangName() string { return "ipv4bfd-mplste-head-summary-node" }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) SetParent(parent types.Entity) { ipv4BfdMplsteHeadSummaryNode.parent = parent }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetParent() types.Entity { return ipv4BfdMplsteHeadSummaryNode.parent }

func (ipv4BfdMplsteHeadSummaryNode *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode) GetParentYangName() string { return "ipv4bfd-mplste-head-summary-nodes" }

// Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState
// Statistics of states for sessions
type Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4BfdMplsteHeadSummaryNodes_Ipv4BfdMplsteHeadSummaryNode_SessionState) GetParentYangName() string { return "ipv4bfd-mplste-head-summary-node" }

// Bfd_LabelSessionDetails
// Table of detailed information about all Label
// BFD sessions in the System 
type Bfd_LabelSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single BFD session. The type is slice of
    // Bfd_LabelSessionDetails_LabelSessionDetail.
    LabelSessionDetail []Bfd_LabelSessionDetails_LabelSessionDetail
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetFilter() yfilter.YFilter { return labelSessionDetails.YFilter }

func (labelSessionDetails *Bfd_LabelSessionDetails) SetFilter(yf yfilter.YFilter) { labelSessionDetails.YFilter = yf }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetGoName(yname string) string {
    if yname == "label-session-detail" { return "LabelSessionDetail" }
    return ""
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetSegmentPath() string {
    return "label-session-details"
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-session-detail" {
        for _, c := range labelSessionDetails.LabelSessionDetail {
            if labelSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSessionDetails_LabelSessionDetail{}
        labelSessionDetails.LabelSessionDetail = append(labelSessionDetails.LabelSessionDetail, child)
        return &labelSessionDetails.LabelSessionDetail[len(labelSessionDetails.LabelSessionDetail)-1]
    }
    return nil
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelSessionDetails.LabelSessionDetail {
        children[labelSessionDetails.LabelSessionDetail[i].GetSegmentPath()] = &labelSessionDetails.LabelSessionDetail[i]
    }
    return children
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelSessionDetails *Bfd_LabelSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetYangName() string { return "label-session-details" }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSessionDetails *Bfd_LabelSessionDetails) SetParent(parent types.Entity) { labelSessionDetails.parent = parent }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetParent() types.Entity { return labelSessionDetails.parent }

func (labelSessionDetails *Bfd_LabelSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_LabelSessionDetails_LabelSessionDetail
// Detailed information for a single BFD session
type Bfd_LabelSessionDetails_LabelSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetFilter() yfilter.YFilter { return labelSessionDetail.YFilter }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) SetFilter(yf yfilter.YFilter) { labelSessionDetail.YFilter = yf }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetSegmentPath() string {
    return "label-session-detail"
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &labelSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &labelSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &labelSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range labelSessionDetail.OwnerInformation {
            if labelSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation{}
        labelSessionDetail.OwnerInformation = append(labelSessionDetail.OwnerInformation, child)
        return &labelSessionDetail.OwnerInformation[len(labelSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range labelSessionDetail.AssociationInformation {
            if labelSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation{}
        labelSessionDetail.AssociationInformation = append(labelSessionDetail.AssociationInformation, child)
        return &labelSessionDetail.AssociationInformation[len(labelSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &labelSessionDetail.StatusInformation
    children["mp-download-state"] = &labelSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &labelSessionDetail.LspPingInfo
    for i := range labelSessionDetail.OwnerInformation {
        children[labelSessionDetail.OwnerInformation[i].GetSegmentPath()] = &labelSessionDetail.OwnerInformation[i]
    }
    for i := range labelSessionDetail.AssociationInformation {
        children[labelSessionDetail.AssociationInformation[i].GetSegmentPath()] = &labelSessionDetail.AssociationInformation[i]
    }
    return children
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = labelSessionDetail.InterfaceName
    leafs["incoming-label"] = labelSessionDetail.IncomingLabel
    leafs["location"] = labelSessionDetail.Location
    return leafs
}

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetYangName() string { return "label-session-detail" }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) SetParent(parent types.Entity) { labelSessionDetail.parent = parent }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetParent() types.Entity { return labelSessionDetail.parent }

func (labelSessionDetail *Bfd_LabelSessionDetails_LabelSessionDetail) GetParentYangName() string { return "label-session-details" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation
// Session status information
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation) GetParentYangName() string { return "label-session-detail" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_LabelSessionDetails_LabelSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState) GetParentYangName() string { return "label-session-detail" }

// Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_LabelSessionDetails_LabelSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo) GetParentYangName() string { return "label-session-detail" }

// Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_LabelSessionDetails_LabelSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_OwnerInformation) GetParentYangName() string { return "label-session-detail" }

// Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation
// Association session information
type Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation) GetParentYangName() string { return "label-session-detail" }

// Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_LabelSessionDetails_LabelSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv6SingleHopSessionDetails
// Table of detailed information about all IPv6
// singlehop BFD sessions in the System 
type Bfd_Ipv6SingleHopSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv6 singlehop BFD session. The type is
    // slice of Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail.
    Ipv6SingleHopSessionDetail []Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetFilter() yfilter.YFilter { return ipv6SingleHopSessionDetails.YFilter }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) SetFilter(yf yfilter.YFilter) { ipv6SingleHopSessionDetails.YFilter = yf }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-session-detail" { return "Ipv6SingleHopSessionDetail" }
    return ""
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetSegmentPath() string {
    return "ipv6-single-hop-session-details"
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-session-detail" {
        for _, c := range ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail {
            if ipv6SingleHopSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail{}
        ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail = append(ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail, child)
        return &ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail[len(ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail)-1]
    }
    return nil
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail {
        children[ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail[i].GetSegmentPath()] = &ipv6SingleHopSessionDetails.Ipv6SingleHopSessionDetail[i]
    }
    return children
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetYangName() string { return "ipv6-single-hop-session-details" }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) SetParent(parent types.Entity) { ipv6SingleHopSessionDetails.parent = parent }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetParent() types.Entity { return ipv6SingleHopSessionDetails.parent }

func (ipv6SingleHopSessionDetails *Bfd_Ipv6SingleHopSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail
// Detailed information for a single IPv6
// singlehop BFD session
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetFilter() yfilter.YFilter { return ipv6SingleHopSessionDetail.YFilter }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) SetFilter(yf yfilter.YFilter) { ipv6SingleHopSessionDetail.YFilter = yf }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetSegmentPath() string {
    return "ipv6-single-hop-session-detail"
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv6SingleHopSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv6SingleHopSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv6SingleHopSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv6SingleHopSessionDetail.OwnerInformation {
            if ipv6SingleHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation{}
        ipv6SingleHopSessionDetail.OwnerInformation = append(ipv6SingleHopSessionDetail.OwnerInformation, child)
        return &ipv6SingleHopSessionDetail.OwnerInformation[len(ipv6SingleHopSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv6SingleHopSessionDetail.AssociationInformation {
            if ipv6SingleHopSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation{}
        ipv6SingleHopSessionDetail.AssociationInformation = append(ipv6SingleHopSessionDetail.AssociationInformation, child)
        return &ipv6SingleHopSessionDetail.AssociationInformation[len(ipv6SingleHopSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv6SingleHopSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv6SingleHopSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv6SingleHopSessionDetail.LspPingInfo
    for i := range ipv6SingleHopSessionDetail.OwnerInformation {
        children[ipv6SingleHopSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv6SingleHopSessionDetail.OwnerInformation[i]
    }
    for i := range ipv6SingleHopSessionDetail.AssociationInformation {
        children[ipv6SingleHopSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv6SingleHopSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv6SingleHopSessionDetail.InterfaceName
    leafs["destination-address"] = ipv6SingleHopSessionDetail.DestinationAddress
    leafs["location"] = ipv6SingleHopSessionDetail.Location
    return leafs
}

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetYangName() string { return "ipv6-single-hop-session-detail" }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) SetParent(parent types.Entity) { ipv6SingleHopSessionDetail.parent = parent }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetParent() types.Entity { return ipv6SingleHopSessionDetail.parent }

func (ipv6SingleHopSessionDetail *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail) GetParentYangName() string { return "ipv6-single-hop-session-details" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation) GetParentYangName() string { return "ipv6-single-hop-session-detail" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv6-single-hop-session-detail" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv6-single-hop-session-detail" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv6-single-hop-session-detail" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv6-single-hop-session-detail" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv6SingleHopSessionDetails_Ipv6SingleHopSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4MultiHopCounters
// IPv4 multiple hop Counters
type Bfd_Ipv4MultiHopCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv4 multiple hop Packet counters.
    Ipv4MultiHopPacketCounters Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetFilter() yfilter.YFilter { return ipv4MultiHopCounters.YFilter }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) SetFilter(yf yfilter.YFilter) { ipv4MultiHopCounters.YFilter = yf }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-packet-counters" { return "Ipv4MultiHopPacketCounters" }
    return ""
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetSegmentPath() string {
    return "ipv4-multi-hop-counters"
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-packet-counters" {
        return &ipv4MultiHopCounters.Ipv4MultiHopPacketCounters
    }
    return nil
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4-multi-hop-packet-counters"] = &ipv4MultiHopCounters.Ipv4MultiHopPacketCounters
    return children
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetYangName() string { return "ipv4-multi-hop-counters" }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) SetParent(parent types.Entity) { ipv4MultiHopCounters.parent = parent }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetParent() types.Entity { return ipv4MultiHopCounters.parent }

func (ipv4MultiHopCounters *Bfd_Ipv4MultiHopCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters
// Table of IPv4 multiple hop Packet counters
type Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 multiple hop Packet counters. The type is slice of
    // Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter.
    Ipv4MultiHopPacketCounter []Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetFilter() yfilter.YFilter { return ipv4MultiHopPacketCounters.YFilter }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) SetFilter(yf yfilter.YFilter) { ipv4MultiHopPacketCounters.YFilter = yf }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-packet-counter" { return "Ipv4MultiHopPacketCounter" }
    return ""
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetSegmentPath() string {
    return "ipv4-multi-hop-packet-counters"
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-packet-counter" {
        for _, c := range ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter {
            if ipv4MultiHopPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter{}
        ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter = append(ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter, child)
        return &ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter[len(ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter)-1]
    }
    return nil
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter {
        children[ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter[i].GetSegmentPath()] = &ipv4MultiHopPacketCounters.Ipv4MultiHopPacketCounter[i]
    }
    return children
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetYangName() string { return "ipv4-multi-hop-packet-counters" }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) SetParent(parent types.Entity) { ipv4MultiHopPacketCounters.parent = parent }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetParent() types.Entity { return ipv4MultiHopPacketCounters.parent }

func (ipv4MultiHopPacketCounters *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters) GetParentYangName() string { return "ipv4-multi-hop-counters" }

// Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter
// IPv4 multiple hop Packet counters
type Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetFilter() yfilter.YFilter { return ipv4MultiHopPacketCounter.YFilter }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) SetFilter(yf yfilter.YFilter) { ipv4MultiHopPacketCounter.YFilter = yf }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetSegmentPath() string {
    return "ipv4-multi-hop-packet-counter"
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv4MultiHopPacketCounter.SourceAddress
    leafs["destination-address"] = ipv4MultiHopPacketCounter.DestinationAddress
    leafs["location"] = ipv4MultiHopPacketCounter.Location
    leafs["vrf-name"] = ipv4MultiHopPacketCounter.VrfName
    leafs["hello-transmit-count"] = ipv4MultiHopPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv4MultiHopPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv4MultiHopPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv4MultiHopPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv4MultiHopPacketCounter.DisplayType
    return leafs
}

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetYangName() string { return "ipv4-multi-hop-packet-counter" }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) SetParent(parent types.Entity) { ipv4MultiHopPacketCounter.parent = parent }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetParent() types.Entity { return ipv4MultiHopPacketCounter.parent }

func (ipv4MultiHopPacketCounter *Bfd_Ipv4MultiHopCounters_Ipv4MultiHopPacketCounters_Ipv4MultiHopPacketCounter) GetParentYangName() string { return "ipv4-multi-hop-packet-counters" }

// Bfd_SessionDetails
// Table of detailed information about IPv4
// singlehop BFD sessions in the System 
type Bfd_SessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv4 singlehop BFD session. The type is
    // slice of Bfd_SessionDetails_SessionDetail.
    SessionDetail []Bfd_SessionDetails_SessionDetail
}

func (sessionDetails *Bfd_SessionDetails) GetFilter() yfilter.YFilter { return sessionDetails.YFilter }

func (sessionDetails *Bfd_SessionDetails) SetFilter(yf yfilter.YFilter) { sessionDetails.YFilter = yf }

func (sessionDetails *Bfd_SessionDetails) GetGoName(yname string) string {
    if yname == "session-detail" { return "SessionDetail" }
    return ""
}

func (sessionDetails *Bfd_SessionDetails) GetSegmentPath() string {
    return "session-details"
}

func (sessionDetails *Bfd_SessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-detail" {
        for _, c := range sessionDetails.SessionDetail {
            if sessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionDetails_SessionDetail{}
        sessionDetails.SessionDetail = append(sessionDetails.SessionDetail, child)
        return &sessionDetails.SessionDetail[len(sessionDetails.SessionDetail)-1]
    }
    return nil
}

func (sessionDetails *Bfd_SessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionDetails.SessionDetail {
        children[sessionDetails.SessionDetail[i].GetSegmentPath()] = &sessionDetails.SessionDetail[i]
    }
    return children
}

func (sessionDetails *Bfd_SessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionDetails *Bfd_SessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetails *Bfd_SessionDetails) GetYangName() string { return "session-details" }

func (sessionDetails *Bfd_SessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetails *Bfd_SessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetails *Bfd_SessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetails *Bfd_SessionDetails) SetParent(parent types.Entity) { sessionDetails.parent = parent }

func (sessionDetails *Bfd_SessionDetails) GetParent() types.Entity { return sessionDetails.parent }

func (sessionDetails *Bfd_SessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_SessionDetails_SessionDetail
// Detailed information for a single IPv4
// singlehop BFD session
type Bfd_SessionDetails_SessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_SessionDetails_SessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_SessionDetails_SessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_SessionDetails_SessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_SessionDetails_SessionDetail_OwnerInformation.
    OwnerInformation []Bfd_SessionDetails_SessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_SessionDetails_SessionDetail_AssociationInformation.
    AssociationInformation []Bfd_SessionDetails_SessionDetail_AssociationInformation
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetFilter() yfilter.YFilter { return sessionDetail.YFilter }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) SetFilter(yf yfilter.YFilter) { sessionDetail.YFilter = yf }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetSegmentPath() string {
    return "session-detail"
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &sessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &sessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &sessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range sessionDetail.OwnerInformation {
            if sessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionDetails_SessionDetail_OwnerInformation{}
        sessionDetail.OwnerInformation = append(sessionDetail.OwnerInformation, child)
        return &sessionDetail.OwnerInformation[len(sessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range sessionDetail.AssociationInformation {
            if sessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionDetails_SessionDetail_AssociationInformation{}
        sessionDetail.AssociationInformation = append(sessionDetail.AssociationInformation, child)
        return &sessionDetail.AssociationInformation[len(sessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &sessionDetail.StatusInformation
    children["mp-download-state"] = &sessionDetail.MpDownloadState
    children["lsp-ping-info"] = &sessionDetail.LspPingInfo
    for i := range sessionDetail.OwnerInformation {
        children[sessionDetail.OwnerInformation[i].GetSegmentPath()] = &sessionDetail.OwnerInformation[i]
    }
    for i := range sessionDetail.AssociationInformation {
        children[sessionDetail.AssociationInformation[i].GetSegmentPath()] = &sessionDetail.AssociationInformation[i]
    }
    return children
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = sessionDetail.InterfaceName
    leafs["destination-address"] = sessionDetail.DestinationAddress
    leafs["location"] = sessionDetail.Location
    return leafs
}

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetYangName() string { return "session-detail" }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) SetParent(parent types.Entity) { sessionDetail.parent = parent }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetParent() types.Entity { return sessionDetail.parent }

func (sessionDetail *Bfd_SessionDetails_SessionDetail) GetParentYangName() string { return "session-details" }

// Bfd_SessionDetails_SessionDetail_StatusInformation
// Session status information
type Bfd_SessionDetails_SessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_SessionDetails_SessionDetail_StatusInformation) GetParentYangName() string { return "session-detail" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_SessionDetails_SessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_SessionDetails_SessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_SessionDetails_SessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_SessionDetails_SessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_SessionDetails_SessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_SessionDetails_SessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_SessionDetails_SessionDetail_MpDownloadState
// MP Dowload State
type Bfd_SessionDetails_SessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_SessionDetails_SessionDetail_MpDownloadState) GetParentYangName() string { return "session-detail" }

// Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_SessionDetails_SessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_SessionDetails_SessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_SessionDetails_SessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_SessionDetails_SessionDetail_LspPingInfo) GetParentYangName() string { return "session-detail" }

// Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_SessionDetails_SessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_SessionDetails_SessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_SessionDetails_SessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_OwnerInformation) GetParentYangName() string { return "session-detail" }

// Bfd_SessionDetails_SessionDetail_AssociationInformation
// Association session information
type Bfd_SessionDetails_SessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation) GetParentYangName() string { return "session-detail" }

// Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_SessionDetails_SessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_SessionDetails_SessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4SingleHopMultiPaths
// IPv4 single hop multipath
type Bfd_Ipv4SingleHopMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 single hop multipath table. The type is slice of
    // Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath.
    Ipv4SingleHopMultiPath []Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetFilter() yfilter.YFilter { return ipv4SingleHopMultiPaths.YFilter }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) SetFilter(yf yfilter.YFilter) { ipv4SingleHopMultiPaths.YFilter = yf }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-multi-path" { return "Ipv4SingleHopMultiPath" }
    return ""
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetSegmentPath() string {
    return "ipv4-single-hop-multi-paths"
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-multi-path" {
        for _, c := range ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath {
            if ipv4SingleHopMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath{}
        ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath = append(ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath, child)
        return &ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath[len(ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath)-1]
    }
    return nil
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath {
        children[ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath[i].GetSegmentPath()] = &ipv4SingleHopMultiPaths.Ipv4SingleHopMultiPath[i]
    }
    return children
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetYangName() string { return "ipv4-single-hop-multi-paths" }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) SetParent(parent types.Entity) { ipv4SingleHopMultiPaths.parent = parent }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetParent() types.Entity { return ipv4SingleHopMultiPaths.parent }

func (ipv4SingleHopMultiPaths *Bfd_Ipv4SingleHopMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath
// IPv4 single hop multipath table
type Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetFilter() yfilter.YFilter { return ipv4SingleHopMultiPath.YFilter }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) SetFilter(yf yfilter.YFilter) { ipv4SingleHopMultiPath.YFilter = yf }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetSegmentPath() string {
    return "ipv4-single-hop-multi-path"
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4SingleHopMultiPath.InterfaceName
    leafs["destination-address"] = ipv4SingleHopMultiPath.DestinationAddress
    leafs["location"] = ipv4SingleHopMultiPath.Location
    leafs["session-subtype"] = ipv4SingleHopMultiPath.SessionSubtype
    leafs["state"] = ipv4SingleHopMultiPath.State
    leafs["local-discriminator"] = ipv4SingleHopMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv4SingleHopMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv4SingleHopMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv4SingleHopMultiPath.SessionInterfaceName
    return leafs
}

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetYangName() string { return "ipv4-single-hop-multi-path" }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) SetParent(parent types.Entity) { ipv4SingleHopMultiPath.parent = parent }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetParent() types.Entity { return ipv4SingleHopMultiPath.parent }

func (ipv4SingleHopMultiPath *Bfd_Ipv4SingleHopMultiPaths_Ipv4SingleHopMultiPath) GetParentYangName() string { return "ipv4-single-hop-multi-paths" }

// Bfd_Ipv4SingleHopSessionBriefs
// Table of brief information about all IPv4
// singlehop BFD sessions in the System
type Bfd_Ipv4SingleHopSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv4 singlehop BFD session. The type is
    // slice of Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief.
    Ipv4SingleHopSessionBrief []Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetFilter() yfilter.YFilter { return ipv4SingleHopSessionBriefs.YFilter }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv4SingleHopSessionBriefs.YFilter = yf }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv4-single-hop-session-brief" { return "Ipv4SingleHopSessionBrief" }
    return ""
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetSegmentPath() string {
    return "ipv4-single-hop-session-briefs"
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-single-hop-session-brief" {
        for _, c := range ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief {
            if ipv4SingleHopSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief{}
        ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief = append(ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief, child)
        return &ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief[len(ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief)-1]
    }
    return nil
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief {
        children[ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief[i].GetSegmentPath()] = &ipv4SingleHopSessionBriefs.Ipv4SingleHopSessionBrief[i]
    }
    return children
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetYangName() string { return "ipv4-single-hop-session-briefs" }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) SetParent(parent types.Entity) { ipv4SingleHopSessionBriefs.parent = parent }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetParent() types.Entity { return ipv4SingleHopSessionBriefs.parent }

func (ipv4SingleHopSessionBriefs *Bfd_Ipv4SingleHopSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief
// Brief information for a single IPv4 singlehop
// BFD session
type Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetFilter() yfilter.YFilter { return ipv4SingleHopSessionBrief.YFilter }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) SetFilter(yf yfilter.YFilter) { ipv4SingleHopSessionBrief.YFilter = yf }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetSegmentPath() string {
    return "ipv4-single-hop-session-brief"
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv4SingleHopSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv4SingleHopSessionBrief.StatusBriefInformation
    return children
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4SingleHopSessionBrief.InterfaceName
    leafs["destination-address"] = ipv4SingleHopSessionBrief.DestinationAddress
    leafs["location"] = ipv4SingleHopSessionBrief.Location
    leafs["node-id"] = ipv4SingleHopSessionBrief.NodeId
    leafs["state"] = ipv4SingleHopSessionBrief.State
    leafs["session-type"] = ipv4SingleHopSessionBrief.SessionType
    leafs["session-subtype"] = ipv4SingleHopSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv4SingleHopSessionBrief.SessionFlags
    return leafs
}

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetYangName() string { return "ipv4-single-hop-session-brief" }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) SetParent(parent types.Entity) { ipv4SingleHopSessionBrief.parent = parent }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetParent() types.Entity { return ipv4SingleHopSessionBrief.parent }

func (ipv4SingleHopSessionBrief *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief) GetParentYangName() string { return "ipv4-single-hop-session-briefs" }

// Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv4-single-hop-session-brief" }

// Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4SingleHopSessionBriefs_Ipv4SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6MultiHopCounters
// IPv6 multiple hop Counters
type Bfd_Ipv6MultiHopCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv6 multiple hop Packet counters.
    Ipv6MultiHopPacketCounters Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetFilter() yfilter.YFilter { return ipv6MultiHopCounters.YFilter }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) SetFilter(yf yfilter.YFilter) { ipv6MultiHopCounters.YFilter = yf }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-packet-counters" { return "Ipv6MultiHopPacketCounters" }
    return ""
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetSegmentPath() string {
    return "ipv6-multi-hop-counters"
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-packet-counters" {
        return &ipv6MultiHopCounters.Ipv6MultiHopPacketCounters
    }
    return nil
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv6-multi-hop-packet-counters"] = &ipv6MultiHopCounters.Ipv6MultiHopPacketCounters
    return children
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetYangName() string { return "ipv6-multi-hop-counters" }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) SetParent(parent types.Entity) { ipv6MultiHopCounters.parent = parent }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetParent() types.Entity { return ipv6MultiHopCounters.parent }

func (ipv6MultiHopCounters *Bfd_Ipv6MultiHopCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters
// Table of IPv6 multiple hop Packet counters
type Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 multiple hop Packet counters. The type is slice of
    // Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter.
    Ipv6MultiHopPacketCounter []Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetFilter() yfilter.YFilter { return ipv6MultiHopPacketCounters.YFilter }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) SetFilter(yf yfilter.YFilter) { ipv6MultiHopPacketCounters.YFilter = yf }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetGoName(yname string) string {
    if yname == "ipv6-multi-hop-packet-counter" { return "Ipv6MultiHopPacketCounter" }
    return ""
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetSegmentPath() string {
    return "ipv6-multi-hop-packet-counters"
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-multi-hop-packet-counter" {
        for _, c := range ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter {
            if ipv6MultiHopPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter{}
        ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter = append(ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter, child)
        return &ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter[len(ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter)-1]
    }
    return nil
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter {
        children[ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter[i].GetSegmentPath()] = &ipv6MultiHopPacketCounters.Ipv6MultiHopPacketCounter[i]
    }
    return children
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetYangName() string { return "ipv6-multi-hop-packet-counters" }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) SetParent(parent types.Entity) { ipv6MultiHopPacketCounters.parent = parent }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetParent() types.Entity { return ipv6MultiHopPacketCounters.parent }

func (ipv6MultiHopPacketCounters *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters) GetParentYangName() string { return "ipv6-multi-hop-counters" }

// Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter
// IPv4 multiple hop Packet counters
type Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetFilter() yfilter.YFilter { return ipv6MultiHopPacketCounter.YFilter }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) SetFilter(yf yfilter.YFilter) { ipv6MultiHopPacketCounter.YFilter = yf }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetSegmentPath() string {
    return "ipv6-multi-hop-packet-counter"
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv6MultiHopPacketCounter.SourceAddress
    leafs["destination-address"] = ipv6MultiHopPacketCounter.DestinationAddress
    leafs["location"] = ipv6MultiHopPacketCounter.Location
    leafs["vrf-name"] = ipv6MultiHopPacketCounter.VrfName
    leafs["hello-transmit-count"] = ipv6MultiHopPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv6MultiHopPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv6MultiHopPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv6MultiHopPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv6MultiHopPacketCounter.DisplayType
    return leafs
}

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetYangName() string { return "ipv6-multi-hop-packet-counter" }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) SetParent(parent types.Entity) { ipv6MultiHopPacketCounter.parent = parent }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetParent() types.Entity { return ipv6MultiHopPacketCounter.parent }

func (ipv6MultiHopPacketCounter *Bfd_Ipv6MultiHopCounters_Ipv6MultiHopPacketCounters_Ipv6MultiHopPacketCounter) GetParentYangName() string { return "ipv6-multi-hop-packet-counters" }

// Bfd_Ipv6SingleHopLocationSummaries
// Table of summary information about BFD IPv6
// singlehop sessions per location
type Bfd_Ipv6SingleHopLocationSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary information for BFD IPv6 singlehop sessions for location. The type
    // is slice of
    // Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary.
    Ipv6SingleHopLocationSummary []Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetFilter() yfilter.YFilter { return ipv6SingleHopLocationSummaries.YFilter }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) SetFilter(yf yfilter.YFilter) { ipv6SingleHopLocationSummaries.YFilter = yf }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-location-summary" { return "Ipv6SingleHopLocationSummary" }
    return ""
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetSegmentPath() string {
    return "ipv6-single-hop-location-summaries"
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-location-summary" {
        for _, c := range ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary {
            if ipv6SingleHopLocationSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary{}
        ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary = append(ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary, child)
        return &ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary[len(ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary)-1]
    }
    return nil
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary {
        children[ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary[i].GetSegmentPath()] = &ipv6SingleHopLocationSummaries.Ipv6SingleHopLocationSummary[i]
    }
    return children
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetYangName() string { return "ipv6-single-hop-location-summaries" }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) SetParent(parent types.Entity) { ipv6SingleHopLocationSummaries.parent = parent }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetParent() types.Entity { return ipv6SingleHopLocationSummaries.parent }

func (ipv6SingleHopLocationSummaries *Bfd_Ipv6SingleHopLocationSummaries) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary
// Summary information for BFD IPv6 singlehop
// sessions for location
type Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Location Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    LocationName interface{}

    // Statistics of states for sessions.
    SessionState Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetFilter() yfilter.YFilter { return ipv6SingleHopLocationSummary.YFilter }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) SetFilter(yf yfilter.YFilter) { ipv6SingleHopLocationSummary.YFilter = yf }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetGoName(yname string) string {
    if yname == "location-name" { return "LocationName" }
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetSegmentPath() string {
    return "ipv6-single-hop-location-summary" + "[location-name='" + fmt.Sprintf("%v", ipv6SingleHopLocationSummary.LocationName) + "']"
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv6SingleHopLocationSummary.SessionState
    }
    return nil
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv6SingleHopLocationSummary.SessionState
    return children
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["location-name"] = ipv6SingleHopLocationSummary.LocationName
    return leafs
}

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetYangName() string { return "ipv6-single-hop-location-summary" }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) SetParent(parent types.Entity) { ipv6SingleHopLocationSummary.parent = parent }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetParent() types.Entity { return ipv6SingleHopLocationSummary.parent }

func (ipv6SingleHopLocationSummary *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary) GetParentYangName() string { return "ipv6-single-hop-location-summaries" }

// Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}

    // Number of sessions in retry state. The type is interface{} with range:
    // 0..4294967295.
    RetryCount interface{}

    // Number of sessions in standby state. The type is interface{} with range:
    // 0..4294967295.
    StandbyCount interface{}
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    if yname == "retry-count" { return "RetryCount" }
    if yname == "standby-count" { return "StandbyCount" }
    return ""
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["up-count"] = sessionState.UpCount
    leafs["down-count"] = sessionState.DownCount
    leafs["unknown-count"] = sessionState.UnknownCount
    leafs["retry-count"] = sessionState.RetryCount
    leafs["standby-count"] = sessionState.StandbyCount
    return leafs
}

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv6SingleHopLocationSummaries_Ipv6SingleHopLocationSummary_SessionState) GetParentYangName() string { return "ipv6-single-hop-location-summary" }

// Bfd_LabelCounters
// Label Counters
type Bfd_LabelCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of Label Packet counters.
    LabelPacketCounters Bfd_LabelCounters_LabelPacketCounters
}

func (labelCounters *Bfd_LabelCounters) GetFilter() yfilter.YFilter { return labelCounters.YFilter }

func (labelCounters *Bfd_LabelCounters) SetFilter(yf yfilter.YFilter) { labelCounters.YFilter = yf }

func (labelCounters *Bfd_LabelCounters) GetGoName(yname string) string {
    if yname == "label-packet-counters" { return "LabelPacketCounters" }
    return ""
}

func (labelCounters *Bfd_LabelCounters) GetSegmentPath() string {
    return "label-counters"
}

func (labelCounters *Bfd_LabelCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-packet-counters" {
        return &labelCounters.LabelPacketCounters
    }
    return nil
}

func (labelCounters *Bfd_LabelCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-packet-counters"] = &labelCounters.LabelPacketCounters
    return children
}

func (labelCounters *Bfd_LabelCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelCounters *Bfd_LabelCounters) GetBundleName() string { return "cisco_ios_xr" }

func (labelCounters *Bfd_LabelCounters) GetYangName() string { return "label-counters" }

func (labelCounters *Bfd_LabelCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelCounters *Bfd_LabelCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelCounters *Bfd_LabelCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelCounters *Bfd_LabelCounters) SetParent(parent types.Entity) { labelCounters.parent = parent }

func (labelCounters *Bfd_LabelCounters) GetParent() types.Entity { return labelCounters.parent }

func (labelCounters *Bfd_LabelCounters) GetParentYangName() string { return "bfd" }

// Bfd_LabelCounters_LabelPacketCounters
// Table of Label Packet counters
type Bfd_LabelCounters_LabelPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Label Packet counters. The type is slice of
    // Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter.
    LabelPacketCounter []Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetFilter() yfilter.YFilter { return labelPacketCounters.YFilter }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) SetFilter(yf yfilter.YFilter) { labelPacketCounters.YFilter = yf }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetGoName(yname string) string {
    if yname == "label-packet-counter" { return "LabelPacketCounter" }
    return ""
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetSegmentPath() string {
    return "label-packet-counters"
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-packet-counter" {
        for _, c := range labelPacketCounters.LabelPacketCounter {
            if labelPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter{}
        labelPacketCounters.LabelPacketCounter = append(labelPacketCounters.LabelPacketCounter, child)
        return &labelPacketCounters.LabelPacketCounter[len(labelPacketCounters.LabelPacketCounter)-1]
    }
    return nil
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range labelPacketCounters.LabelPacketCounter {
        children[labelPacketCounters.LabelPacketCounter[i].GetSegmentPath()] = &labelPacketCounters.LabelPacketCounter[i]
    }
    return children
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetYangName() string { return "label-packet-counters" }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) SetParent(parent types.Entity) { labelPacketCounters.parent = parent }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetParent() types.Entity { return labelPacketCounters.parent }

func (labelPacketCounters *Bfd_LabelCounters_LabelPacketCounters) GetParentYangName() string { return "label-counters" }

// Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter
// Interface Label Packet counters
type Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetFilter() yfilter.YFilter { return labelPacketCounter.YFilter }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) SetFilter(yf yfilter.YFilter) { labelPacketCounter.YFilter = yf }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "location" { return "Location" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetSegmentPath() string {
    return "label-packet-counter"
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = labelPacketCounter.InterfaceName
    leafs["location"] = labelPacketCounter.Location
    leafs["hello-transmit-count"] = labelPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = labelPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = labelPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = labelPacketCounter.EchoReceiveCount
    leafs["display-type"] = labelPacketCounter.DisplayType
    return leafs
}

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetYangName() string { return "label-packet-counter" }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) SetParent(parent types.Entity) { labelPacketCounter.parent = parent }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetParent() types.Entity { return labelPacketCounter.parent }

func (labelPacketCounter *Bfd_LabelCounters_LabelPacketCounters_LabelPacketCounter) GetParentYangName() string { return "label-packet-counters" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails
// Table of detailed information about all IPv4 BFD
// over MPLS-TE Head sessions in the System
type Bfd_Ipv4BfDoMplsteHeadSessionDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed information for a single IPv4 BFD over MPLS-TE head session. The
    // type is slice of
    // Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail.
    Ipv4BfDoMplsteHeadSessionDetail []Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadSessionDetails.YFilter }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadSessionDetails.YFilter = yf }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-head-session-detail" { return "Ipv4BfDoMplsteHeadSessionDetail" }
    return ""
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-session-details"
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-head-session-detail" {
        for _, c := range ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail {
            if ipv4BfDoMplsteHeadSessionDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail{}
        ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail = append(ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail, child)
        return &ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail[len(ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail)-1]
    }
    return nil
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail {
        children[ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadSessionDetails.Ipv4BfDoMplsteHeadSessionDetail[i]
    }
    return children
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetYangName() string { return "ipv4bf-do-mplste-head-session-details" }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadSessionDetails.parent = parent }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetParent() types.Entity { return ipv4BfDoMplsteHeadSessionDetails.parent }

func (ipv4BfDoMplsteHeadSessionDetails *Bfd_Ipv4BfDoMplsteHeadSessionDetails) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail
// Detailed information for a single IPv4 BFD over
// MPLS-TE head session
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session status information.
    StatusInformation Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation

    // MP Dowload State.
    MpDownloadState Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState

    // LSP Ping Info.
    LspPingInfo Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation.
    OwnerInformation []Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation

    // Association session information. The type is slice of
    // Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation.
    AssociationInformation []Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadSessionDetail.YFilter }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadSessionDetail.YFilter = yf }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "status-information" { return "StatusInformation" }
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "lsp-ping-info" { return "LspPingInfo" }
    if yname == "owner-information" { return "OwnerInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-session-detail"
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-information" {
        return &ipv4BfDoMplsteHeadSessionDetail.StatusInformation
    }
    if childYangName == "mp-download-state" {
        return &ipv4BfDoMplsteHeadSessionDetail.MpDownloadState
    }
    if childYangName == "lsp-ping-info" {
        return &ipv4BfDoMplsteHeadSessionDetail.LspPingInfo
    }
    if childYangName == "owner-information" {
        for _, c := range ipv4BfDoMplsteHeadSessionDetail.OwnerInformation {
            if ipv4BfDoMplsteHeadSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation{}
        ipv4BfDoMplsteHeadSessionDetail.OwnerInformation = append(ipv4BfDoMplsteHeadSessionDetail.OwnerInformation, child)
        return &ipv4BfDoMplsteHeadSessionDetail.OwnerInformation[len(ipv4BfDoMplsteHeadSessionDetail.OwnerInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range ipv4BfDoMplsteHeadSessionDetail.AssociationInformation {
            if ipv4BfDoMplsteHeadSessionDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation{}
        ipv4BfDoMplsteHeadSessionDetail.AssociationInformation = append(ipv4BfDoMplsteHeadSessionDetail.AssociationInformation, child)
        return &ipv4BfDoMplsteHeadSessionDetail.AssociationInformation[len(ipv4BfDoMplsteHeadSessionDetail.AssociationInformation)-1]
    }
    return nil
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-information"] = &ipv4BfDoMplsteHeadSessionDetail.StatusInformation
    children["mp-download-state"] = &ipv4BfDoMplsteHeadSessionDetail.MpDownloadState
    children["lsp-ping-info"] = &ipv4BfDoMplsteHeadSessionDetail.LspPingInfo
    for i := range ipv4BfDoMplsteHeadSessionDetail.OwnerInformation {
        children[ipv4BfDoMplsteHeadSessionDetail.OwnerInformation[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadSessionDetail.OwnerInformation[i]
    }
    for i := range ipv4BfDoMplsteHeadSessionDetail.AssociationInformation {
        children[ipv4BfDoMplsteHeadSessionDetail.AssociationInformation[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadSessionDetail.AssociationInformation[i]
    }
    return children
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4BfDoMplsteHeadSessionDetail.InterfaceName
    leafs["vrf-name"] = ipv4BfDoMplsteHeadSessionDetail.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteHeadSessionDetail.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteHeadSessionDetail.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteHeadSessionDetail.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteHeadSessionDetail.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteHeadSessionDetail.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteHeadSessionDetail.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteHeadSessionDetail.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteHeadSessionDetail.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteHeadSessionDetail.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteHeadSessionDetail.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteHeadSessionDetail.FecCtype
    leafs["location"] = ipv4BfDoMplsteHeadSessionDetail.Location
    return leafs
}

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadSessionDetail.parent = parent }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetParent() types.Entity { return ipv4BfDoMplsteHeadSessionDetail.parent }

func (ipv4BfDoMplsteHeadSessionDetail *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-details" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation
// Session status information
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Session's Remote discriminator. The type is interface{} with range:
    // 0..4294967295.
    RemoteDiscriminator interface{}

    // Number of times session state went to UP. The type is interface{} with
    // range: 0..4294967295.
    ToUpStateCount interface{}

    // Desired minimum echo transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    DesiredMinimumEchoTransmitInterval interface{}

    // Remote Negotiated Interval in milli-seconds. The type is interface{} with
    // range: 0..4294967295. Units are millisecond.
    RemoteNegotiatedInterval interface{}

    // Number of Latency Samples. Time between Transmit and Receive. The type is
    // interface{} with range: 0..4294967295.
    LatencyNumber interface{}

    // Minimum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMinimum interface{}

    // Maximum value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyMaximum interface{}

    // Average value of Latency (in micro-seconds). The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    LatencyAverage interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Internal Label. The type is interface{} with range: 0..4294967295.
    InternalLabel interface{}

    // Source address.
    SourceAddress Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress

    // Time since last state change.
    LastStateChange Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange

    // Transmit Packet.
    TransmitPacket Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket

    // Receive Packet.
    ReceivePacket Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation

    // Statistics of Interval between Async Packets Transmitted (in
    // milli-seconds).
    AsyncTransmitStatistics Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics

    // Statistics of Interval between Async Packets Received (in milli-seconds).
    AsyncReceiveStatistics Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics

    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds).
    EchoTransmitStatistics Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics

    // Statistics of Interval between Echo Packets Received (in milli-seconds).
    EchoReceivedStatistics Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetFilter() yfilter.YFilter { return statusInformation.YFilter }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) SetFilter(yf yfilter.YFilter) { statusInformation.YFilter = yf }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetGoName(yname string) string {
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "remote-discriminator" { return "RemoteDiscriminator" }
    if yname == "to-up-state-count" { return "ToUpStateCount" }
    if yname == "desired-minimum-echo-transmit-interval" { return "DesiredMinimumEchoTransmitInterval" }
    if yname == "remote-negotiated-interval" { return "RemoteNegotiatedInterval" }
    if yname == "latency-number" { return "LatencyNumber" }
    if yname == "latency-minimum" { return "LatencyMinimum" }
    if yname == "latency-maximum" { return "LatencyMaximum" }
    if yname == "latency-average" { return "LatencyAverage" }
    if yname == "node-id" { return "NodeId" }
    if yname == "internal-label" { return "InternalLabel" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "last-state-change" { return "LastStateChange" }
    if yname == "transmit-packet" { return "TransmitPacket" }
    if yname == "receive-packet" { return "ReceivePacket" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    if yname == "async-transmit-statistics" { return "AsyncTransmitStatistics" }
    if yname == "async-receive-statistics" { return "AsyncReceiveStatistics" }
    if yname == "echo-transmit-statistics" { return "EchoTransmitStatistics" }
    if yname == "echo-received-statistics" { return "EchoReceivedStatistics" }
    return ""
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetSegmentPath() string {
    return "status-information"
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "source-address" {
        return &statusInformation.SourceAddress
    }
    if childYangName == "last-state-change" {
        return &statusInformation.LastStateChange
    }
    if childYangName == "transmit-packet" {
        return &statusInformation.TransmitPacket
    }
    if childYangName == "receive-packet" {
        return &statusInformation.ReceivePacket
    }
    if childYangName == "status-brief-information" {
        return &statusInformation.StatusBriefInformation
    }
    if childYangName == "async-transmit-statistics" {
        return &statusInformation.AsyncTransmitStatistics
    }
    if childYangName == "async-receive-statistics" {
        return &statusInformation.AsyncReceiveStatistics
    }
    if childYangName == "echo-transmit-statistics" {
        return &statusInformation.EchoTransmitStatistics
    }
    if childYangName == "echo-received-statistics" {
        return &statusInformation.EchoReceivedStatistics
    }
    return nil
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["source-address"] = &statusInformation.SourceAddress
    children["last-state-change"] = &statusInformation.LastStateChange
    children["transmit-packet"] = &statusInformation.TransmitPacket
    children["receive-packet"] = &statusInformation.ReceivePacket
    children["status-brief-information"] = &statusInformation.StatusBriefInformation
    children["async-transmit-statistics"] = &statusInformation.AsyncTransmitStatistics
    children["async-receive-statistics"] = &statusInformation.AsyncReceiveStatistics
    children["echo-transmit-statistics"] = &statusInformation.EchoTransmitStatistics
    children["echo-received-statistics"] = &statusInformation.EchoReceivedStatistics
    return children
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessiontype"] = statusInformation.Sessiontype
    leafs["session-subtype"] = statusInformation.SessionSubtype
    leafs["state"] = statusInformation.State
    leafs["local-discriminator"] = statusInformation.LocalDiscriminator
    leafs["remote-discriminator"] = statusInformation.RemoteDiscriminator
    leafs["to-up-state-count"] = statusInformation.ToUpStateCount
    leafs["desired-minimum-echo-transmit-interval"] = statusInformation.DesiredMinimumEchoTransmitInterval
    leafs["remote-negotiated-interval"] = statusInformation.RemoteNegotiatedInterval
    leafs["latency-number"] = statusInformation.LatencyNumber
    leafs["latency-minimum"] = statusInformation.LatencyMinimum
    leafs["latency-maximum"] = statusInformation.LatencyMaximum
    leafs["latency-average"] = statusInformation.LatencyAverage
    leafs["node-id"] = statusInformation.NodeId
    leafs["internal-label"] = statusInformation.InternalLabel
    return leafs
}

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetYangName() string { return "status-information" }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) SetParent(parent types.Entity) { statusInformation.parent = parent }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetParent() types.Entity { return statusInformation.parent }

func (statusInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress
// Source address
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetFilter() yfilter.YFilter { return sourceAddress.YFilter }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) SetFilter(yf yfilter.YFilter) { sourceAddress.YFilter = yf }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetSegmentPath() string {
    return "source-address"
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = sourceAddress.Afi
    leafs["dummy"] = sourceAddress.Dummy
    leafs["ipv4"] = sourceAddress.Ipv4
    leafs["ipv6"] = sourceAddress.Ipv6
    return leafs
}

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetBundleName() string { return "cisco_ios_xr" }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetYangName() string { return "source-address" }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) SetParent(parent types.Entity) { sourceAddress.parent = parent }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetParent() types.Entity { return sourceAddress.parent }

func (sourceAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_SourceAddress) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange
// Time since last state change
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of days since last session state transition. The type is interface{}
    // with range: 0..4294967295. Units are day.
    Days interface{}

    // Number of hours since last session state transition. The type is
    // interface{} with range: 0..255. Units are hour.
    Hours interface{}

    // Number of mins since last session state transition. The type is interface{}
    // with range: 0..255. Units are minute.
    Minutes interface{}

    // Number of seconds since last session state transition. The type is
    // interface{} with range: 0..255. Units are second.
    Seconds interface{}
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetFilter() yfilter.YFilter { return lastStateChange.YFilter }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) SetFilter(yf yfilter.YFilter) { lastStateChange.YFilter = yf }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetGoName(yname string) string {
    if yname == "days" { return "Days" }
    if yname == "hours" { return "Hours" }
    if yname == "minutes" { return "Minutes" }
    if yname == "seconds" { return "Seconds" }
    return ""
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetSegmentPath() string {
    return "last-state-change"
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["days"] = lastStateChange.Days
    leafs["hours"] = lastStateChange.Hours
    leafs["minutes"] = lastStateChange.Minutes
    leafs["seconds"] = lastStateChange.Seconds
    return leafs
}

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetBundleName() string { return "cisco_ios_xr" }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetYangName() string { return "last-state-change" }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) SetParent(parent types.Entity) { lastStateChange.parent = parent }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetParent() types.Entity { return lastStateChange.parent }

func (lastStateChange *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_LastStateChange) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket
// Transmit Packet
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetFilter() yfilter.YFilter { return transmitPacket.YFilter }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) SetFilter(yf yfilter.YFilter) { transmitPacket.YFilter = yf }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetSegmentPath() string {
    return "transmit-packet"
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = transmitPacket.Version
    leafs["diagnostic"] = transmitPacket.Diagnostic
    leafs["ihear-you"] = transmitPacket.IhearYou
    leafs["state"] = transmitPacket.State
    leafs["demand"] = transmitPacket.Demand
    leafs["poll"] = transmitPacket.Poll
    leafs["final"] = transmitPacket.Final
    leafs["control-plane-independent"] = transmitPacket.ControlPlaneIndependent
    leafs["authentication-present"] = transmitPacket.AuthenticationPresent
    leafs["detection-multiplier"] = transmitPacket.DetectionMultiplier
    leafs["length"] = transmitPacket.Length
    leafs["my-discriminator"] = transmitPacket.MyDiscriminator
    leafs["your-discriminator"] = transmitPacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = transmitPacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = transmitPacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = transmitPacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetBundleName() string { return "cisco_ios_xr" }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetYangName() string { return "transmit-packet" }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) SetParent(parent types.Entity) { transmitPacket.parent = parent }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetParent() types.Entity { return transmitPacket.parent }

func (transmitPacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_TransmitPacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket
// Receive Packet
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Version. The type is interface{} with range: 0..255.
    Version interface{}

    // Diagnostic. The type is BfdMgmtSessionDiag.
    Diagnostic interface{}

    // I Hear You (v0). The type is interface{} with range:
    // -2147483648..2147483647.
    IhearYou interface{}

    // State (v1). The type is BfdMgmtSessionState.
    State interface{}

    // Demand mode. The type is interface{} with range: -2147483648..2147483647.
    Demand interface{}

    // Poll bit. The type is interface{} with range: -2147483648..2147483647.
    Poll interface{}

    // Final bit. The type is interface{} with range: -2147483648..2147483647.
    Final interface{}

    // BFD implementation does not share fate with its control plane. The type is
    // interface{} with range: -2147483648..2147483647.
    ControlPlaneIndependent interface{}

    // Requesting authentication for the session. The type is interface{} with
    // range: -2147483648..2147483647.
    AuthenticationPresent interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Length. The type is interface{} with range: 0..4294967295.
    Length interface{}

    // My Discriminator. The type is interface{} with range: 0..4294967295.
    MyDiscriminator interface{}

    // Your Discriminator. The type is interface{} with range: 0..4294967295.
    YourDiscriminator interface{}

    // Desired minimum transmit interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    DesiredMinimumTransmitInterval interface{}

    // Required receive interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    RequiredMinimumReceiveInterval interface{}

    // Required echo receive interval in micro-seconds. The type is interface{}
    // with range: 0..4294967295. Units are microsecond.
    RequiredMinimumEchoReceiveInterval interface{}
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetFilter() yfilter.YFilter { return receivePacket.YFilter }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) SetFilter(yf yfilter.YFilter) { receivePacket.YFilter = yf }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetGoName(yname string) string {
    if yname == "version" { return "Version" }
    if yname == "diagnostic" { return "Diagnostic" }
    if yname == "ihear-you" { return "IhearYou" }
    if yname == "state" { return "State" }
    if yname == "demand" { return "Demand" }
    if yname == "poll" { return "Poll" }
    if yname == "final" { return "Final" }
    if yname == "control-plane-independent" { return "ControlPlaneIndependent" }
    if yname == "authentication-present" { return "AuthenticationPresent" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "length" { return "Length" }
    if yname == "my-discriminator" { return "MyDiscriminator" }
    if yname == "your-discriminator" { return "YourDiscriminator" }
    if yname == "desired-minimum-transmit-interval" { return "DesiredMinimumTransmitInterval" }
    if yname == "required-minimum-receive-interval" { return "RequiredMinimumReceiveInterval" }
    if yname == "required-minimum-echo-receive-interval" { return "RequiredMinimumEchoReceiveInterval" }
    return ""
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetSegmentPath() string {
    return "receive-packet"
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["version"] = receivePacket.Version
    leafs["diagnostic"] = receivePacket.Diagnostic
    leafs["ihear-you"] = receivePacket.IhearYou
    leafs["state"] = receivePacket.State
    leafs["demand"] = receivePacket.Demand
    leafs["poll"] = receivePacket.Poll
    leafs["final"] = receivePacket.Final
    leafs["control-plane-independent"] = receivePacket.ControlPlaneIndependent
    leafs["authentication-present"] = receivePacket.AuthenticationPresent
    leafs["detection-multiplier"] = receivePacket.DetectionMultiplier
    leafs["length"] = receivePacket.Length
    leafs["my-discriminator"] = receivePacket.MyDiscriminator
    leafs["your-discriminator"] = receivePacket.YourDiscriminator
    leafs["desired-minimum-transmit-interval"] = receivePacket.DesiredMinimumTransmitInterval
    leafs["required-minimum-receive-interval"] = receivePacket.RequiredMinimumReceiveInterval
    leafs["required-minimum-echo-receive-interval"] = receivePacket.RequiredMinimumEchoReceiveInterval
    return leafs
}

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetBundleName() string { return "cisco_ios_xr" }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetYangName() string { return "receive-packet" }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) SetParent(parent types.Entity) { receivePacket.parent = parent }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetParent() types.Entity { return receivePacket.parent }

func (receivePacket *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_ReceivePacket) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics
// Statistics of Interval between Async Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetFilter() yfilter.YFilter { return asyncTransmitStatistics.YFilter }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) SetFilter(yf yfilter.YFilter) { asyncTransmitStatistics.YFilter = yf }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetSegmentPath() string {
    return "async-transmit-statistics"
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncTransmitStatistics.Number
    leafs["minimum"] = asyncTransmitStatistics.Minimum
    leafs["maximum"] = asyncTransmitStatistics.Maximum
    leafs["average"] = asyncTransmitStatistics.Average
    leafs["last"] = asyncTransmitStatistics.Last
    return leafs
}

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetYangName() string { return "async-transmit-statistics" }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) SetParent(parent types.Entity) { asyncTransmitStatistics.parent = parent }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParent() types.Entity { return asyncTransmitStatistics.parent }

func (asyncTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics
// Statistics of Interval between Async Packets
// Received (in milli-seconds)
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetFilter() yfilter.YFilter { return asyncReceiveStatistics.YFilter }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) SetFilter(yf yfilter.YFilter) { asyncReceiveStatistics.YFilter = yf }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetSegmentPath() string {
    return "async-receive-statistics"
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = asyncReceiveStatistics.Number
    leafs["minimum"] = asyncReceiveStatistics.Minimum
    leafs["maximum"] = asyncReceiveStatistics.Maximum
    leafs["average"] = asyncReceiveStatistics.Average
    leafs["last"] = asyncReceiveStatistics.Last
    return leafs
}

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetYangName() string { return "async-receive-statistics" }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) SetParent(parent types.Entity) { asyncReceiveStatistics.parent = parent }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParent() types.Entity { return asyncReceiveStatistics.parent }

func (asyncReceiveStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_AsyncReceiveStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics
// Statistics of Interval between Echo Packets
// Transmitted (in milli-seconds)
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetFilter() yfilter.YFilter { return echoTransmitStatistics.YFilter }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) SetFilter(yf yfilter.YFilter) { echoTransmitStatistics.YFilter = yf }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetSegmentPath() string {
    return "echo-transmit-statistics"
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoTransmitStatistics.Number
    leafs["minimum"] = echoTransmitStatistics.Minimum
    leafs["maximum"] = echoTransmitStatistics.Maximum
    leafs["average"] = echoTransmitStatistics.Average
    leafs["last"] = echoTransmitStatistics.Last
    return leafs
}

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetYangName() string { return "echo-transmit-statistics" }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) SetParent(parent types.Entity) { echoTransmitStatistics.parent = parent }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetParent() types.Entity { return echoTransmitStatistics.parent }

func (echoTransmitStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoTransmitStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics
// Statistics of Interval between Echo Packets
// Received (in milli-seconds)
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of Interval Samples between Packets sent/received. The type is
    // interface{} with range: 0..4294967295.
    Number interface{}

    // Minimum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Minimum interface{}

    // Maximum of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Maximum interface{}

    // Average of Transmit/Receive Interval (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Average interface{}

    // Time since last Transmit/Receive (in milli-seconds). The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    Last interface{}
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetFilter() yfilter.YFilter { return echoReceivedStatistics.YFilter }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) SetFilter(yf yfilter.YFilter) { echoReceivedStatistics.YFilter = yf }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetGoName(yname string) string {
    if yname == "number" { return "Number" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "average" { return "Average" }
    if yname == "last" { return "Last" }
    return ""
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetSegmentPath() string {
    return "echo-received-statistics"
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number"] = echoReceivedStatistics.Number
    leafs["minimum"] = echoReceivedStatistics.Minimum
    leafs["maximum"] = echoReceivedStatistics.Maximum
    leafs["average"] = echoReceivedStatistics.Average
    leafs["last"] = echoReceivedStatistics.Last
    return leafs
}

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetYangName() string { return "echo-received-statistics" }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) SetParent(parent types.Entity) { echoReceivedStatistics.parent = parent }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetParent() types.Entity { return echoReceivedStatistics.parent }

func (echoReceivedStatistics *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_StatusInformation_EchoReceivedStatistics) GetParentYangName() string { return "status-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState
// MP Dowload State
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MP Download State. The type is BfdMpDownloadState.
    MpDownloadState interface{}

    // Change time.
    ChangeTime Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetFilter() yfilter.YFilter { return mpDownloadState.YFilter }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) SetFilter(yf yfilter.YFilter) { mpDownloadState.YFilter = yf }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetGoName(yname string) string {
    if yname == "mp-download-state" { return "MpDownloadState" }
    if yname == "change-time" { return "ChangeTime" }
    return ""
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetSegmentPath() string {
    return "mp-download-state"
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "change-time" {
        return &mpDownloadState.ChangeTime
    }
    return nil
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["change-time"] = &mpDownloadState.ChangeTime
    return children
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mp-download-state"] = mpDownloadState.MpDownloadState
    return leafs
}

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetBundleName() string { return "cisco_ios_xr" }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetYangName() string { return "mp-download-state" }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) SetParent(parent types.Entity) { mpDownloadState.parent = parent }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetParent() types.Entity { return mpDownloadState.parent }

func (mpDownloadState *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime
// Change time
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetFilter() yfilter.YFilter { return changeTime.YFilter }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) SetFilter(yf yfilter.YFilter) { changeTime.YFilter = yf }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetSegmentPath() string {
    return "change-time"
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = changeTime.Seconds
    leafs["nanoseconds"] = changeTime.Nanoseconds
    return leafs
}

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetBundleName() string { return "cisco_ios_xr" }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetYangName() string { return "change-time" }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) SetParent(parent types.Entity) { changeTime.parent = parent }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetParent() types.Entity { return changeTime.parent }

func (changeTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_MpDownloadState_ChangeTime) GetParentYangName() string { return "mp-download-state" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo
// LSP Ping Info
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP Ping Tx count. The type is interface{} with range: 0..4294967295.
    LspPingTxCount interface{}

    // LSP Ping Tx error count. The type is interface{} with range: 0..4294967295.
    LspPingTxErrorCount interface{}

    // LSP Ping Tx last result. The type is string.
    LspPingTxLastRc interface{}

    // LSP Ping Tx last error. The type is string.
    LspPingTxLastErrorRc interface{}

    // LSP Ping Rx last received discriminator. The type is interface{} with
    // range: 0..4294967295.
    LspPingRxLastDiscr interface{}

    // LSP Ping numer of times received. The type is interface{} with range:
    // 0..4294967295.
    LspPingRxCount interface{}

    // LSP Ping Rx Last Code. The type is interface{} with range: 0..255.
    LspPingRxLastCode interface{}

    // LSP Ping Rx Last Subcode. The type is interface{} with range: 0..255.
    LspPingRxLastSubcode interface{}

    // LSP Ping Rx Last Output. The type is string.
    LspPingRxLastOutput interface{}

    // LSP Ping last sent time.
    LspPingTxLastTime Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime

    // LSP Ping last error time.
    LspPingTxLastErrorTime Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime

    // LSP Ping last received time.
    LspPingRxLastTime Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetFilter() yfilter.YFilter { return lspPingInfo.YFilter }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) SetFilter(yf yfilter.YFilter) { lspPingInfo.YFilter = yf }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetGoName(yname string) string {
    if yname == "lsp-ping-tx-count" { return "LspPingTxCount" }
    if yname == "lsp-ping-tx-error-count" { return "LspPingTxErrorCount" }
    if yname == "lsp-ping-tx-last-rc" { return "LspPingTxLastRc" }
    if yname == "lsp-ping-tx-last-error-rc" { return "LspPingTxLastErrorRc" }
    if yname == "lsp-ping-rx-last-discr" { return "LspPingRxLastDiscr" }
    if yname == "lsp-ping-rx-count" { return "LspPingRxCount" }
    if yname == "lsp-ping-rx-last-code" { return "LspPingRxLastCode" }
    if yname == "lsp-ping-rx-last-subcode" { return "LspPingRxLastSubcode" }
    if yname == "lsp-ping-rx-last-output" { return "LspPingRxLastOutput" }
    if yname == "lsp-ping-tx-last-time" { return "LspPingTxLastTime" }
    if yname == "lsp-ping-tx-last-error-time" { return "LspPingTxLastErrorTime" }
    if yname == "lsp-ping-rx-last-time" { return "LspPingRxLastTime" }
    return ""
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetSegmentPath() string {
    return "lsp-ping-info"
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-ping-tx-last-time" {
        return &lspPingInfo.LspPingTxLastTime
    }
    if childYangName == "lsp-ping-tx-last-error-time" {
        return &lspPingInfo.LspPingTxLastErrorTime
    }
    if childYangName == "lsp-ping-rx-last-time" {
        return &lspPingInfo.LspPingRxLastTime
    }
    return nil
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-ping-tx-last-time"] = &lspPingInfo.LspPingTxLastTime
    children["lsp-ping-tx-last-error-time"] = &lspPingInfo.LspPingTxLastErrorTime
    children["lsp-ping-rx-last-time"] = &lspPingInfo.LspPingRxLastTime
    return children
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-ping-tx-count"] = lspPingInfo.LspPingTxCount
    leafs["lsp-ping-tx-error-count"] = lspPingInfo.LspPingTxErrorCount
    leafs["lsp-ping-tx-last-rc"] = lspPingInfo.LspPingTxLastRc
    leafs["lsp-ping-tx-last-error-rc"] = lspPingInfo.LspPingTxLastErrorRc
    leafs["lsp-ping-rx-last-discr"] = lspPingInfo.LspPingRxLastDiscr
    leafs["lsp-ping-rx-count"] = lspPingInfo.LspPingRxCount
    leafs["lsp-ping-rx-last-code"] = lspPingInfo.LspPingRxLastCode
    leafs["lsp-ping-rx-last-subcode"] = lspPingInfo.LspPingRxLastSubcode
    leafs["lsp-ping-rx-last-output"] = lspPingInfo.LspPingRxLastOutput
    return leafs
}

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetYangName() string { return "lsp-ping-info" }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) SetParent(parent types.Entity) { lspPingInfo.parent = parent }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetParent() types.Entity { return lspPingInfo.parent }

func (lspPingInfo *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime
// LSP Ping last sent time
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetFilter() yfilter.YFilter { return lspPingTxLastTime.YFilter }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastTime.YFilter = yf }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-time"
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastTime.Nanoseconds
    return leafs
}

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetYangName() string { return "lsp-ping-tx-last-time" }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) SetParent(parent types.Entity) { lspPingTxLastTime.parent = parent }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetParent() types.Entity { return lspPingTxLastTime.parent }

func (lspPingTxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime
// LSP Ping last error time
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetFilter() yfilter.YFilter { return lspPingTxLastErrorTime.YFilter }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetFilter(yf yfilter.YFilter) { lspPingTxLastErrorTime.YFilter = yf }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetSegmentPath() string {
    return "lsp-ping-tx-last-error-time"
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingTxLastErrorTime.Seconds
    leafs["nanoseconds"] = lspPingTxLastErrorTime.Nanoseconds
    return leafs
}

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetYangName() string { return "lsp-ping-tx-last-error-time" }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) SetParent(parent types.Entity) { lspPingTxLastErrorTime.parent = parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParent() types.Entity { return lspPingTxLastErrorTime.parent }

func (lspPingTxLastErrorTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingTxLastErrorTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime
// LSP Ping last received time
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // seconds. The type is interface{} with range: 0..18446744073709551615. Units
    // are second.
    Seconds interface{}

    // nanoseconds. The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanoseconds interface{}
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetFilter() yfilter.YFilter { return lspPingRxLastTime.YFilter }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) SetFilter(yf yfilter.YFilter) { lspPingRxLastTime.YFilter = yf }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetSegmentPath() string {
    return "lsp-ping-rx-last-time"
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lspPingRxLastTime.Seconds
    leafs["nanoseconds"] = lspPingRxLastTime.Nanoseconds
    return leafs
}

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleName() string { return "cisco_ios_xr" }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetYangName() string { return "lsp-ping-rx-last-time" }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) SetParent(parent types.Entity) { lspPingRxLastTime.parent = parent }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetParent() types.Entity { return lspPingRxLastTime.parent }

func (lspPingRxLastTime *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_LspPingInfo_LspPingRxLastTime) GetParentYangName() string { return "lsp-ping-info" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_OwnerInformation) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation
// Association session information
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation) GetParentYangName() string { return "ipv4bf-do-mplste-head-session-detail" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_Ipv4BfDoMplsteHeadSessionDetails_Ipv4BfDoMplsteHeadSessionDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_RelationBriefs
// Table of brief information about all BFD
// relations in the System
type Bfd_RelationBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for relation of a single BFD session. The type is slice
    // of Bfd_RelationBriefs_RelationBrief.
    RelationBrief []Bfd_RelationBriefs_RelationBrief
}

func (relationBriefs *Bfd_RelationBriefs) GetFilter() yfilter.YFilter { return relationBriefs.YFilter }

func (relationBriefs *Bfd_RelationBriefs) SetFilter(yf yfilter.YFilter) { relationBriefs.YFilter = yf }

func (relationBriefs *Bfd_RelationBriefs) GetGoName(yname string) string {
    if yname == "relation-brief" { return "RelationBrief" }
    return ""
}

func (relationBriefs *Bfd_RelationBriefs) GetSegmentPath() string {
    return "relation-briefs"
}

func (relationBriefs *Bfd_RelationBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "relation-brief" {
        for _, c := range relationBriefs.RelationBrief {
            if relationBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationBriefs_RelationBrief{}
        relationBriefs.RelationBrief = append(relationBriefs.RelationBrief, child)
        return &relationBriefs.RelationBrief[len(relationBriefs.RelationBrief)-1]
    }
    return nil
}

func (relationBriefs *Bfd_RelationBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range relationBriefs.RelationBrief {
        children[relationBriefs.RelationBrief[i].GetSegmentPath()] = &relationBriefs.RelationBrief[i]
    }
    return children
}

func (relationBriefs *Bfd_RelationBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (relationBriefs *Bfd_RelationBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (relationBriefs *Bfd_RelationBriefs) GetYangName() string { return "relation-briefs" }

func (relationBriefs *Bfd_RelationBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (relationBriefs *Bfd_RelationBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (relationBriefs *Bfd_RelationBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (relationBriefs *Bfd_RelationBriefs) SetParent(parent types.Entity) { relationBriefs.parent = parent }

func (relationBriefs *Bfd_RelationBriefs) GetParent() types.Entity { return relationBriefs.parent }

func (relationBriefs *Bfd_RelationBriefs) GetParentYangName() string { return "bfd" }

// Bfd_RelationBriefs_RelationBrief
// Brief information for relation of a single BFD
// session
type Bfd_RelationBriefs_RelationBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Brief Member Link Information. The type is slice of
    // Bfd_RelationBriefs_RelationBrief_LinkInformation.
    LinkInformation []Bfd_RelationBriefs_RelationBrief_LinkInformation
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetFilter() yfilter.YFilter { return relationBrief.YFilter }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) SetFilter(yf yfilter.YFilter) { relationBrief.YFilter = yf }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "state" { return "State" }
    if yname == "link-information" { return "LinkInformation" }
    return ""
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetSegmentPath() string {
    return "relation-brief"
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-information" {
        for _, c := range relationBrief.LinkInformation {
            if relationBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationBriefs_RelationBrief_LinkInformation{}
        relationBrief.LinkInformation = append(relationBrief.LinkInformation, child)
        return &relationBrief.LinkInformation[len(relationBrief.LinkInformation)-1]
    }
    return nil
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range relationBrief.LinkInformation {
        children[relationBrief.LinkInformation[i].GetSegmentPath()] = &relationBrief.LinkInformation[i]
    }
    return children
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = relationBrief.InterfaceName
    leafs["destination-address"] = relationBrief.DestinationAddress
    leafs["state"] = relationBrief.State
    return leafs
}

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetBundleName() string { return "cisco_ios_xr" }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetYangName() string { return "relation-brief" }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) SetParent(parent types.Entity) { relationBrief.parent = parent }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetParent() types.Entity { return relationBrief.parent }

func (relationBrief *Bfd_RelationBriefs_RelationBrief) GetParentYangName() string { return "relation-briefs" }

// Bfd_RelationBriefs_RelationBrief_LinkInformation
// Brief Member Link Information
type Bfd_RelationBriefs_RelationBrief_LinkInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetFilter() yfilter.YFilter { return linkInformation.YFilter }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) SetFilter(yf yfilter.YFilter) { linkInformation.YFilter = yf }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetSegmentPath() string {
    return "link-information"
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = linkInformation.State
    leafs["interface-name"] = linkInformation.InterfaceName
    return leafs
}

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetBundleName() string { return "cisco_ios_xr" }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetYangName() string { return "link-information" }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) SetParent(parent types.Entity) { linkInformation.parent = parent }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetParent() types.Entity { return linkInformation.parent }

func (linkInformation *Bfd_RelationBriefs_RelationBrief_LinkInformation) GetParentYangName() string { return "relation-brief" }

// Bfd_ClientBriefs
// Table of Brief information about BFD clients
type Bfd_ClientBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information of client. The type is slice of
    // Bfd_ClientBriefs_ClientBrief.
    ClientBrief []Bfd_ClientBriefs_ClientBrief
}

func (clientBriefs *Bfd_ClientBriefs) GetFilter() yfilter.YFilter { return clientBriefs.YFilter }

func (clientBriefs *Bfd_ClientBriefs) SetFilter(yf yfilter.YFilter) { clientBriefs.YFilter = yf }

func (clientBriefs *Bfd_ClientBriefs) GetGoName(yname string) string {
    if yname == "client-brief" { return "ClientBrief" }
    return ""
}

func (clientBriefs *Bfd_ClientBriefs) GetSegmentPath() string {
    return "client-briefs"
}

func (clientBriefs *Bfd_ClientBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "client-brief" {
        for _, c := range clientBriefs.ClientBrief {
            if clientBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_ClientBriefs_ClientBrief{}
        clientBriefs.ClientBrief = append(clientBriefs.ClientBrief, child)
        return &clientBriefs.ClientBrief[len(clientBriefs.ClientBrief)-1]
    }
    return nil
}

func (clientBriefs *Bfd_ClientBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clientBriefs.ClientBrief {
        children[clientBriefs.ClientBrief[i].GetSegmentPath()] = &clientBriefs.ClientBrief[i]
    }
    return children
}

func (clientBriefs *Bfd_ClientBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clientBriefs *Bfd_ClientBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (clientBriefs *Bfd_ClientBriefs) GetYangName() string { return "client-briefs" }

func (clientBriefs *Bfd_ClientBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientBriefs *Bfd_ClientBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientBriefs *Bfd_ClientBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientBriefs *Bfd_ClientBriefs) SetParent(parent types.Entity) { clientBriefs.parent = parent }

func (clientBriefs *Bfd_ClientBriefs) GetParent() types.Entity { return clientBriefs.parent }

func (clientBriefs *Bfd_ClientBriefs) GetParentYangName() string { return "bfd" }

// Bfd_ClientBriefs_ClientBrief
// Brief information of client
type Bfd_ClientBriefs_ClientBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Client Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    Name interface{}

    // Client process name. The type is string with length: 0..257.
    NameXr interface{}

    // Location where client resides. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Number of sessions created by this client. The type is interface{} with
    // range: 0..4294967295.
    SessionCount interface{}
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetFilter() yfilter.YFilter { return clientBrief.YFilter }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) SetFilter(yf yfilter.YFilter) { clientBrief.YFilter = yf }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "name-xr" { return "NameXr" }
    if yname == "node-id" { return "NodeId" }
    if yname == "session-count" { return "SessionCount" }
    return ""
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetSegmentPath() string {
    return "client-brief" + "[name='" + fmt.Sprintf("%v", clientBrief.Name) + "']"
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = clientBrief.Name
    leafs["name-xr"] = clientBrief.NameXr
    leafs["node-id"] = clientBrief.NodeId
    leafs["session-count"] = clientBrief.SessionCount
    return leafs
}

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetBundleName() string { return "cisco_ios_xr" }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetYangName() string { return "client-brief" }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) SetParent(parent types.Entity) { clientBrief.parent = parent }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetParent() types.Entity { return clientBrief.parent }

func (clientBrief *Bfd_ClientBriefs_ClientBrief) GetParentYangName() string { return "client-briefs" }

// Bfd_Ipv4BfDoMplsteHeadMultiPaths
// IPv4 BFD over MPLS-TE Head multipath
type Bfd_Ipv4BfDoMplsteHeadMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label multipath table. The type is slice of
    // Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath.
    Ipv4BfDoMplsteHeadMultiPath []Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadMultiPaths.YFilter }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadMultiPaths.YFilter = yf }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-head-multi-path" { return "Ipv4BfDoMplsteHeadMultiPath" }
    return ""
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-multi-paths"
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-head-multi-path" {
        for _, c := range ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath {
            if ipv4BfDoMplsteHeadMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath{}
        ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath = append(ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath, child)
        return &ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath[len(ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath)-1]
    }
    return nil
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath {
        children[ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath[i].GetSegmentPath()] = &ipv4BfDoMplsteHeadMultiPaths.Ipv4BfDoMplsteHeadMultiPath[i]
    }
    return children
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetYangName() string { return "ipv4bf-do-mplste-head-multi-paths" }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadMultiPaths.parent = parent }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetParent() types.Entity { return ipv4BfDoMplsteHeadMultiPaths.parent }

func (ipv4BfDoMplsteHeadMultiPaths *Bfd_Ipv4BfDoMplsteHeadMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath
// Label multipath table
type Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadMultiPath.YFilter }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadMultiPath.YFilter = yf }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-multi-path"
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv4BfDoMplsteHeadMultiPath.InterfaceName
    leafs["vrf-name"] = ipv4BfDoMplsteHeadMultiPath.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteHeadMultiPath.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteHeadMultiPath.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteHeadMultiPath.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteHeadMultiPath.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteHeadMultiPath.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteHeadMultiPath.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteHeadMultiPath.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteHeadMultiPath.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteHeadMultiPath.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteHeadMultiPath.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteHeadMultiPath.FecCtype
    leafs["location"] = ipv4BfDoMplsteHeadMultiPath.Location
    leafs["session-subtype"] = ipv4BfDoMplsteHeadMultiPath.SessionSubtype
    leafs["state"] = ipv4BfDoMplsteHeadMultiPath.State
    leafs["local-discriminator"] = ipv4BfDoMplsteHeadMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv4BfDoMplsteHeadMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv4BfDoMplsteHeadMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv4BfDoMplsteHeadMultiPath.SessionInterfaceName
    return leafs
}

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetYangName() string { return "ipv4bf-do-mplste-head-multi-path" }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadMultiPath.parent = parent }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetParent() types.Entity { return ipv4BfDoMplsteHeadMultiPath.parent }

func (ipv4BfDoMplsteHeadMultiPath *Bfd_Ipv4BfDoMplsteHeadMultiPaths_Ipv4BfDoMplsteHeadMultiPath) GetParentYangName() string { return "ipv4bf-do-mplste-head-multi-paths" }

// Bfd_RelationDetails
// Table of detail information about all BFD
// relations in the System
type Bfd_RelationDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail information for relation of a single BFD session. The type is slice
    // of Bfd_RelationDetails_RelationDetail.
    RelationDetail []Bfd_RelationDetails_RelationDetail
}

func (relationDetails *Bfd_RelationDetails) GetFilter() yfilter.YFilter { return relationDetails.YFilter }

func (relationDetails *Bfd_RelationDetails) SetFilter(yf yfilter.YFilter) { relationDetails.YFilter = yf }

func (relationDetails *Bfd_RelationDetails) GetGoName(yname string) string {
    if yname == "relation-detail" { return "RelationDetail" }
    return ""
}

func (relationDetails *Bfd_RelationDetails) GetSegmentPath() string {
    return "relation-details"
}

func (relationDetails *Bfd_RelationDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "relation-detail" {
        for _, c := range relationDetails.RelationDetail {
            if relationDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationDetails_RelationDetail{}
        relationDetails.RelationDetail = append(relationDetails.RelationDetail, child)
        return &relationDetails.RelationDetail[len(relationDetails.RelationDetail)-1]
    }
    return nil
}

func (relationDetails *Bfd_RelationDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range relationDetails.RelationDetail {
        children[relationDetails.RelationDetail[i].GetSegmentPath()] = &relationDetails.RelationDetail[i]
    }
    return children
}

func (relationDetails *Bfd_RelationDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (relationDetails *Bfd_RelationDetails) GetBundleName() string { return "cisco_ios_xr" }

func (relationDetails *Bfd_RelationDetails) GetYangName() string { return "relation-details" }

func (relationDetails *Bfd_RelationDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (relationDetails *Bfd_RelationDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (relationDetails *Bfd_RelationDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (relationDetails *Bfd_RelationDetails) SetParent(parent types.Entity) { relationDetails.parent = parent }

func (relationDetails *Bfd_RelationDetails) GetParent() types.Entity { return relationDetails.parent }

func (relationDetails *Bfd_RelationDetails) GetParentYangName() string { return "bfd" }

// Bfd_RelationDetails_RelationDetail
// Detail information for relation of a single BFD
// session
type Bfd_RelationDetails_RelationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Detail Member Link Information. The type is slice of
    // Bfd_RelationDetails_RelationDetail_LinkInformation.
    LinkInformation []Bfd_RelationDetails_RelationDetail_LinkInformation

    // Association session information. The type is slice of
    // Bfd_RelationDetails_RelationDetail_AssociationInformation.
    AssociationInformation []Bfd_RelationDetails_RelationDetail_AssociationInformation
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetFilter() yfilter.YFilter { return relationDetail.YFilter }

func (relationDetail *Bfd_RelationDetails_RelationDetail) SetFilter(yf yfilter.YFilter) { relationDetail.YFilter = yf }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "link-information" { return "LinkInformation" }
    if yname == "association-information" { return "AssociationInformation" }
    return ""
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetSegmentPath() string {
    return "relation-detail"
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-information" {
        for _, c := range relationDetail.LinkInformation {
            if relationDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationDetails_RelationDetail_LinkInformation{}
        relationDetail.LinkInformation = append(relationDetail.LinkInformation, child)
        return &relationDetail.LinkInformation[len(relationDetail.LinkInformation)-1]
    }
    if childYangName == "association-information" {
        for _, c := range relationDetail.AssociationInformation {
            if relationDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationDetails_RelationDetail_AssociationInformation{}
        relationDetail.AssociationInformation = append(relationDetail.AssociationInformation, child)
        return &relationDetail.AssociationInformation[len(relationDetail.AssociationInformation)-1]
    }
    return nil
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range relationDetail.LinkInformation {
        children[relationDetail.LinkInformation[i].GetSegmentPath()] = &relationDetail.LinkInformation[i]
    }
    for i := range relationDetail.AssociationInformation {
        children[relationDetail.AssociationInformation[i].GetSegmentPath()] = &relationDetail.AssociationInformation[i]
    }
    return children
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = relationDetail.InterfaceName
    leafs["destination-address"] = relationDetail.DestinationAddress
    leafs["state"] = relationDetail.State
    leafs["local-discriminator"] = relationDetail.LocalDiscriminator
    return leafs
}

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetYangName() string { return "relation-detail" }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (relationDetail *Bfd_RelationDetails_RelationDetail) SetParent(parent types.Entity) { relationDetail.parent = parent }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetParent() types.Entity { return relationDetail.parent }

func (relationDetail *Bfd_RelationDetails_RelationDetail) GetParentYangName() string { return "relation-details" }

// Bfd_RelationDetails_RelationDetail_LinkInformation
// Detail Member Link Information
type Bfd_RelationDetails_RelationDetail_LinkInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetFilter() yfilter.YFilter { return linkInformation.YFilter }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) SetFilter(yf yfilter.YFilter) { linkInformation.YFilter = yf }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    return ""
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetSegmentPath() string {
    return "link-information"
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = linkInformation.State
    leafs["interface-name"] = linkInformation.InterfaceName
    leafs["local-discriminator"] = linkInformation.LocalDiscriminator
    return leafs
}

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetBundleName() string { return "cisco_ios_xr" }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetYangName() string { return "link-information" }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) SetParent(parent types.Entity) { linkInformation.parent = parent }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetParent() types.Entity { return linkInformation.parent }

func (linkInformation *Bfd_RelationDetails_RelationDetail_LinkInformation) GetParentYangName() string { return "relation-detail" }

// Bfd_RelationDetails_RelationDetail_AssociationInformation
// Association session information
type Bfd_RelationDetails_RelationDetail_AssociationInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Interface Name. The type is string with length: 0..64.
    InterfaceName interface{}

    // Session type. The type is BfdSession.
    Sessiontype interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // IPv4/v6 dest address.
    IpDestinationAddress Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress

    // Client applications owning the session. The type is slice of
    // Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation.
    OwnerInformation []Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetFilter() yfilter.YFilter { return associationInformation.YFilter }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) SetFilter(yf yfilter.YFilter) { associationInformation.YFilter = yf }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sessiontype" { return "Sessiontype" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "ip-destination-address" { return "IpDestinationAddress" }
    if yname == "owner-information" { return "OwnerInformation" }
    return ""
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetSegmentPath() string {
    return "association-information"
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-destination-address" {
        return &associationInformation.IpDestinationAddress
    }
    if childYangName == "owner-information" {
        for _, c := range associationInformation.OwnerInformation {
            if associationInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation{}
        associationInformation.OwnerInformation = append(associationInformation.OwnerInformation, child)
        return &associationInformation.OwnerInformation[len(associationInformation.OwnerInformation)-1]
    }
    return nil
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-destination-address"] = &associationInformation.IpDestinationAddress
    for i := range associationInformation.OwnerInformation {
        children[associationInformation.OwnerInformation[i].GetSegmentPath()] = &associationInformation.OwnerInformation[i]
    }
    return children
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = associationInformation.InterfaceName
    leafs["sessiontype"] = associationInformation.Sessiontype
    leafs["local-discriminator"] = associationInformation.LocalDiscriminator
    return leafs
}

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetBundleName() string { return "cisco_ios_xr" }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetYangName() string { return "association-information" }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) SetParent(parent types.Entity) { associationInformation.parent = parent }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetParent() types.Entity { return associationInformation.parent }

func (associationInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation) GetParentYangName() string { return "relation-detail" }

// Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress
// IPv4/v6 dest address
type Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AFI. The type is BfdAfId.
    Afi interface{}

    // No Address. The type is interface{} with range: 0..255.
    Dummy interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetFilter() yfilter.YFilter { return ipDestinationAddress.YFilter }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) SetFilter(yf yfilter.YFilter) { ipDestinationAddress.YFilter = yf }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetGoName(yname string) string {
    if yname == "afi" { return "Afi" }
    if yname == "dummy" { return "Dummy" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetSegmentPath() string {
    return "ip-destination-address"
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["afi"] = ipDestinationAddress.Afi
    leafs["dummy"] = ipDestinationAddress.Dummy
    leafs["ipv4"] = ipDestinationAddress.Ipv4
    leafs["ipv6"] = ipDestinationAddress.Ipv6
    return leafs
}

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetYangName() string { return "ip-destination-address" }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) SetParent(parent types.Entity) { ipDestinationAddress.parent = parent }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetParent() types.Entity { return ipDestinationAddress.parent }

func (ipDestinationAddress *Bfd_RelationDetails_RelationDetail_AssociationInformation_IpDestinationAddress) GetParentYangName() string { return "association-information" }

// Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation
// Client applications owning the session
type Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Client specified minimum transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    Interval interface{}

    // Client specified detection multiplier to compute detection time. The type
    // is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}

    // Adjusted minimum transmit interval in milli-seconds. The type is
    // interface{} with range: 0..4294967295. Units are millisecond.
    AdjustedInterval interface{}

    // Adjusted detection multiplier to compute detection time. The type is
    // interface{} with range: 0..4294967295.
    AdjustedDetectionMultiplier interface{}

    // Client process name. The type is string with length: 0..257.
    Name interface{}
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetFilter() yfilter.YFilter { return ownerInformation.YFilter }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) SetFilter(yf yfilter.YFilter) { ownerInformation.YFilter = yf }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetGoName(yname string) string {
    if yname == "interval" { return "Interval" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "adjusted-interval" { return "AdjustedInterval" }
    if yname == "adjusted-detection-multiplier" { return "AdjustedDetectionMultiplier" }
    if yname == "name" { return "Name" }
    return ""
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetSegmentPath() string {
    return "owner-information"
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interval"] = ownerInformation.Interval
    leafs["detection-multiplier"] = ownerInformation.DetectionMultiplier
    leafs["adjusted-interval"] = ownerInformation.AdjustedInterval
    leafs["adjusted-detection-multiplier"] = ownerInformation.AdjustedDetectionMultiplier
    leafs["name"] = ownerInformation.Name
    return leafs
}

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetBundleName() string { return "cisco_ios_xr" }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetYangName() string { return "owner-information" }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) SetParent(parent types.Entity) { ownerInformation.parent = parent }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetParent() types.Entity { return ownerInformation.parent }

func (ownerInformation *Bfd_RelationDetails_RelationDetail_AssociationInformation_OwnerInformation) GetParentYangName() string { return "association-information" }

// Bfd_Ipv4BfDoMplsteTailCounters
// IPv4 BFD over MPLS-TE Counters
type Bfd_Ipv4BfDoMplsteTailCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of IPv4 BFD over MPLS-TE Packet counters.
    Ipv4BfDoMplsteTailPacketCounters Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailCounters.YFilter }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailCounters.YFilter = yf }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-tail-packet-counters" { return "Ipv4BfDoMplsteTailPacketCounters" }
    return ""
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-counters"
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-tail-packet-counters" {
        return &ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters
    }
    return nil
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4bf-do-mplste-tail-packet-counters"] = &ipv4BfDoMplsteTailCounters.Ipv4BfDoMplsteTailPacketCounters
    return children
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetYangName() string { return "ipv4bf-do-mplste-tail-counters" }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) SetParent(parent types.Entity) { ipv4BfDoMplsteTailCounters.parent = parent }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetParent() types.Entity { return ipv4BfDoMplsteTailCounters.parent }

func (ipv4BfDoMplsteTailCounters *Bfd_Ipv4BfDoMplsteTailCounters) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters
// Table of IPv4 BFD over MPLS-TE Packet counters
type Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface  IPv4 BFD over MPLS-TE Packet counters. The type is slice of
    // Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter.
    Ipv4BfDoMplsteTailPacketCounter []Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailPacketCounters.YFilter }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailPacketCounters.YFilter = yf }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-tail-packet-counter" { return "Ipv4BfDoMplsteTailPacketCounter" }
    return ""
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-packet-counters"
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-tail-packet-counter" {
        for _, c := range ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter {
            if ipv4BfDoMplsteTailPacketCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter{}
        ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter = append(ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter, child)
        return &ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter[len(ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter)-1]
    }
    return nil
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter {
        children[ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter[i].GetSegmentPath()] = &ipv4BfDoMplsteTailPacketCounters.Ipv4BfDoMplsteTailPacketCounter[i]
    }
    return children
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetYangName() string { return "ipv4bf-do-mplste-tail-packet-counters" }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) SetParent(parent types.Entity) { ipv4BfDoMplsteTailPacketCounters.parent = parent }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetParent() types.Entity { return ipv4BfDoMplsteTailPacketCounters.parent }

func (ipv4BfDoMplsteTailPacketCounters *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters) GetParentYangName() string { return "ipv4bf-do-mplste-tail-counters" }

// Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter
// Interface  IPv4 BFD over MPLS-TE Packet
// counters
type Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Number of Hellos transmitted. The type is interface{} with range:
    // 0..4294967295.
    HelloTransmitCount interface{}

    // Number of Hellos received. The type is interface{} with range:
    // 0..4294967295.
    HelloReceiveCount interface{}

    // Number of echo packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    EchoTransmitCount interface{}

    // Number of echo packets received. The type is interface{} with range:
    // 0..4294967295.
    EchoReceiveCount interface{}

    // Packet Display Type. The type is BfdMgmtPktDisplay.
    DisplayType interface{}
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailPacketCounter.YFilter }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailPacketCounter.YFilter = yf }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "hello-transmit-count" { return "HelloTransmitCount" }
    if yname == "hello-receive-count" { return "HelloReceiveCount" }
    if yname == "echo-transmit-count" { return "EchoTransmitCount" }
    if yname == "echo-receive-count" { return "EchoReceiveCount" }
    if yname == "display-type" { return "DisplayType" }
    return ""
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-packet-counter"
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = ipv4BfDoMplsteTailPacketCounter.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteTailPacketCounter.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteTailPacketCounter.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteTailPacketCounter.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteTailPacketCounter.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteTailPacketCounter.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteTailPacketCounter.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteTailPacketCounter.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteTailPacketCounter.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteTailPacketCounter.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteTailPacketCounter.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteTailPacketCounter.FecCtype
    leafs["location"] = ipv4BfDoMplsteTailPacketCounter.Location
    leafs["hello-transmit-count"] = ipv4BfDoMplsteTailPacketCounter.HelloTransmitCount
    leafs["hello-receive-count"] = ipv4BfDoMplsteTailPacketCounter.HelloReceiveCount
    leafs["echo-transmit-count"] = ipv4BfDoMplsteTailPacketCounter.EchoTransmitCount
    leafs["echo-receive-count"] = ipv4BfDoMplsteTailPacketCounter.EchoReceiveCount
    leafs["display-type"] = ipv4BfDoMplsteTailPacketCounter.DisplayType
    return leafs
}

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetYangName() string { return "ipv4bf-do-mplste-tail-packet-counter" }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) SetParent(parent types.Entity) { ipv4BfDoMplsteTailPacketCounter.parent = parent }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetParent() types.Entity { return ipv4BfDoMplsteTailPacketCounter.parent }

func (ipv4BfDoMplsteTailPacketCounter *Bfd_Ipv4BfDoMplsteTailCounters_Ipv4BfDoMplsteTailPacketCounters_Ipv4BfDoMplsteTailPacketCounter) GetParentYangName() string { return "ipv4bf-do-mplste-tail-packet-counters" }

// Bfd_Ipv6SingleHopSessionBriefs
// Table of brief information about all IPv6
// singlehop BFD sessions in the System
type Bfd_Ipv6SingleHopSessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief information for a single IPv6 singlehop BFD session. The type is
    // slice of Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief.
    Ipv6SingleHopSessionBrief []Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetFilter() yfilter.YFilter { return ipv6SingleHopSessionBriefs.YFilter }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) SetFilter(yf yfilter.YFilter) { ipv6SingleHopSessionBriefs.YFilter = yf }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetGoName(yname string) string {
    if yname == "ipv6-single-hop-session-brief" { return "Ipv6SingleHopSessionBrief" }
    return ""
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetSegmentPath() string {
    return "ipv6-single-hop-session-briefs"
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv6-single-hop-session-brief" {
        for _, c := range ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief {
            if ipv6SingleHopSessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief{}
        ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief = append(ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief, child)
        return &ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief[len(ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief)-1]
    }
    return nil
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief {
        children[ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief[i].GetSegmentPath()] = &ipv6SingleHopSessionBriefs.Ipv6SingleHopSessionBrief[i]
    }
    return children
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetYangName() string { return "ipv6-single-hop-session-briefs" }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) SetParent(parent types.Entity) { ipv6SingleHopSessionBriefs.parent = parent }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetParent() types.Entity { return ipv6SingleHopSessionBriefs.parent }

func (ipv6SingleHopSessionBriefs *Bfd_Ipv6SingleHopSessionBriefs) GetParentYangName() string { return "bfd" }

// Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief
// Brief information for a single IPv6 singlehop
// BFD session
type Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session type. The type is BfdSession.
    SessionType interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // Session Flags. The type is interface{} with range: 0..4294967295.
    SessionFlags interface{}

    // Brief Status Information.
    StatusBriefInformation Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetFilter() yfilter.YFilter { return ipv6SingleHopSessionBrief.YFilter }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) SetFilter(yf yfilter.YFilter) { ipv6SingleHopSessionBrief.YFilter = yf }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "node-id" { return "NodeId" }
    if yname == "state" { return "State" }
    if yname == "session-type" { return "SessionType" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "session-flags" { return "SessionFlags" }
    if yname == "status-brief-information" { return "StatusBriefInformation" }
    return ""
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetSegmentPath() string {
    return "ipv6-single-hop-session-brief"
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status-brief-information" {
        return &ipv6SingleHopSessionBrief.StatusBriefInformation
    }
    return nil
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status-brief-information"] = &ipv6SingleHopSessionBrief.StatusBriefInformation
    return children
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = ipv6SingleHopSessionBrief.InterfaceName
    leafs["destination-address"] = ipv6SingleHopSessionBrief.DestinationAddress
    leafs["location"] = ipv6SingleHopSessionBrief.Location
    leafs["node-id"] = ipv6SingleHopSessionBrief.NodeId
    leafs["state"] = ipv6SingleHopSessionBrief.State
    leafs["session-type"] = ipv6SingleHopSessionBrief.SessionType
    leafs["session-subtype"] = ipv6SingleHopSessionBrief.SessionSubtype
    leafs["session-flags"] = ipv6SingleHopSessionBrief.SessionFlags
    return leafs
}

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetYangName() string { return "ipv6-single-hop-session-brief" }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) SetParent(parent types.Entity) { ipv6SingleHopSessionBrief.parent = parent }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetParent() types.Entity { return ipv6SingleHopSessionBrief.parent }

func (ipv6SingleHopSessionBrief *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief) GetParentYangName() string { return "ipv6-single-hop-session-briefs" }

// Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation
// Brief Status Information
type Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Async Interval and Detect Multiplier Information.
    AsyncIntervalMultiplier Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier

    // Echo Interval and Detect Multiplier Information.
    EchoIntervalMultiplier Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetFilter() yfilter.YFilter { return statusBriefInformation.YFilter }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) SetFilter(yf yfilter.YFilter) { statusBriefInformation.YFilter = yf }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetGoName(yname string) string {
    if yname == "async-interval-multiplier" { return "AsyncIntervalMultiplier" }
    if yname == "echo-interval-multiplier" { return "EchoIntervalMultiplier" }
    return ""
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetSegmentPath() string {
    return "status-brief-information"
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "async-interval-multiplier" {
        return &statusBriefInformation.AsyncIntervalMultiplier
    }
    if childYangName == "echo-interval-multiplier" {
        return &statusBriefInformation.EchoIntervalMultiplier
    }
    return nil
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["async-interval-multiplier"] = &statusBriefInformation.AsyncIntervalMultiplier
    children["echo-interval-multiplier"] = &statusBriefInformation.EchoIntervalMultiplier
    return children
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetBundleName() string { return "cisco_ios_xr" }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetYangName() string { return "status-brief-information" }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) SetParent(parent types.Entity) { statusBriefInformation.parent = parent }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetParent() types.Entity { return statusBriefInformation.parent }

func (statusBriefInformation *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation) GetParentYangName() string { return "ipv6-single-hop-session-brief" }

// Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier
// Async Interval and Detect Multiplier Information
type Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated remote transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedRemoteTransmitInterval interface{}

    // Negotiated local transmit interval in micro-seconds. The type is
    // interface{} with range: 0..4294967295. Units are microsecond.
    NegotiatedLocalTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetFilter() yfilter.YFilter { return asyncIntervalMultiplier.YFilter }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetFilter(yf yfilter.YFilter) { asyncIntervalMultiplier.YFilter = yf }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-remote-transmit-interval" { return "NegotiatedRemoteTransmitInterval" }
    if yname == "negotiated-local-transmit-interval" { return "NegotiatedLocalTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetSegmentPath() string {
    return "async-interval-multiplier"
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-remote-transmit-interval"] = asyncIntervalMultiplier.NegotiatedRemoteTransmitInterval
    leafs["negotiated-local-transmit-interval"] = asyncIntervalMultiplier.NegotiatedLocalTransmitInterval
    leafs["detection-time"] = asyncIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = asyncIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetYangName() string { return "async-interval-multiplier" }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) SetParent(parent types.Entity) { asyncIntervalMultiplier.parent = parent }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParent() types.Entity { return asyncIntervalMultiplier.parent }

func (asyncIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_AsyncIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier
// Echo Interval and Detect Multiplier Information
type Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Negotiated transmit interval in micro-seconds. The type is interface{} with
    // range: 0..4294967295. Units are microsecond.
    NegotiatedTransmitInterval interface{}

    // Detection time in micro-seconds. The type is interface{} with range:
    // 0..4294967295. Units are microsecond.
    DetectionTime interface{}

    // Detection Multiplier. The type is interface{} with range: 0..4294967295.
    DetectionMultiplier interface{}
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetFilter() yfilter.YFilter { return echoIntervalMultiplier.YFilter }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetFilter(yf yfilter.YFilter) { echoIntervalMultiplier.YFilter = yf }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetGoName(yname string) string {
    if yname == "negotiated-transmit-interval" { return "NegotiatedTransmitInterval" }
    if yname == "detection-time" { return "DetectionTime" }
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    return ""
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetSegmentPath() string {
    return "echo-interval-multiplier"
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["negotiated-transmit-interval"] = echoIntervalMultiplier.NegotiatedTransmitInterval
    leafs["detection-time"] = echoIntervalMultiplier.DetectionTime
    leafs["detection-multiplier"] = echoIntervalMultiplier.DetectionMultiplier
    return leafs
}

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleName() string { return "cisco_ios_xr" }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetYangName() string { return "echo-interval-multiplier" }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) SetParent(parent types.Entity) { echoIntervalMultiplier.parent = parent }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParent() types.Entity { return echoIntervalMultiplier.parent }

func (echoIntervalMultiplier *Bfd_Ipv6SingleHopSessionBriefs_Ipv6SingleHopSessionBrief_StatusBriefInformation_EchoIntervalMultiplier) GetParentYangName() string { return "status-brief-information" }

// Bfd_Ipv4BfDoMplsteTailMultiPaths
// IPv4 BFD over MPLS-TE Tail multipath
type Bfd_Ipv4BfDoMplsteTailMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label multipath table. The type is slice of
    // Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath.
    Ipv4BfDoMplsteTailMultiPath []Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailMultiPaths.YFilter }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailMultiPaths.YFilter = yf }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetGoName(yname string) string {
    if yname == "ipv4bf-do-mplste-tail-multi-path" { return "Ipv4BfDoMplsteTailMultiPath" }
    return ""
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-multi-paths"
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4bf-do-mplste-tail-multi-path" {
        for _, c := range ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath {
            if ipv4BfDoMplsteTailMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath{}
        ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath = append(ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath, child)
        return &ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath[len(ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath)-1]
    }
    return nil
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath {
        children[ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath[i].GetSegmentPath()] = &ipv4BfDoMplsteTailMultiPaths.Ipv4BfDoMplsteTailMultiPath[i]
    }
    return children
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetYangName() string { return "ipv4bf-do-mplste-tail-multi-paths" }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) SetParent(parent types.Entity) { ipv4BfDoMplsteTailMultiPaths.parent = parent }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetParent() types.Entity { return ipv4BfDoMplsteTailMultiPaths.parent }

func (ipv4BfDoMplsteTailMultiPaths *Bfd_Ipv4BfDoMplsteTailMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath
// Label multipath table
type Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Incoming Label. The type is interface{} with range:
    // -2147483648..2147483647.
    IncomingLabel interface{}

    // FEC Type. The type is interface{} with range: -2147483648..2147483647.
    FeCtype interface{}

    // FEC Subgroup ID. The type is interface{} with range:
    // -2147483648..2147483647.
    FecSubgroupId interface{}

    // FEC LSP ID. The type is interface{} with range: -2147483648..2147483647.
    Feclspid interface{}

    // FEC Tunnel ID. The type is interface{} with range: -2147483648..2147483647.
    FecTunnelId interface{}

    // FEC Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecExtendedTunnelId interface{}

    // FEC Source. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSource interface{}

    // FEC Destination. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecDestination interface{}

    // FEC P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    Fecp2Mpid interface{}

    // FEC Subgroup originator. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    FecSubgroupOriginator interface{}

    // FEC C Type. The type is interface{} with range: -2147483648..2147483647.
    FecCtype interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteTailMultiPath.YFilter }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteTailMultiPath.YFilter = yf }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "incoming-label" { return "IncomingLabel" }
    if yname == "fe-ctype" { return "FeCtype" }
    if yname == "fec-subgroup-id" { return "FecSubgroupId" }
    if yname == "feclspid" { return "Feclspid" }
    if yname == "fec-tunnel-id" { return "FecTunnelId" }
    if yname == "fec-extended-tunnel-id" { return "FecExtendedTunnelId" }
    if yname == "fec-source" { return "FecSource" }
    if yname == "fec-destination" { return "FecDestination" }
    if yname == "fecp2mpid" { return "Fecp2Mpid" }
    if yname == "fec-subgroup-originator" { return "FecSubgroupOriginator" }
    if yname == "fec-ctype" { return "FecCtype" }
    if yname == "location" { return "Location" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetSegmentPath() string {
    return "ipv4bf-do-mplste-tail-multi-path"
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = ipv4BfDoMplsteTailMultiPath.VrfName
    leafs["incoming-label"] = ipv4BfDoMplsteTailMultiPath.IncomingLabel
    leafs["fe-ctype"] = ipv4BfDoMplsteTailMultiPath.FeCtype
    leafs["fec-subgroup-id"] = ipv4BfDoMplsteTailMultiPath.FecSubgroupId
    leafs["feclspid"] = ipv4BfDoMplsteTailMultiPath.Feclspid
    leafs["fec-tunnel-id"] = ipv4BfDoMplsteTailMultiPath.FecTunnelId
    leafs["fec-extended-tunnel-id"] = ipv4BfDoMplsteTailMultiPath.FecExtendedTunnelId
    leafs["fec-source"] = ipv4BfDoMplsteTailMultiPath.FecSource
    leafs["fec-destination"] = ipv4BfDoMplsteTailMultiPath.FecDestination
    leafs["fecp2mpid"] = ipv4BfDoMplsteTailMultiPath.Fecp2Mpid
    leafs["fec-subgroup-originator"] = ipv4BfDoMplsteTailMultiPath.FecSubgroupOriginator
    leafs["fec-ctype"] = ipv4BfDoMplsteTailMultiPath.FecCtype
    leafs["location"] = ipv4BfDoMplsteTailMultiPath.Location
    leafs["session-subtype"] = ipv4BfDoMplsteTailMultiPath.SessionSubtype
    leafs["state"] = ipv4BfDoMplsteTailMultiPath.State
    leafs["local-discriminator"] = ipv4BfDoMplsteTailMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv4BfDoMplsteTailMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv4BfDoMplsteTailMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv4BfDoMplsteTailMultiPath.SessionInterfaceName
    return leafs
}

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetYangName() string { return "ipv4bf-do-mplste-tail-multi-path" }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) SetParent(parent types.Entity) { ipv4BfDoMplsteTailMultiPath.parent = parent }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetParent() types.Entity { return ipv4BfDoMplsteTailMultiPath.parent }

func (ipv4BfDoMplsteTailMultiPath *Bfd_Ipv4BfDoMplsteTailMultiPaths_Ipv4BfDoMplsteTailMultiPath) GetParentYangName() string { return "ipv4bf-do-mplste-tail-multi-paths" }

// Bfd_Ipv4MultiHopMultiPaths
// IPv4 multi-hop multipath
type Bfd_Ipv4MultiHopMultiPaths struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPv4 multi hop multipath table. The type is slice of
    // Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath.
    Ipv4MultiHopMultiPath []Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetFilter() yfilter.YFilter { return ipv4MultiHopMultiPaths.YFilter }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) SetFilter(yf yfilter.YFilter) { ipv4MultiHopMultiPaths.YFilter = yf }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetGoName(yname string) string {
    if yname == "ipv4-multi-hop-multi-path" { return "Ipv4MultiHopMultiPath" }
    return ""
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetSegmentPath() string {
    return "ipv4-multi-hop-multi-paths"
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4-multi-hop-multi-path" {
        for _, c := range ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath {
            if ipv4MultiHopMultiPaths.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath{}
        ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath = append(ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath, child)
        return &ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath[len(ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath)-1]
    }
    return nil
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath {
        children[ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath[i].GetSegmentPath()] = &ipv4MultiHopMultiPaths.Ipv4MultiHopMultiPath[i]
    }
    return children
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetYangName() string { return "ipv4-multi-hop-multi-paths" }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) SetParent(parent types.Entity) { ipv4MultiHopMultiPaths.parent = parent }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetParent() types.Entity { return ipv4MultiHopMultiPaths.parent }

func (ipv4MultiHopMultiPaths *Bfd_Ipv4MultiHopMultiPaths) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath
// IPv4 multi hop multipath table
type Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Destination Address. The type is one of the following types: string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Location. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Location interface{}

    // VRF name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Session subtype. The type is string.
    SessionSubtype interface{}

    // State. The type is BfdMgmtSessionState.
    State interface{}

    // Session's Local discriminator. The type is interface{} with range:
    // 0..4294967295.
    LocalDiscriminator interface{}

    // Location where session is housed. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeId interface{}

    // Incoming Label. The type is interface{} with range: 0..4294967295.
    IncomingLabelXr interface{}

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    SessionInterfaceName interface{}
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetFilter() yfilter.YFilter { return ipv4MultiHopMultiPath.YFilter }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) SetFilter(yf yfilter.YFilter) { ipv4MultiHopMultiPath.YFilter = yf }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "location" { return "Location" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "session-subtype" { return "SessionSubtype" }
    if yname == "state" { return "State" }
    if yname == "local-discriminator" { return "LocalDiscriminator" }
    if yname == "node-id" { return "NodeId" }
    if yname == "incoming-label-xr" { return "IncomingLabelXr" }
    if yname == "session-interface-name" { return "SessionInterfaceName" }
    return ""
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetSegmentPath() string {
    return "ipv4-multi-hop-multi-path"
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = ipv4MultiHopMultiPath.SourceAddress
    leafs["destination-address"] = ipv4MultiHopMultiPath.DestinationAddress
    leafs["location"] = ipv4MultiHopMultiPath.Location
    leafs["vrf-name"] = ipv4MultiHopMultiPath.VrfName
    leafs["session-subtype"] = ipv4MultiHopMultiPath.SessionSubtype
    leafs["state"] = ipv4MultiHopMultiPath.State
    leafs["local-discriminator"] = ipv4MultiHopMultiPath.LocalDiscriminator
    leafs["node-id"] = ipv4MultiHopMultiPath.NodeId
    leafs["incoming-label-xr"] = ipv4MultiHopMultiPath.IncomingLabelXr
    leafs["session-interface-name"] = ipv4MultiHopMultiPath.SessionInterfaceName
    return leafs
}

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetYangName() string { return "ipv4-multi-hop-multi-path" }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) SetParent(parent types.Entity) { ipv4MultiHopMultiPath.parent = parent }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetParent() types.Entity { return ipv4MultiHopMultiPath.parent }

func (ipv4MultiHopMultiPath *Bfd_Ipv4MultiHopMultiPaths_Ipv4MultiHopMultiPath) GetParentYangName() string { return "ipv4-multi-hop-multi-paths" }

// Bfd_Ipv4BfDoMplsteHeadSummary
// Summary information of IPv4 BFD over MPLS-TE
// Head
type Bfd_Ipv4BfDoMplsteHeadSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Statistics of states for sessions.
    SessionState Bfd_Ipv4BfDoMplsteHeadSummary_SessionState
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetFilter() yfilter.YFilter { return ipv4BfDoMplsteHeadSummary.YFilter }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) SetFilter(yf yfilter.YFilter) { ipv4BfDoMplsteHeadSummary.YFilter = yf }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    return ""
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetSegmentPath() string {
    return "ipv4bf-do-mplste-head-summary"
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-state" {
        return &ipv4BfDoMplsteHeadSummary.SessionState
    }
    return nil
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session-state"] = &ipv4BfDoMplsteHeadSummary.SessionState
    return children
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetYangName() string { return "ipv4bf-do-mplste-head-summary" }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) SetParent(parent types.Entity) { ipv4BfDoMplsteHeadSummary.parent = parent }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetParent() types.Entity { return ipv4BfDoMplsteHeadSummary.parent }

func (ipv4BfDoMplsteHeadSummary *Bfd_Ipv4BfDoMplsteHeadSummary) GetParentYangName() string { return "bfd" }

// Bfd_Ipv4BfDoMplsteHeadSummary_SessionState
// Statistics of states for sessions
type Bfd_Ipv4BfDoMplsteHeadSummary_SessionState struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions in database. The type is interface{} with range:
    // 0..4294967295.
    TotalCount interface{}

    // Number of sessions in down state. The type is interface{} with range:
    // 0..4294967295.
    DownCount interface{}

    // Number of sessions in up state. The type is interface{} with range:
    // 0..4294967295.
    UpCount interface{}

    // Number of sessions in unknown state. The type is interface{} with range:
    // 0..4294967295.
    UnknownCount interface{}
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetFilter() yfilter.YFilter { return sessionState.YFilter }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) SetFilter(yf yfilter.YFilter) { sessionState.YFilter = yf }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetGoName(yname string) string {
    if yname == "total-count" { return "TotalCount" }
    if yname == "down-count" { return "DownCount" }
    if yname == "up-count" { return "UpCount" }
    if yname == "unknown-count" { return "UnknownCount" }
    return ""
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetSegmentPath() string {
    return "session-state"
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-count"] = sessionState.TotalCount
    leafs["down-count"] = sessionState.DownCount
    leafs["up-count"] = sessionState.UpCount
    leafs["unknown-count"] = sessionState.UnknownCount
    return leafs
}

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetBundleName() string { return "cisco_ios_xr" }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetYangName() string { return "session-state" }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) SetParent(parent types.Entity) { sessionState.parent = parent }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetParent() types.Entity { return sessionState.parent }

func (sessionState *Bfd_Ipv4BfDoMplsteHeadSummary_SessionState) GetParentYangName() string { return "ipv4bf-do-mplste-head-summary" }

